/* Z Kit C API - types/base.h
	      ___
 _____	____ /	/______
/_   /_/  -_)  __/  _ /
 /____/\___/\__/ \__,_/
Copyright © 2006-2016 Manuel Sainz de Baranda y Goñi.
Released under the terms of the GNU Lesser General Public License v3. */

#ifndef __Z_types_base_H__
#define __Z_types_base_H__

#include <Z/inspection/floating point.h>
#include <Z/inspection/data model.h>
#include <Z/macros/templating.h>
#include <Z/macros/structure.h>
#include <Z/macros/members.h>

/* MARK: - Fixed size types */

typedef Z_DATA_MODEL_TYPE(UINT8)		zuint8;
typedef struct {zuint8 x, y;}			Z2DUInt8;
typedef struct {zuint8 x, y, z;}		Z3DUInt8;
typedef struct {zuint8 x, y, z, w;}		Z4DUInt8;
#define Z_UINT8					Z_DATA_MODEL_LITERAL   (UINT8)
#define Z_UINT8_BASE_VALUE_TYPE			Z_DATA_MODEL_VALUE_TYPE(UINT8)
#define Z_UINT8_FIXED_VALUE_TYPE		Z_VALUE_TYPE_UINT8
#define Z_UINT8_VALUE_TYPE			Z_VALUE_TYPE_UINT8
#define Z_UINT8_VALUE_FORMAT			Z_VALUE_FORMAT_8BIT_NATURAL
#define Z_UINT8_BITS				8
#define Z_UINT8_SIZE				1
#define Z_UINT8_MINIMUM				0
#define Z_UINT8_MAXIMUM				255

typedef Z_DATA_MODEL_TYPE(UINT16)		zuint16;
typedef struct {zuint16 x, y;}			Z2DUInt16;
typedef struct {zuint16 x, y, z;}		Z3DUInt16;
typedef struct {zuint16 x, y, z, w;}		Z4DUInt16;
#define Z_UINT16				Z_DATA_MODEL_LITERAL   (UINT16)
#define Z_UINT16_BASE_VALUE_TYPE		Z_DATA_MODEL_VALUE_TYPE(UINT16)
#define Z_UINT16_FIXED_VALUE_TYPE		Z_VALUE_TYPE_UINT16
#define Z_UINT16_VALUE_TYPE			Z_VALUE_TYPE_UINT16
#define Z_UINT16_VALUE_FORMAT			Z_VALUE_FORMAT_16BIT_NATURAL
#define Z_UINT16_ENDIANNESS			Z_CPU_ENDIANNESS(INTEGER, 16)
#define Z_UINT16_BITS				16
#define Z_UINT16_SIZE				2
#define Z_UINT16_MINIMUM			0
#define Z_UINT16_MAXIMUM			Z_UINT16(65535)

typedef Z_DATA_MODEL_TYPE(UINT32)		zuint32;
typedef struct {zuint32 x, y;}			Z2DUInt32;
typedef struct {zuint32 x, y, z;}		Z3DUInt32;
typedef struct {zuint32 x, y, z, w;}		Z4DUInt32;
#define Z_UINT32				Z_DATA_MODEL_LITERAL   (UINT32)
#define Z_UINT32_BASE_VALUE_TYPE		Z_DATA_MODEL_VALUE_TYPE(UINT32)
#define Z_UINT32_FIXED_VALUE_TYPE		Z_VALUE_TYPE_UINT32
#define Z_UINT32_VALUE_TYPE			Z_VALUE_TYPE_UINT32
#define Z_UINT32_VALUE_FORMAT			Z_VALUE_FORMAT_32BIT_NATURAL
#define Z_UINT32_ENDIANNESS			Z_CPU_ENDIANNESS(INTEGER, 32)
#define Z_UINT32_BITS				32
#define Z_UINT32_SIZE				4
#define Z_UINT32_MINIMUM			0
#define Z_UINT32_MAXIMUM			Z_UINT32(4294967295)

#if Z_DATA_MODEL_HAS_TYPE(UINT64)

	typedef Z_DATA_MODEL_TYPE(UINT64)	zuint64;
	typedef struct {zuint64 x, y;}		Z2DUInt64;
	typedef struct {zuint64 x, y, z;}	Z3DUInt64;
	typedef struct {zuint64 x, y, z, w;}	Z4DUInt64;
#	define Z_UINT64_BASE_VALUE_TYPE		Z_DATA_MODEL_VALUE_TYPE(UINT64)
#	define Z_UINT64_FIXED_VALUE_TYPE	Z_VALUE_TYPE_UINT64
#	define Z_UINT64_VALUE_TYPE		Z_VALUE_TYPE_UINT64
#	define Z_UINT64_VALUE_FORMAT		Z_VALUE_FORMAT_64BIT_NATURAL
#	define Z_UINT64_ENDIANNESS		Z_CPU_ENDIANNESS(INTEGER, 64)
#	define Z_UINT64_BITS			64
#	define Z_UINT64_SIZE			8
#	define Z_UINT64_MINIMUM			0

#	if Z_DATA_MODEL_HAS_LITERAL(UINT64)
#		define Z_UINT64			Z_DATA_MODEL_LITERAL(UINT64)
#		define Z_UINT64_MAXIMUM		Z_UINT64(18446744073709551615)
#	else
#		define Z_UINT64			Z_SAME
#		define Z_UINT64_MAXIMUM		(((zuint64)0) - 1)
#	endif

#endif

#if Z_DATA_MODEL_HAS_TYPE(UINT128)

	typedef Z_DATA_MODEL_TYPE(UINT128)	zuint128;
	typedef struct {zuint128 x, y;}		Z2DUInt128;
	typedef struct {zuint128 x, y, z;}	Z3DUInt128;
	typedef struct {zuint128 x, y, z, w;}	Z4DUInt128;
#	define Z_UINT128_BASE_VALUE_TYPE	Z_DATA_MODEL_VALUE_TYPE(UINT128)
#	define Z_UINT128_FIXED_VALUE_TYPE	Z_VALUE_TYPE_UINT128
#	define Z_UINT128_VALUE_TYPE		Z_VALUE_TYPE_UINT128
#	define Z_UINT128_VALUE_FORMAT		Z_VALUE_FORMAT_128BIT_NATURAL
#	define Z_UINT128_ENDIANNESS		Z_CPU_ENDIANNESS(INTEGER, 128)
#	define Z_UINT128_BITS			128
#	define Z_UINT128_SIZE			16
#	define Z_UINT128_MINIMUM		0

#	if Z_DATA_MODEL_HAS_LITERAL(UINT128)
#		define Z_UINT128		Z_DATA_MODEL_LITERAL(UINT128)
#		define Z_UINT128_MAXIMUM	Z_UINT128(340282366920938463463374607431768211455)
#	else
#		define Z_UINT128		Z_SAME
#		define Z_UINT128_MAXIMUM	(((zuint128)0) - 1)
#	endif

#endif

typedef Z_DATA_MODEL_TYPE(INT8)			zint8;
typedef struct {zint8 x, y;}			Z2DInt8;
typedef struct {zint8 x, y, z;}			Z3DInt8;
typedef struct {zint8 x, y, z, w;}		Z4DInt8;
#define Z_INT8					Z_DATA_MODEL_LITERAL   (INT8)
#define Z_INT8_BASE_VALUE_TYPE			Z_DATA_MODEL_VALUE_TYPE(INT8)
#define Z_INT8_FIXED_VALUE_TYPE			Z_VALUE_TYPE_INT8
#define Z_INT8_VALUE_TYPE			Z_VALUE_TYPE_INT8
#define Z_INT8_VALUE_FORMAT			Z_CPU_FORMAT(INTEGER, 8)
#define Z_INT8_BITS				8
#define Z_INT8_SIZE				1
#define Z_INT8_MINIMUM				(-128)
#define Z_INT8_MAXIMUM				127

typedef Z_DATA_MODEL_TYPE(INT16)		zint16;
typedef struct {zint16 x, y;}			Z2DInt16;
typedef struct {zint16 x, y, z;}		Z3DInt16;
typedef struct {zint16 x, y, z, w;}		Z4DInt16;
#define Z_INT16					Z_DATA_MODEL_LITERAL   (INT16)
#define Z_INT16_BASE_VALUE_TYPE			Z_DATA_MODEL_VALUE_TYPE(INT16)
#define Z_INT16_FIXED_VALUE_TYPE		Z_VALUE_TYPE_INT16
#define Z_INT16_VALUE_TYPE			Z_VALUE_TYPE_INT16
#define Z_INT16_VALUE_FORMAT			Z_CPU_FORMAT	(INTEGER, 16)
#define Z_INT16_ENDIANNESS			Z_CPU_ENDIANNESS(INTEGER, 16)
#define Z_INT16_BITS				16
#define Z_INT16_SIZE				2
#define Z_INT16_MINIMUM				Z_INT16(-32768)
#define Z_INT16_MAXIMUM				Z_INT16( 32767)

typedef Z_DATA_MODEL_TYPE(INT32)		zint32;
typedef struct {zint32 x, y;}			Z2DInt32;
typedef struct {zint32 x, y, z;}		Z3DInt32;
typedef struct {zint32 x, y, z, w;}		Z4DInt32;
#define Z_INT32					Z_DATA_MODEL_LITERAL   (INT32)
#define Z_INT32_BASE_VALUE_TYPE			Z_DATA_MODEL_VALUE_TYPE(INT32)
#define Z_INT32_FIXED_VALUE_TYPE		Z_VALUE_TYPE_INT32
#define Z_INT32_VALUE_TYPE			Z_VALUE_TYPE_INT32
#define Z_INT32_VALUE_FORMAT			Z_CPU_FORMAT	(INTEGER, 32)
#define Z_INT32_ENDIANNESS			Z_CPU_ENDIANNESS(INTEGER, 32)
#define Z_INT32_BITS				32
#define Z_INT32_SIZE				4
#define Z_INT32_MINIMUM				Z_INT32(-2147483648)
#define	Z_INT32_MAXIMUM				Z_INT32( 2147483647)

#if Z_DATA_MODEL_HAS_TYPE(INT64)

	typedef Z_DATA_MODEL_TYPE(INT64)	zint64;
	typedef struct {zint64 x, y;}		Z2DInt64;
	typedef struct {zint64 x, y, z;}	Z3DInt64;
	typedef struct {zint64 x, y, z, w;}	Z4DInt64;
#	define Z_INT64_BASE_VALUE_TYPE		Z_DATA_MODEL_VALUE_TYPE(INT64)
#	define Z_INT64_FIXED_VALUE_TYPE		Z_VALUE_TYPE_INT64
#	define Z_INT64_VALUE_TYPE		Z_VALUE_TYPE_INT64
#	define Z_INT64_VALUE_FORMAT		Z_CPU_FORMAT	(INTEGER, 64)
#	define Z_INT64_ENDIANNESS		Z_CPU_ENDIANNESS(INTEGER, 64)
#	define Z_INT64_BITS			64
#	define Z_INT64_SIZE			8

#	if Z_DATA_MODEL_HAS_LITERAL(INT128)
#		define Z_INT64			Z_DATA_MODEL_LITERAL(INT64)
#		define Z_INT64_MAXIMUM		Z_INT64(9223372036854775807)
#		define Z_INT64_MINIMUM		(-Z_INT64_MAXIMUM - Z_INT64(1))
#	else
#		define Z_INT64			Z_SAME
#		define Z_INT64_MAXIMUM		0 /* TO BE IMPLEMENTED */
#		define Z_INT64_MINIMUM		0 /* TO BE IMPLEMENTED */
#	endif

#endif

#if Z_DATA_MODEL_HAS_TYPE(INT128)

	typedef Z_DATA_MODEL_TYPE(INT128)	zint128;
	typedef struct {zint128 x, y;}		Z2DInt128;
	typedef struct {zint128 x, y, z;}	Z3DInt128;
	typedef struct {zint128 x, y, z, w;}	Z4DInt128;
#	define Z_INT128_BASE_VALUE_TYPE		Z_DATA_MODEL_VALUE_TYPE(INT128)
#	define Z_INT128_FIXED_VALUE_TYPE	Z_VALUE_TYPE_INT128
#	define Z_INT128_VALUE_TYPE		Z_VALUE_TYPE_INT128
#	define Z_INT128_VALUE_FORMAT		Z_CPU_FORMAT	(INTEGER, 128)
#	define Z_INT128_ENDIANNESS		Z_CPU_ENDIANNESS(INTEGER, 128)
#	define Z_INT128_BITS			128
#	define Z_INT128_SIZE			16

#	if Z_DATA_MODEL_HAS_LITERAL(INT128)
#		define Z_INT128			Z_DATA_MODEL_LITERAL(INT128)
#		define Z_INT128_MAXIMUM		Z_INT128(170141183460469231731687303715884105727)
#		define Z_INT128_MINIMUM		(-Z_INT128_MAXIMUM - Z_INT128(1))
#	else
#		define Z_INT128			Z_SAME
#		define Z_INT128_MAXIMUM		0 /* TO BE IMPLEMENTED */
#		define Z_INT128_MINIMUM		0 /* TO BE IMPLEMENTED */
#	endif

#endif

#if Z_FLOATING_POINT_HAS_TYPE(FLOAT16)

	typedef Z_FLOATING_POINT_TYPE(FLOAT16)	zfloat16;
	typedef struct {zfloat16 x, y;}		Z2DFloat16;
	typedef struct {zfloat16 x, y, z;}	Z3DFloat16;
	typedef struct {zfloat16 x, y, z, w;}	Z4DFloat16;
#	define Z_FLOAT16			Z_FLOATING_POINT_LITERAL	    (FLOAT16)
#	define Z_FLOAT16_BASE_VALUE_TYPE	Z_FLOATING_POINT_VALUE_TYPE	    (FLOAT16)
#	define Z_FLOAT16_FIXED_VALUE_TYPE	Z_VALUE_TYPE_FLOAT16
#	define Z_FLOAT16_VALUE_TYPE		Z_VALUE_TYPE_FLOAT16
#	define Z_FLOAT16_VALUE_FORMAT		Z_FLOATING_POINT_VALUE_FORMAT	    (FLOAT16)
#	define Z_FLOAT16_BITS			16
#	define Z_FLOAT16_SIZE			2
#	define Z_FLOAT16_BIAS			Z_FLOATING_POINT_BIAS		    (FLOAT16)
#	define Z_FLOAT16_DECIMAL_DIGITS		Z_FLOATING_POINT_DECIMAL_DIGITS	    (FLOAT16)
#	define Z_FLOAT16_SIGNIFICAND_OFFSET	Z_FLOATING_POINT_SIGNIFICAND_OFFSET (FLOAT16)
#	define Z_FLOAT16_SIGNIFICAND_BITS	Z_FLOATING_POINT_SIGNIFICAND_BITS   (FLOAT16)
#	define Z_FLOAT16_SIGNIFICAND_DIGITS	Z_FLOATING_POINT_SIGNIFICAND_DIGITS (FLOAT16)
#	define Z_FLOAT16_EXPONENT_OFFSET	Z_FLOATING_POINT_EXPONENT_OFFSET    (FLOAT16)
#	define Z_FLOAT16_EXPONENT_BITS		Z_FLOATING_POINT_EXPONENT_BITS	    (FLOAT16)
#	define Z_FLOAT16_EXPONENT_RADIX		Z_FLOATING_POINT_EXPONENT_RADIX	    (FLOAT16)
#	define Z_FLOAT16_EXPONENT_MINIMUM	Z_FLOATING_POINT_EXPONENT_MINIMUM   (FLOAT16)
#	define Z_FLOAT16_EXPONENT_MAXIMUM	Z_FLOATING_POINT_EXPONENT_MAXIMUM   (FLOAT16)
#	define Z_FLOAT16_EXPONENT_10_MINIMUM	Z_FLOATING_POINT_EXPONENT_10_MINIMUM(FLOAT16)
#	define Z_FLOAT16_EXPONENT_10_MAXIMUM	Z_FLOATING_POINT_EXPONENT_10_MAXIMUM(FLOAT16)
#	define Z_FLOAT16_SIGN_OFFSET		Z_FLOATING_POINT_SIGN_OFFSET	    (FLOAT16)
#	define Z_FLOAT16_SIGN_BITS		Z_FLOATING_POINT_SIGN_BITS	    (FLOAT16)
#	define Z_FLOAT16_EPSILON		Z_FLOATING_POINT_EPSILON	    (FLOAT16)
#	define Z_FLOAT16_MINIMUM		Z_FLOATING_POINT_MINIMUM	    (FLOAT16)
#	define Z_FLOAT16_MAXIMUM		Z_FLOATING_POINT_MAXIMUM	    (FLOAT16)
#	define Z_FLOAT16_INFINITY		Z_FLOATING_POINT_INFINITY	    (FLOAT16)
#	define Z_FLOAT16_NAN			Z_FLOATING_POINT_NAN		    (FLOAT16)

#endif

#if Z_FLOATING_POINT_HAS_TYPE(FLOAT24)

	typedef Z_FLOATING_POINT_TYPE(FLOAT24)	zfloat24;
	typedef struct {zfloat24 x, y;}		Z2DFloat24;
	typedef struct {zfloat24 x, y, z;}	Z3DFloat24;
	typedef struct {zfloat24 x, y, z, w;}	Z4DFloat24;
#	define Z_FLOAT24			Z_FLOATING_POINT_LITERAL	    (FLOAT24)
#	define Z_FLOAT24_BASE_VALUE_TYPE	Z_FLOATING_POINT_VALUE_TYPE	    (FLOAT24)
#	define Z_FLOAT24_FIXED_VALUE_TYPE	Z_VALUE_TYPE_FLOAT24
#	define Z_FLOAT24_VALUE_TYPE		Z_VALUE_TYPE_FLOAT24
#	define Z_FLOAT24_VALUE_FORMAT		Z_FLOATING_POINT_VALUE_FORMAT	    (FLOAT24)
#	define Z_FLOAT24_BITS			24
#	define Z_FLOAT24_SIZE			3
#	define Z_FLOAT24_BIAS			Z_FLOATING_POINT_BIAS		    (FLOAT24)
#	define Z_FLOAT24_DECIMAL_DIGITS		Z_FLOATING_POINT_DECIMAL_DIGITS	    (FLOAT24)
#	define Z_FLOAT24_SIGNIFICAND_OFFSET	Z_FLOATING_POINT_SIGNIFICAND_OFFSET (FLOAT24)
#	define Z_FLOAT24_SIGNIFICAND_BITS	Z_FLOATING_POINT_SIGNIFICAND_BITS   (FLOAT24)
#	define Z_FLOAT24_SIGNIFICAND_DIGITS	Z_FLOATING_POINT_SIGNIFICAND_DIGITS (FLOAT24)
#	define Z_FLOAT24_EXPONENT_OFFSET	Z_FLOATING_POINT_EXPONENT_OFFSET    (FLOAT24)
#	define Z_FLOAT24_EXPONENT_BITS		Z_FLOATING_POINT_EXPONENT_BITS	    (FLOAT24)
#	define Z_FLOAT24_EXPONENT_RADIX		Z_FLOATING_POINT_EXPONENT_RADIX	    (FLOAT24)
#	define Z_FLOAT24_EXPONENT_MINIMUM	Z_FLOATING_POINT_EXPONENT_MINIMUM   (FLOAT24)
#	define Z_FLOAT24_EXPONENT_MAXIMUM	Z_FLOATING_POINT_EXPONENT_MAXIMUM   (FLOAT24)
#	define Z_FLOAT24_EXPONENT_10_MINIMUM	Z_FLOATING_POINT_EXPONENT_10_MINIMUM(FLOAT24)
#	define Z_FLOAT24_EXPONENT_10_MAXIMUM	Z_FLOATING_POINT_EXPONENT_10_MAXIMUM(FLOAT24)
#	define Z_FLOAT24_SIGN_OFFSET		Z_FLOATING_POINT_SIGN_OFFSET	    (FLOAT24)
#	define Z_FLOAT24_SIGN_BITS		Z_FLOATING_POINT_SIGN_BITS	    (FLOAT24)
#	define Z_FLOAT24_EPSILON		Z_FLOATING_POINT_EPSILON	    (FLOAT24)
#	define Z_FLOAT24_MINIMUM		Z_FLOATING_POINT_MINIMUM	    (FLOAT24)
#	define Z_FLOAT24_MAXIMUM		Z_FLOATING_POINT_MAXIMUM	    (FLOAT24)
#	define Z_FLOAT24_INFINITY		Z_FLOATING_POINT_INFINITY	    (FLOAT24)
#	define Z_FLOAT24_NAN			Z_FLOATING_POINT_NAN		    (FLOAT24)

#endif

#if Z_FLOATING_POINT_HAS_TYPE(FLOAT32)

	typedef Z_FLOATING_POINT_TYPE(FLOAT32)	zfloat32;
	typedef struct {zfloat32 x, y;}		Z2DFloat32;
	typedef struct {zfloat32 x, y, z;}	Z3DFloat32;
	typedef struct {zfloat32 x, y, z, w;}	Z4DFloat32;
#	define Z_FLOAT32			Z_FLOATING_POINT_LITERAL	    (FLOAT32)
#	define Z_FLOAT32_BASE_VALUE_TYPE	Z_FLOATING_POINT_VALUE_TYPE	    (FLOAT32)
#	define Z_FLOAT32_FIXED_VALUE_TYPE	Z_VALUE_TYPE_FLOAT32
#	define Z_FLOAT32_VALUE_TYPE		Z_VALUE_TYPE_FLOAT32
#	define Z_FLOAT32_VALUE_FORMAT		Z_FLOATING_POINT_VALUE_FORMAT	    (FLOAT32)
#	define Z_FLOAT32_BITS			32
#	define Z_FLOAT32_SIZE			4
#	define Z_FLOAT32_BIAS			Z_FLOATING_POINT_BIAS		    (FLOAT32)
#	define Z_FLOAT32_DECIMAL_DIGITS		Z_FLOATING_POINT_DECIMAL_DIGITS	    (FLOAT32)
#	define Z_FLOAT32_SIGNIFICAND_OFFSET	Z_FLOATING_POINT_SIGNIFICAND_OFFSET (FLOAT32)
#	define Z_FLOAT32_SIGNIFICAND_BITS	Z_FLOATING_POINT_SIGNIFICAND_BITS   (FLOAT32)
#	define Z_FLOAT32_SIGNIFICAND_DIGITS	Z_FLOATING_POINT_SIGNIFICAND_DIGITS (FLOAT32)
#	define Z_FLOAT32_EXPONENT_OFFSET	Z_FLOATING_POINT_EXPONENT_OFFSET    (FLOAT32)
#	define Z_FLOAT32_EXPONENT_BITS		Z_FLOATING_POINT_EXPONENT_BITS	    (FLOAT32)
#	define Z_FLOAT32_EXPONENT_RADIX		Z_FLOATING_POINT_EXPONENT_RADIX	    (FLOAT32)
#	define Z_FLOAT32_EXPONENT_MINIMUM	Z_FLOATING_POINT_EXPONENT_MINIMUM   (FLOAT32)
#	define Z_FLOAT32_EXPONENT_MAXIMUM	Z_FLOATING_POINT_EXPONENT_MAXIMUM   (FLOAT32)
#	define Z_FLOAT32_EXPONENT_10_MINIMUM	Z_FLOATING_POINT_EXPONENT_10_MINIMUM(FLOAT32)
#	define Z_FLOAT32_EXPONENT_10_MAXIMUM	Z_FLOATING_POINT_EXPONENT_10_MAXIMUM(FLOAT32)
#	define Z_FLOAT32_SIGN_OFFSET		Z_FLOATING_POINT_SIGN_OFFSET	    (FLOAT32)
#	define Z_FLOAT32_SIGN_BITS		Z_FLOATING_POINT_SIGN_BITS	    (FLOAT32)
#	define Z_FLOAT32_EPSILON		Z_FLOATING_POINT_EPSILON	    (FLOAT32)
#	define Z_FLOAT32_MINIMUM		Z_FLOATING_POINT_MINIMUM	    (FLOAT32)
#	define Z_FLOAT32_MAXIMUM		Z_FLOATING_POINT_MAXIMUM	    (FLOAT32)
#	define Z_FLOAT32_INFINITY		Z_FLOATING_POINT_INFINITY	    (FLOAT32)
#	define Z_FLOAT32_NAN			Z_FLOATING_POINT_NAN		    (FLOAT32)

#endif

#if Z_FLOATING_POINT_HAS_TYPE(FLOAT48)

	typedef Z_FLOATING_POINT_TYPE(FLOAT48)	zfloat48;
	typedef struct {zfloat48 x, y;}		Z2DFloat48;
	typedef struct {zfloat48 x, y, z;}	Z3DFloat48;
	typedef struct {zfloat48 x, y, z, w;}	Z4DFloat48;
#	define Z_FLOAT48			Z_FLOATING_POINT_LITERAL	    (FLOAT48)
#	define Z_FLOAT48_BASE_VALUE_TYPE	Z_FLOATING_POINT_VALUE_TYPE	    (FLOAT48)
#	define Z_FLOAT48_FIXED_VALUE_TYPE	Z_VALUE_TYPE_FLOAT48
#	define Z_FLOAT48_VALUE_TYPE		Z_VALUE_TYPE_FLOAT48
#	define Z_FLOAT48_VALUE_FORMAT		Z_FLOATING_POINT_VALUE_FORMAT	    (FLOAT48)
#	define Z_FLOAT48_BITS			48
#	define Z_FLOAT48_SIZE			6
#	define Z_FLOAT48_BIAS			Z_FLOATING_POINT_BIAS		    (FLOAT48)
#	define Z_FLOAT48_DECIMAL_DIGITS		Z_FLOATING_POINT_DECIMAL_DIGITS	    (FLOAT48)
#	define Z_FLOAT48_SIGNIFICAND_OFFSET	Z_FLOATING_POINT_SIGNIFICAND_OFFSET (FLOAT48)
#	define Z_FLOAT48_SIGNIFICAND_BITS	Z_FLOATING_POINT_SIGNIFICAND_BITS   (FLOAT48)
#	define Z_FLOAT48_SIGNIFICAND_DIGITS	Z_FLOATING_POINT_SIGNIFICAND_DIGITS (FLOAT48)
#	define Z_FLOAT48_EXPONENT_OFFSET	Z_FLOATING_POINT_EXPONENT_OFFSET    (FLOAT48)
#	define Z_FLOAT48_EXPONENT_BITS		Z_FLOATING_POINT_EXPONENT_BITS	    (FLOAT48)
#	define Z_FLOAT48_EXPONENT_RADIX		Z_FLOATING_POINT_EXPONENT_RADIX	    (FLOAT48)
#	define Z_FLOAT48_EXPONENT_MINIMUM	Z_FLOATING_POINT_EXPONENT_MINIMUM   (FLOAT48)
#	define Z_FLOAT48_EXPONENT_MAXIMUM	Z_FLOATING_POINT_EXPONENT_MAXIMUM   (FLOAT48)
#	define Z_FLOAT48_EXPONENT_10_MINIMUM	Z_FLOATING_POINT_EXPONENT_10_MINIMUM(FLOAT48)
#	define Z_FLOAT48_EXPONENT_10_MAXIMUM	Z_FLOATING_POINT_EXPONENT_10_MAXIMUM(FLOAT48)
#	define Z_FLOAT48_SIGN_OFFSET		Z_FLOATING_POINT_SIGN_OFFSET	    (FLOAT48)
#	define Z_FLOAT48_SIGN_BITS		Z_FLOATING_POINT_SIGN_BITS	    (FLOAT48)
#	define Z_FLOAT48_EPSILON		Z_FLOATING_POINT_EPSILON	    (FLOAT48)
#	define Z_FLOAT48_MINIMUM		Z_FLOATING_POINT_MINIMUM	    (FLOAT48)
#	define Z_FLOAT48_MAXIMUM		Z_FLOATING_POINT_MAXIMUM	    (FLOAT48)
#	define Z_FLOAT48_INFINITY		Z_FLOATING_POINT_INFINITY	    (FLOAT48)
#	define Z_FLOAT48_NAN			Z_FLOATING_POINT_NAN		    (FLOAT48)

#endif

#if Z_FLOATING_POINT_HAS_TYPE(FLOAT64)

	typedef Z_FLOATING_POINT_TYPE(FLOAT64)	zfloat64;
	typedef struct {zfloat64 x, y;}		Z2DFloat64;
	typedef struct {zfloat64 x, y, z;}	Z3DFloat64;
	typedef struct {zfloat64 x, y, z, w;}	Z4DFloat64;
#	define Z_FLOAT64			Z_FLOATING_POINT_LITERAL	    (FLOAT64)
#	define Z_FLOAT64_BASE_VALUE_TYPE	Z_FLOATING_POINT_VALUE_TYPE	    (FLOAT64)
#	define Z_FLOAT64_FIXED_VALUE_TYPE	Z_VALUE_TYPE_FLOAT64
#	define Z_FLOAT64_VALUE_TYPE		Z_VALUE_TYPE_FLOAT64
#	define Z_FLOAT64_VALUE_FORMAT		Z_FLOATING_POINT_VALUE_FORMAT	    (FLOAT64)
#	define Z_FLOAT64_BITS			64
#	define Z_FLOAT64_SIZE			8
#	define Z_FLOAT64_BIAS			Z_FLOATING_POINT_BIAS		    (FLOAT64)
#	define Z_FLOAT64_DECIMAL_DIGITS		Z_FLOATING_POINT_DECIMAL_DIGITS	    (FLOAT64)
#	define Z_FLOAT64_SIGNIFICAND_OFFSET	Z_FLOATING_POINT_SIGNIFICAND_OFFSET (FLOAT64)
#	define Z_FLOAT64_SIGNIFICAND_BITS	Z_FLOATING_POINT_SIGNIFICAND_BITS   (FLOAT64)
#	define Z_FLOAT64_SIGNIFICAND_DIGITS	Z_FLOATING_POINT_SIGNIFICAND_DIGITS (FLOAT64)
#	define Z_FLOAT64_EXPONENT_OFFSET	Z_FLOATING_POINT_EXPONENT_OFFSET    (FLOAT64)
#	define Z_FLOAT64_EXPONENT_BITS		Z_FLOATING_POINT_EXPONENT_BITS	    (FLOAT64)
#	define Z_FLOAT64_EXPONENT_RADIX		Z_FLOATING_POINT_EXPONENT_RADIX	    (FLOAT64)
#	define Z_FLOAT64_EXPONENT_MINIMUM	Z_FLOATING_POINT_EXPONENT_MINIMUM   (FLOAT64)
#	define Z_FLOAT64_EXPONENT_MAXIMUM	Z_FLOATING_POINT_EXPONENT_MAXIMUM   (FLOAT64)
#	define Z_FLOAT64_EXPONENT_10_MINIMUM	Z_FLOATING_POINT_EXPONENT_10_MINIMUM(FLOAT64)
#	define Z_FLOAT64_EXPONENT_10_MAXIMUM	Z_FLOATING_POINT_EXPONENT_10_MAXIMUM(FLOAT64)
#	define Z_FLOAT64_SIGN_OFFSET		Z_FLOATING_POINT_SIGN_OFFSET	    (FLOAT64)
#	define Z_FLOAT64_SIGN_BITS		Z_FLOATING_POINT_SIGN_BITS	    (FLOAT64)
#	define Z_FLOAT64_EPSILON		Z_FLOATING_POINT_EPSILON	    (FLOAT64)
#	define Z_FLOAT64_MINIMUM		Z_FLOATING_POINT_MINIMUM	    (FLOAT64)
#	define Z_FLOAT64_MAXIMUM		Z_FLOATING_POINT_MAXIMUM	    (FLOAT64)
#	define Z_FLOAT64_INFINITY		Z_FLOATING_POINT_INFINITY	    (FLOAT64)
#	define Z_FLOAT64_NAN			Z_FLOATING_POINT_NAN		    (FLOAT64)

#endif

#if Z_FLOATING_POINT_HAS_TYPE(FLOAT72)

	typedef Z_FLOATING_POINT_TYPE(FLOAT72)	zfloat72;
	typedef struct {zfloat72 x, y;}		Z2DFloat72;
	typedef struct {zfloat72 x, y, z;}	Z3DFloat72;
	typedef struct {zfloat72 x, y, z, w;}	Z4DFloat72;
#	define Z_FLOAT72			Z_FLOATING_POINT_LITERAL	    (FLOAT72)
#	define Z_FLOAT72_BASE_VALUE_TYPE	Z_FLOATING_POINT_VALUE_TYPE	    (FLOAT72)
#	define Z_FLOAT72_FIXED_VALUE_TYPE	Z_VALUE_TYPE_FLOAT72
#	define Z_FLOAT72_VALUE_TYPE		Z_VALUE_TYPE_FLOAT72
#	define Z_FLOAT72_VALUE_FORMAT		Z_FLOATING_POINT_VALUE_FORMAT	    (FLOAT72)
#	define Z_FLOAT72_BITS			72
#	define Z_FLOAT72_SIZE			9
#	define Z_FLOAT72_BIAS			Z_FLOATING_POINT_BIAS		    (FLOAT72)
#	define Z_FLOAT72_DECIMAL_DIGITS		Z_FLOATING_POINT_DECIMAL_DIGITS	    (FLOAT72)
#	define Z_FLOAT72_SIGNIFICAND_OFFSET	Z_FLOATING_POINT_SIGNIFICAND_OFFSET (FLOAT72)
#	define Z_FLOAT72_SIGNIFICAND_BITS	Z_FLOATING_POINT_SIGNIFICAND_BITS   (FLOAT72)
#	define Z_FLOAT72_SIGNIFICAND_DIGITS	Z_FLOATING_POINT_SIGNIFICAND_DIGITS (FLOAT72)
#	define Z_FLOAT72_EXPONENT_OFFSET	Z_FLOATING_POINT_EXPONENT_OFFSET    (FLOAT72)
#	define Z_FLOAT72_EXPONENT_BITS		Z_FLOATING_POINT_EXPONENT_BITS	    (FLOAT72)
#	define Z_FLOAT72_EXPONENT_RADIX		Z_FLOATING_POINT_EXPONENT_RADIX	    (FLOAT72)
#	define Z_FLOAT72_EXPONENT_MINIMUM	Z_FLOATING_POINT_EXPONENT_MINIMUM   (FLOAT72)
#	define Z_FLOAT72_EXPONENT_MAXIMUM	Z_FLOATING_POINT_EXPONENT_MAXIMUM   (FLOAT72)
#	define Z_FLOAT72_EXPONENT_10_MINIMUM	Z_FLOATING_POINT_EXPONENT_10_MINIMUM(FLOAT72)
#	define Z_FLOAT72_EXPONENT_10_MAXIMUM	Z_FLOATING_POINT_EXPONENT_10_MAXIMUM(FLOAT72)
#	define Z_FLOAT72_SIGN_OFFSET		Z_FLOATING_POINT_SIGN_OFFSET	    (FLOAT72)
#	define Z_FLOAT72_SIGN_BITS		Z_FLOATING_POINT_SIGN_BITS	    (FLOAT72)
#	define Z_FLOAT72_EPSILON		Z_FLOATING_POINT_EPSILON	    (FLOAT72)
#	define Z_FLOAT72_MINIMUM		Z_FLOATING_POINT_MINIMUM	    (FLOAT72)
#	define Z_FLOAT72_MAXIMUM		Z_FLOATING_POINT_MAXIMUM	    (FLOAT72)
#	define Z_FLOAT72_INFINITY		Z_FLOATING_POINT_INFINITY	    (FLOAT72)
#	define Z_FLOAT72_NAN			Z_FLOATING_POINT_NAN		    (FLOAT72)

#endif

#if Z_FLOATING_POINT_HAS_TYPE(FLOAT80)

	typedef Z_FLOATING_POINT_TYPE(FLOAT80)	zfloat80;
	typedef struct {zfloat80 x, y;}		Z2DFloat80;
	typedef struct {zfloat80 x, y, z;}	Z3DFloat80;
	typedef struct {zfloat80 x, y, z, w;}	Z4DFloat80;
#	define Z_FLOAT80			Z_FLOATING_POINT_LITERAL	    (FLOAT80)
#	define Z_FLOAT80_BASE_VALUE_TYPE	Z_FLOATING_POINT_VALUE_TYPE	    (FLOAT80)
#	define Z_FLOAT80_FIXED_VALUE_TYPE	Z_VALUE_TYPE_FLOAT80
#	define Z_FLOAT80_VALUE_TYPE		Z_VALUE_TYPE_FLOAT80
#	define Z_FLOAT80_VALUE_FORMAT		Z_FLOATING_POINT_VALUE_FORMAT	    (FLOAT80)
#	define Z_FLOAT80_BITS			80
#	define Z_FLOAT80_SIZE			10
#	define Z_FLOAT80_BIAS			Z_FLOATING_POINT_BIAS		    (FLOAT80)
#	define Z_FLOAT80_DECIMAL_DIGITS		Z_FLOATING_POINT_DECIMAL_DIGITS	    (FLOAT80)
#	define Z_FLOAT80_SIGNIFICAND_OFFSET	Z_FLOATING_POINT_SIGNIFICAND_OFFSET (FLOAT80)
#	define Z_FLOAT80_SIGNIFICAND_BITS	Z_FLOATING_POINT_SIGNIFICAND_BITS   (FLOAT80)
#	define Z_FLOAT80_SIGNIFICAND_DIGITS	Z_FLOATING_POINT_SIGNIFICAND_DIGITS (FLOAT80)
#	define Z_FLOAT80_EXPONENT_OFFSET	Z_FLOATING_POINT_EXPONENT_OFFSET    (FLOAT80)
#	define Z_FLOAT80_EXPONENT_BITS		Z_FLOATING_POINT_EXPONENT_BITS	    (FLOAT80)
#	define Z_FLOAT80_EXPONENT_RADIX		Z_FLOATING_POINT_EXPONENT_RADIX	    (FLOAT80)
#	define Z_FLOAT80_EXPONENT_MINIMUM	Z_FLOATING_POINT_EXPONENT_MINIMUM   (FLOAT80)
#	define Z_FLOAT80_EXPONENT_MAXIMUM	Z_FLOATING_POINT_EXPONENT_MAXIMUM   (FLOAT80)
#	define Z_FLOAT80_EXPONENT_10_MINIMUM	Z_FLOATING_POINT_EXPONENT_10_MINIMUM(FLOAT80)
#	define Z_FLOAT80_EXPONENT_10_MAXIMUM	Z_FLOATING_POINT_EXPONENT_10_MAXIMUM(FLOAT80)
#	define Z_FLOAT80_SIGN_OFFSET		Z_FLOATING_POINT_SIGN_OFFSET	    (FLOAT80)
#	define Z_FLOAT80_SIGN_BITS		Z_FLOATING_POINT_SIGN_BITS	    (FLOAT80)
#	define Z_FLOAT80_EPSILON		Z_FLOATING_POINT_EPSILON	    (FLOAT80)
#	define Z_FLOAT80_MINIMUM		Z_FLOATING_POINT_MINIMUM	    (FLOAT80)
#	define Z_FLOAT80_MAXIMUM		Z_FLOATING_POINT_MAXIMUM	    (FLOAT80)
#	define Z_FLOAT80_INFINITY		Z_FLOATING_POINT_INFINITY	    (FLOAT80)
#	define Z_FLOAT80_NAN			Z_FLOATING_POINT_NAN		    (FLOAT80)

#endif

#if Z_FLOATING_POINT_HAS_TYPE(FLOAT96)

	typedef Z_FLOATING_POINT_TYPE(FLOAT96)	zfloat96;
	typedef struct {zfloat96 x, y;}		Z2DFloat96;
	typedef struct {zfloat96 x, y, z;}	Z3DFloat96;
	typedef struct {zfloat96 x, y, z, w;}	Z4DFloat96;
#	define Z_FLOAT96			Z_FLOATING_POINT_LITERAL	    (FLOAT96)
#	define Z_FLOAT96_BASE_VALUE_TYPE	Z_FLOATING_POINT_VALUE_TYPE	    (FLOAT96)
#	define Z_FLOAT96_FIXED_VALUE_TYPE	Z_VALUE_TYPE_FLOAT96
#	define Z_FLOAT96_VALUE_TYPE		Z_VALUE_TYPE_FLOAT96
#	define Z_FLOAT96_VALUE_FORMAT		Z_FLOATING_POINT_VALUE_FORMAT	    (FLOAT96)
#	define Z_FLOAT96_BITS			96
#	define Z_FLOAT96_SIZE			12
#	define Z_FLOAT96_BIAS			Z_FLOATING_POINT_BIAS		    (FLOAT96)
#	define Z_FLOAT96_DECIMAL_DIGITS		Z_FLOATING_POINT_DECIMAL_DIGITS	    (FLOAT96)
#	define Z_FLOAT96_SIGNIFICAND_OFFSET	Z_FLOATING_POINT_SIGNIFICAND_OFFSET (FLOAT96)
#	define Z_FLOAT96_SIGNIFICAND_BITS	Z_FLOATING_POINT_SIGNIFICAND_BITS   (FLOAT96)
#	define Z_FLOAT96_SIGNIFICAND_DIGITS	Z_FLOATING_POINT_SIGNIFICAND_DIGITS (FLOAT96)
#	define Z_FLOAT96_EXPONENT_OFFSET	Z_FLOATING_POINT_EXPONENT_OFFSET    (FLOAT96)
#	define Z_FLOAT96_EXPONENT_BITS		Z_FLOATING_POINT_EXPONENT_BITS	    (FLOAT96)
#	define Z_FLOAT96_EXPONENT_RADIX		Z_FLOATING_POINT_EXPONENT_RADIX	    (FLOAT96)
#	define Z_FLOAT96_EXPONENT_MINIMUM	Z_FLOATING_POINT_EXPONENT_MINIMUM   (FLOAT96)
#	define Z_FLOAT96_EXPONENT_MAXIMUM	Z_FLOATING_POINT_EXPONENT_MAXIMUM   (FLOAT96)
#	define Z_FLOAT96_EXPONENT_10_MINIMUM	Z_FLOATING_POINT_EXPONENT_10_MINIMUM(FLOAT96)
#	define Z_FLOAT96_EXPONENT_10_MAXIMUM	Z_FLOATING_POINT_EXPONENT_10_MAXIMUM(FLOAT96)
#	define Z_FLOAT96_SIGN_OFFSET		Z_FLOATING_POINT_SIGN_OFFSET	    (FLOAT96)
#	define Z_FLOAT96_SIGN_BITS		Z_FLOATING_POINT_SIGN_BITS	    (FLOAT96)
#	define Z_FLOAT96_EPSILON		Z_FLOATING_POINT_EPSILON	    (FLOAT96)
#	define Z_FLOAT96_MINIMUM		Z_FLOATING_POINT_MINIMUM	    (FLOAT96)
#	define Z_FLOAT96_MAXIMUM		Z_FLOATING_POINT_MAXIMUM	    (FLOAT96)
#	define Z_FLOAT96_INFINITY		Z_FLOATING_POINT_INFINITY	    (FLOAT96)
#	define Z_FLOAT96_NAN			Z_FLOATING_POINT_NAN		    (FLOAT96)

#endif

#if Z_FLOATING_POINT_HAS_TYPE(FLOAT128)

	typedef Z_FLOATING_POINT_TYPE(FLOAT128)	zfloat128;
	typedef struct {zfloat128 x, y;}	Z2DFloat128;
	typedef struct {zfloat128 x, y, z;}	Z3DFloat128;
	typedef struct {zfloat128 x, y, z, w;}	Z4DFloat128;
#	define Z_FLOAT128			Z_FLOATING_POINT_LITERAL	    (FLOAT128)
#	define Z_FLOAT128_BASE_VALUE_TYPE	Z_FLOATING_POINT_VALUE_TYPE	    (FLOAT128)
#	define Z_FLOAT128_FIXED_VALUE_TYPE	Z_VALUE_TYPE_FLOAT128
#	define Z_FLOAT128_VALUE_TYPE		Z_VALUE_TYPE_FLOAT128
#	define Z_FLOAT128_VALUE_FORMAT		Z_FLOATING_POINT_VALUE_FORMAT	    (FLOAT128)
#	define Z_FLOAT128_BITS			128
#	define Z_FLOAT128_SIZE			16
#	define Z_FLOAT128_BIAS			Z_FLOATING_POINT_BIAS		    (FLOAT128)
#	define Z_FLOAT128_DECIMAL_DIGITS	Z_FLOATING_POINT_DECIMAL_DIGITS	    (FLOAT128)
#	define Z_FLOAT128_SIGNIFICAND_OFFSET	Z_FLOATING_POINT_SIGNIFICAND_OFFSET (FLOAT128)
#	define Z_FLOAT128_SIGNIFICAND_BITS	Z_FLOATING_POINT_SIGNIFICAND_BITS   (FLOAT128)
#	define Z_FLOAT128_SIGNIFICAND_DIGITS	Z_FLOATING_POINT_SIGNIFICAND_DIGITS (FLOAT128)
#	define Z_FLOAT128_EXPONENT_OFFSET	Z_FLOATING_POINT_EXPONENT_OFFSET    (FLOAT128)
#	define Z_FLOAT128_EXPONENT_BITS		Z_FLOATING_POINT_EXPONENT_BITS	    (FLOAT128)
#	define Z_FLOAT128_EXPONENT_RADIX	Z_FLOATING_POINT_EXPONENT_RADIX	    (FLOAT128)
#	define Z_FLOAT128_EXPONENT_MINIMUM	Z_FLOATING_POINT_EXPONENT_MINIMUM   (FLOAT128)
#	define Z_FLOAT128_EXPONENT_MAXIMUM	Z_FLOATING_POINT_EXPONENT_MAXIMUM   (FLOAT128)
#	define Z_FLOAT128_EXPONENT_10_MINIMUM	Z_FLOATING_POINT_EXPONENT_10_MINIMUM(FLOAT128)
#	define Z_FLOAT128_EXPONENT_10_MAXIMUM	Z_FLOATING_POINT_EXPONENT_10_MAXIMUM(FLOAT128)
#	define Z_FLOAT128_SIGN_OFFSET		Z_FLOATING_POINT_SIGN_OFFSET	    (FLOAT128)
#	define Z_FLOAT128_SIGN_BITS		Z_FLOATING_POINT_SIGN_BITS	    (FLOAT128)
#	define Z_FLOAT128_EPSILON		Z_FLOATING_POINT_EPSILON	    (FLOAT128)
#	define Z_FLOAT128_MINIMUM		Z_FLOATING_POINT_MINIMUM	    (FLOAT128)
#	define Z_FLOAT128_MAXIMUM		Z_FLOATING_POINT_MAXIMUM	    (FLOAT128)
#	define Z_FLOAT128_INFINITY		Z_FLOATING_POINT_INFINITY	    (FLOAT128)
#	define Z_FLOAT128_NAN			Z_FLOATING_POINT_NAN		    (FLOAT128)

#endif

#define ztype(			   TYPE)	Z_INSERT_##TYPE##_fixed_type(z, )
#define Z2DType(		   TYPE)	Z_INSERT_##TYPE##_FixedType(Z2D,)
#define Z3DType(		   TYPE)	Z_INSERT_##TYPE##_FixedType(Z3D,)
#define Z4DType(		   TYPE)	Z_INSERT_##TYPE##_FixedType(Z4D,)
#define Z_TYPE(			   TYPE)	Z_INSERT_##TYPE##_FIXED_TYPE(Z_,		     )
#define Z_TYPE_BASE_VALUE_TYPE(	   TYPE)	Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _BASE_VALUE_TYPE    )
#define Z_TYPE_VALUE_TYPE(	   TYPE)	Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _VALUE_TYPE	     )
#define Z_TYPE_VALUE_FORMAT(	   TYPE)	Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _VALUE_FORMAT	     )
#define Z_TYPE_ENDIANNESS(	   TYPE)	Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _ENDIANNESS	     )
#define Z_TYPE_SIZE(		   TYPE)	Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _SIZE		     )
#define Z_TYPE_BIAS(		   TYPE)	Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _BIAS		     )
#define Z_TYPE_DECIMAL_DIGITS(	   TYPE)	Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _DECIMAL_DIGITS     )
#define Z_TYPE_SIGNIFICAND_OFFSET( TYPE)	Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _SIGNIFICAND_OFFSET )
#define Z_TYPE_SIGNIFICAND_BITS(   TYPE)	Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _SIGNIFICAND_BITS   )
#define Z_TYPE_SIGNIFICAND_DIGITS( TYPE)	Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _SIGNIFICAND_DIGITS )
#define Z_TYPE_EXPONENT_OFFSET(	   TYPE)	Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _EXPONENT_OFFSET    )
#define Z_TYPE_EXPONENT_BITS(	   TYPE)	Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _EXPONENT_BITS      )
#define Z_TYPE_EXPONENT_RADIX(	   TYPE)	Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _EXPONENT_RADIX     )
#define Z_TYPE_EXPONENT_MINIMUM(   TYPE)	Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _EXPONENT_MINIMUM   )
#define Z_TYPE_EXPONENT_MAXIMUM(   TYPE)	Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _EXPONENT_MAXIMUM   )
#define Z_TYPE_EXPONENT_10_MINIMUM(TYPE)	Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _EXPONENT_10_MINIMUM)
#define Z_TYPE_EXPONENT_10_MAXIMUM(TYPE)	Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _EXPONENT_10_MAXIMUM)
#define Z_TYPE_SIGN_OFFSET(	   TYPE)	Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _SIGN_OFFSET	     )
#define Z_TYPE_SIGN_BITS(	   TYPE)	Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _SIGN_BITS	     )
#define Z_TYPE_EPSILON(		   TYPE)	Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _EPSILON	     )
#define Z_TYPE_MINIMUM(		   TYPE)	Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _MINIMUM	     )
#define Z_TYPE_MAXIMUM(		   TYPE)	Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _MAXIMUM	     )
#define Z_TYPE_INFINITY(	   TYPE)	Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _INFINITY	     )
#define Z_TYPE_NAN(		   TYPE)	Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _NAN		     )

/* MARK: - Default fixed size types */

#if defined(Z_UINT64)

	typedef zuint64				zdint64;
#	define Z_DINT64				Z_UINT64
#	define Z_DINT64_IS_SIGNED		FALSE

#elif defined(Z_INT64)

	typedef zint64				zdint64;
#	define Z_DINT64				Z_INT64
#	define Z_DINT64_IS_SIGNED		TRUE

#endif

#if defined(Z_UINT128)

	typedef zuint128			zdint128;
#	define Z_DINT128			Z_UINT128
#	define Z_DINT128_IS_SIGNED		FALSE

#elif defined(Z_INT128)

	typedef zint128				zdint128;
#	define Z_DINT128			Z_INT128
#	define Z_DINT128_IS_SIGNED		TRUE

#endif

/* MARK: - Standard base types */

#define Z_UCHAR_BITS				Z_DATA_MODEL_BITS(UCHAR)

typedef unsigned char				zuchar;
typedef Z2DType(UCHAR)				Z2DUChar;
typedef Z3DType(UCHAR)				Z3DUChar;
typedef Z4DType(UCHAR)				Z4DUChar;
#define Z_UCHAR					Z_SUFFIX_U
#define Z_UCHAR_BASE_VALUE_TYPE			Z_VALUE_TYPE_UCHAR
#define Z_UCHAR_FIXED_VALUE_TYPE		Z_TYPE_VALUE_TYPE  (UCHAR)
#define Z_UCHAR_VALUE_TYPE			Z_VALUE_TYPE_UCHAR
#define Z_UCHAR_VALUE_FORMAT			Z_TYPE_VALUE_FORMAT(UCHAR)
#define Z_UCHAR_SIZE				Z_TYPE_SIZE	   (UCHAR)
#define Z_UCHAR_MINIMUM				Z_TYPE_MINIMUM	   (UCHAR)
#define Z_UCHAR_MAXIMUM				Z_TYPE_MAXIMUM	   (UCHAR)

#define Z_USHORT_BITS				Z_DATA_MODEL_BITS(USHORT)

typedef unsigned short int			zushort;
typedef Z2DType(USHORT)				Z2DUShort;
typedef Z3DType(USHORT)				Z3DUShort;
typedef Z4DType(USHORT)				Z4DUShort;
#define Z_USHORT				Z_SUFFIX_U
#define Z_USHORT_BASE_VALUE_TYPE		Z_VALUE_TYPE_USHORT
#define Z_USHORT_FIXED_VALUE_TYPE		Z_TYPE_VALUE_TYPE  (USHORT)
#define Z_USHORT_VALUE_TYPE			Z_VALUE_TYPE_USHORT
#define Z_USHORT_VALUE_FORMAT			Z_TYPE_VALUE_FORMAT(USHORT)
#define Z_USHORT_ENDIANNESS			Z_TYPE_ENDIANNESS  (USHORT)
#define Z_USHORT_SIZE				Z_TYPE_SIZE	   (USHORT)
#define Z_USHORT_MINIMUM			Z_TYPE_MINIMUM	   (USHORT)
#define Z_USHORT_MAXIMUM			Z_TYPE_MAXIMUM	   (USHORT)

#define Z_UINT_BITS				Z_DATA_MODEL_BITS(UINT)

typedef unsigned int				zuint;
typedef Z2DType(UINT)				Z2DUInt;
typedef Z3DType(UINT)				Z3DUInt;
typedef Z4DType(UINT)				Z4DUInt;
#define Z_UINT					Z_SUFFIX_U
#define Z_UINT_BASE_VALUE_TYPE			Z_VALUE_TYPE_UINT
#define Z_UINT_FIXED_VALUE_TYPE			Z_TYPE_VALUE_TYPE  (UINT)
#define Z_UINT_VALUE_TYPE			Z_VALUE_TYPE_UINT
#define Z_UINT_VALUE_FORMAT			Z_TYPE_VALUE_FORMAT(UINT)
#define Z_UINT_ENDIANNESS			Z_TYPE_ENDIANNESS  (UINT)
#define Z_UINT_SIZE				Z_TYPE_SIZE	   (UINT)
#define Z_UINT_MINIMUM				Z_TYPE_MINIMUM	   (UINT)
#define Z_UINT_MAXIMUM				Z_TYPE_MAXIMUM	   (UINT)

#define Z_ULONG_BITS				Z_DATA_MODEL_BITS(ULONG)

typedef unsigned long int			zulong;
typedef Z2DType(ULONG)				Z2DULong;
typedef Z3DType(ULONG)				Z3DULong;
typedef Z4DType(ULONG)				Z4DULong;
#define Z_ULONG					Z_SUFFIX_UL
#define Z_ULONG_BASE_VALUE_TYPE			Z_VALUE_TYPE_ULONG
#define Z_ULONG_FIXED_VALUE_TYPE		Z_TYPE_VALUE_TYPE  (ULONG)
#define Z_ULONG_VALUE_TYPE			Z_VALUE_TYPE_ULONG
#define Z_ULONG_VALUE_FORMAT			Z_TYPE_VALUE_FORMAT(ULONG)
#define Z_ULONG_ENDIANNESS			Z_TYPE_ENDIANNESS  (ULONG)
#define Z_ULONG_SIZE				Z_TYPE_SIZE	   (ULONG)
#define Z_ULONG_MINIMUM				Z_TYPE_MINIMUM	   (ULONG)
#define Z_ULONG_MAXIMUM				Z_TYPE_MAXIMUM	   (ULONG)

#if Z_LANGUAGE_HAS_TYPE(C, ULLONG) || Z_LANGUAGE_HAS_TYPE(CPP, ULLONG)

#	define Z_ULLONG_BITS			Z_DATA_MODEL_BITS(ULLONG)

	typedef unsigned long long int		zullong;
	typedef Z2DType(ULLONG)			Z2DULLong;
	typedef Z3DType(ULLONG)			Z3DULLong;
	typedef Z4DType(ULLONG)			Z4DULLong;
#	define Z_ULLONG				Z_SUFFIX_LL
#	define Z_ULLONG_BASE_VALUE_TYPE		Z_VALUE_TYPE_ULLONG
#	define Z_ULLONG_FIXED_VALUE_TYPE	Z_TYPE_VALUE_TYPE  (ULLONG)
#	define Z_ULLONG_VALUE_TYPE		Z_VALUE_TYPE_ULLONG
#	define Z_ULLONG_VALUE_FORMAT		Z_TYPE_VALUE_FORMAT(ULLONG)
#	define Z_ULLONG_ENDIANNESS		Z_TYPE_ENDIANNESS  (ULLONG)
#	define Z_ULLONG_SIZE			Z_TYPE_SIZE	   (ULLONG)
#	define Z_ULLONG_MINIMUM			Z_TYPE_MINIMUM	   (ULLONG)
#	define Z_ULLONG_MAXIMUM			Z_TYPE_MAXIMUM	   (ULLONG)

#endif

#define Z_CHAR_BITS				Z_DATA_MODEL_BITS(CHAR)

typedef signed char				zchar;
typedef Z2DType(CHAR)				Z2DChar;
typedef Z3DType(CHAR)				Z3DChar;
typedef Z4DType(CHAR)				Z4DChar;
#define Z_CHAR					Z_SAME
#define Z_CHAR_BASE_VALUE_TYPE			Z_VALUE_TYPE_CHAR
#define Z_CHAR_FIXED_VALUE_TYPE			Z_TYPE_VALUE_TYPE  (CHAR)
#define Z_CHAR_VALUE_TYPE			Z_VALUE_TYPE_CHAR
#define Z_CHAR_VALUE_FORMAT			Z_TYPE_VALUE_FORMAT(CHAR)
#define Z_CHAR_SIZE				Z_TYPE_SIZE	   (CHAR)
#define Z_CHAR_MINIMUM				Z_TYPE_MINIMUM	   (CHAR)
#define Z_CHAR_MAXIMUM				Z_TYPE_MAXIMUM	   (CHAR)

#define Z_SHORT_BITS				Z_DATA_MODEL_BITS(SHORT)

typedef signed short int			zshort;
typedef Z2DType(SHORT)				Z2DShort;
typedef Z3DType(SHORT)				Z3DShort;
typedef Z4DType(SHORT)				Z4DShort;
#define Z_SHORT					Z_SAME
#define Z_SHORT_BASE_VALUE_TYPE			Z_VALUE_TYPE_SHORT
#define Z_SHORT_FIXED_VALUE_TYPE		Z_TYPE_VALUE_TYPE  (SHORT)
#define Z_SHORT_VALUE_TYPE			Z_VALUE_TYPE_SHORT
#define Z_SHORT_VALUE_FORMAT			Z_TYPE_VALUE_FORMAT(SHORT)
#define Z_SHORT_ENDIANNESS			Z_TYPE_ENDIANNESS  (SHORT)
#define Z_SHORT_SIZE				Z_TYPE_SIZE	   (SHORT)
#define Z_SHORT_MINIMUM				Z_TYPE_MINIMUM	   (SHORT)
#define Z_SHORT_MAXIMUM				Z_TYPE_MAXIMUM	   (SHORT)

#define Z_INT_BITS				Z_DATA_MODEL_BITS(INT)

typedef signed int				zint;
typedef Z2DType(INT)				Z2DInt;
typedef Z3DType(INT)				Z3DInt;
typedef Z4DType(INT)				Z4DInt;
#define Z_INT					Z_SAME
#define Z_INT_BASE_VALUE_TYPE			Z_VALUE_TYPE_INT
#define Z_INT_FIXED_VALUE_TYPE			Z_TYPE_VALUE_TYPE  (INT)
#define Z_INT_VALUE_TYPE			Z_VALUE_TYPE_INT
#define Z_INT_VALUE_FORMAT			Z_TYPE_VALUE_FORMAT(INT)
#define Z_INT_ENDIANNESS			Z_TYPE_ENDIANNESS  (INT)
#define Z_INT_SIZE				Z_TYPE_SIZE	   (INT)
#define Z_INT_MINIMUM				Z_TYPE_MINIMUM	   (INT)
#define Z_INT_MAXIMUM				Z_TYPE_MAXIMUM	   (INT)

#define Z_LONG_BITS				Z_DATA_MODEL_BITS(LONG)

typedef signed long int				zlong;
typedef Z2DType(LONG)				Z2DLong;
typedef Z3DType(LONG)				Z3DLong;
typedef Z4DType(LONG)				Z4DLong;
#define Z_LONG					Z_SUFFIX_L
#define Z_LONG_BASE_VALUE_TYPE			Z_VALUE_TYPE_LONG
#define Z_LONG_FIXED_VALUE_TYPE			Z_TYPE_VALUE_TYPE  (LONG)
#define Z_LONG_VALUE_TYPE			Z_VALUE_TYPE_LONG
#define Z_LONG_VALUE_FORMAT			Z_TYPE_VALUE_FORMAT(LONG)
#define Z_LONG_ENDIANNESS			Z_TYPE_ENDIANNESS  (LONG)
#define Z_LONG_SIZE				Z_TYPE_SIZE	   (LONG)
#define Z_LONG_MINIMUM				Z_TYPE_MINIMUM	   (LONG)
#define Z_LONG_MAXIMUM				Z_TYPE_MAXIMUM	   (LONG)

#if Z_LANGUAGE_HAS_TYPE(C, LLONG) || Z_LANGUAGE_HAS_TYPE(CPP, LLONG)

#	define Z_LLONG_BITS			Z_DATA_MODEL_BITS(LLONG)

	typedef signed long long int		zllong;
	typedef Z2DType(LLONG)			Z2DLLong;
	typedef Z3DType(LLONG)			Z3DLLong;
	typedef Z4DType(LLONG)			Z4DLLong;
#	define Z_LLONG				Z_SUFFIX_LL
#	define Z_LLONG_BASE_VALUE_TYPE		Z_VALUE_TYPE_LLONG
#	define Z_LLONG_FIXED_VALUE_TYPE		Z_TYPE_VALUE_TYPE  (LLONG)
#	define Z_LLONG_VALUE_TYPE		Z_VALUE_TYPE_LLONG
#	define Z_LLONG_VALUE_FORMAT		Z_TYPE_VALUE_FORMAT(LLONG)
#	define Z_LLONG_ENDIANNESS		Z_TYPE_ENDIANNESS  (LLONG)
#	define Z_LLONG_SIZE			Z_TYPE_SIZE	   (LLONG)
#	define Z_LLONG_MINIMUM			Z_TYPE_MINIMUM	   (LLONG)
#	define Z_LLONG_MAXIMUM			Z_TYPE_MAXIMUM	   (LLONG)

#endif

#if Z_LANGUAGE_HAS_TYPE(C, FLOAT)

#	define Z_FLOAT_BITS			Z_FLOATING_POINT_BITS(FLOAT)

	typedef float				zfloat;
	typedef Z2DType(FLOAT)			Z2DFloat;
	typedef Z3DType(FLOAT)			Z3DFloat;
	typedef Z4DType(FLOAT)			Z4DFloat;
#	define Z_FLOAT				Z_SUFFIX_F
#	define Z_FLOAT_BASE_VALUE_TYPE		Z_TYPE_BASE_VALUE_TYPE	  (FLOAT)
#	define Z_FLOAT_FIXED_VALUE_TYPE		Z_TYPE_FIXED_VALUE_TYPE	  (FLOAT)
#	define Z_FLOAT_VALUE_TYPE		Z_TYPE_VALUE_TYPE	  (FLOAT)
#	define Z_FLOAT_VALUE_FORMAT		Z_TYPE_VALUE_FORMAT	  (FLOAT)
#	define Z_FLOAT_SIZE			Z_TYPE_SIZE		  (FLOAT)
#	define Z_FLOAT_BIAS			Z_TYPE_BIAS		  (FLOAT)
#	define Z_FLOAT_DECIMAL_DIGITS		Z_TYPE_DECIMAL_DIGITS	  (FLOAT)
#	define Z_FLOAT_SIGNIFICAND_OFFSET	Z_TYPE_SIGNIFICAND_OFFSET (FLOAT)
#	define Z_FLOAT_SIGNIFICAND_BITS		Z_TYPE_SIGNIFICAND_BITS	  (FLOAT)
#	define Z_FLOAT_SIGNIFICAND_DIGITS	Z_TYPE_SIGNIFICAND_DIGITS (FLOAT)
#	define Z_FLOAT_EXPONENT_OFFSET		Z_TYPE_EXPONENT_OFFSET	  (FLOAT)
#	define Z_FLOAT_EXPONENT_BITS		Z_TYPE_EXPONENT_BITS	  (FLOAT)
#	define Z_FLOAT_EXPONENT_RADIX		Z_TYPE_EXPONENT_RADIX	  (FLOAT)
#	define Z_FLOAT_EXPONENT_MINIMUM		Z_TYPE_EXPONENT_MINIMUM	  (FLOAT)
#	define Z_FLOAT_EXPONENT_MAXIMUM		Z_TYPE_EXPONENT_MAXIMUM	  (FLOAT)
#	define Z_FLOAT_EXPONENT_10_MINIMUM	Z_TYPE_EXPONENT_10_MINIMUM(FLOAT)
#	define Z_FLOAT_EXPONENT_10_MAXIMUM	Z_TYPE_EXPONENT_10_MAXIMUM(FLOAT)
#	define Z_FLOAT_SIGN_OFFSET		Z_TYPE_SIGN_OFFSET	  (FLOAT)
#	define Z_FLOAT_SIGN_BITS		Z_TYPE_SIGN_BITS	  (FLOAT)
#	define Z_FLOAT_EPSILON			Z_TYPE_EPSILON		  (FLOAT)
#	define Z_FLOAT_MINIMUM			Z_TYPE_MINIMUM		  (FLOAT)
#	define Z_FLOAT_MAXIMUM			Z_TYPE_MAXIMUM		  (FLOAT)
#	define Z_FLOAT_INFINITY			Z_TYPE_INFINITY		  (FLOAT)
#	define Z_FLOAT_NAN			Z_TYPE_NAN		  (FLOAT)

#endif

#if Z_LANGUAGE_HAS_TYPE(C, DOUBLE)

#	define Z_DOUBLE_BITS			Z_FLOATING_POINT_BITS(DOUBLE)

	typedef double				zdouble;
	typedef Z2DType(DOUBLE)			Z2DDouble;
	typedef Z3DType(DOUBLE)			Z3DDouble;
	typedef Z4DType(DOUBLE)			Z4DDouble;
#	define Z_DOUBLE				Z_SAME
#	define Z_DOUBLE_BASE_VALUE_TYPE		Z_TYPE_BASE_VALUE_TYPE	  (DOUBLE)
#	define Z_DOUBLE_FIXED_VALUE_TYPE	Z_TYPE_FIXED_VALUE_TYPE	  (DOUBLE)
#	define Z_DOUBLE_VALUE_TYPE		Z_TYPE_VALUE_TYPE	  (DOUBLE)
#	define Z_DOUBLE_VALUE_FORMAT		Z_TYPE_VALUE_FORMAT	  (DOUBLE)
#	define Z_DOUBLE_SIZE			Z_TYPE_SIZE		  (DOUBLE)
#	define Z_DOUBLE_BIAS			Z_TYPE_BIAS		  (DOUBLE)
#	define Z_DOUBLE_DECIMAL_DIGITS		Z_TYPE_DECIMAL_DIGITS	  (DOUBLE)
#	define Z_DOUBLE_SIGNIFICAND_OFFSET	Z_TYPE_SIGNIFICAND_OFFSET (DOUBLE)
#	define Z_DOUBLE_SIGNIFICAND_BITS	Z_TYPE_SIGNIFICAND_BITS	  (DOUBLE)
#	define Z_DOUBLE_SIGNIFICAND_DIGITS	Z_TYPE_SIGNIFICAND_DIGITS (DOUBLE)
#	define Z_DOUBLE_EXPONENT_OFFSET		Z_TYPE_EXPONENT_OFFSET	  (DOUBLE)
#	define Z_DOUBLE_EXPONENT_BITS		Z_TYPE_EXPONENT_BITS	  (DOUBLE)
#	define Z_DOUBLE_EXPONENT_RADIX		Z_TYPE_EXPONENT_RADIX	  (DOUBLE)
#	define Z_DOUBLE_EXPONENT_MINIMUM	Z_TYPE_EXPONENT_MINIMUM	  (DOUBLE)
#	define Z_DOUBLE_EXPONENT_MAXIMUM	Z_TYPE_EXPONENT_MAXIMUM	  (DOUBLE)
#	define Z_DOUBLE_EXPONENT_10_MINIMUM	Z_TYPE_EXPONENT_10_MINIMUM(DOUBLE)
#	define Z_DOUBLE_EXPONENT_10_MAXIMUM	Z_TYPE_EXPONENT_10_MAXIMUM(DOUBLE)
#	define Z_DOUBLE_SIGN_OFFSET		Z_TYPE_SIGN_OFFSET	  (DOUBLE)
#	define Z_DOUBLE_SIGN_BITS		Z_TYPE_SIGN_BITS	  (DOUBLE)
#	define Z_DOUBLE_EPSILON			Z_TYPE_EPSILON		  (DOUBLE)
#	define Z_DOUBLE_MINIMUM			Z_TYPE_MINIMUM		  (DOUBLE)
#	define Z_DOUBLE_MAXIMUM			Z_TYPE_MAXIMUM		  (DOUBLE)
#	define Z_DOUBLE_INFINITY		Z_TYPE_INFINITY		  (DOUBLE)
#	define Z_DOUBLE_NAN			Z_TYPE_NAN		  (DOUBLE)

#endif

#if Z_LANGUAGE_HAS_TYPE(C, LDOUBLE) || Z_LANGUAGE_HAS_TYPE(CPP, LDOUBLE)

#	define Z_LDOUBLE_BITS			Z_FLOATING_POINT_BITS(LDOUBLE)

	typedef long double			zldouble;
	typedef Z2DType(LDOUBLE)		Z2DLDouble;
	typedef Z3DType(LDOUBLE)		Z3DLDouble;
	typedef Z4DType(LDOUBLE)		Z4DLDouble;
#	define Z_LDOUBLE			Z_SUFFIX_L
#	define Z_LDOUBLE_BASE_VALUE_TYPE	Z_TYPE_BASE_VALUE_TYPE	  (LDOUBLE)
#	define Z_LDOUBLE_FIXED_VALUE_TYPE	Z_TYPE_FIXED_VALUE_TYPE	  (LDOUBLE)
#	define Z_LDOUBLE_VALUE_TYPE		Z_TYPE_VALUE_TYPE	  (LDOUBLE)
#	define Z_LDOUBLE_VALUE_FORMAT		Z_TYPE_VALUE_FORMAT	  (LDOUBLE)
#	define Z_LDOUBLE_SIZE			Z_TYPE_SIZE		  (LDOUBLE)
#	define Z_LDOUBLE_BIAS			Z_TYPE_BIAS		  (LDOUBLE)
#	define Z_LDOUBLE_DECIMAL_DIGITS		Z_TYPE_DECIMAL_DIGITS	  (LDOUBLE)
#	define Z_LDOUBLE_SIGNIFICAND_OFFSET	Z_TYPE_SIGNIFICAND_OFFSET (LDOUBLE)
#	define Z_LDOUBLE_SIGNIFICAND_BITS	Z_TYPE_SIGNIFICAND_BITS	  (LDOUBLE)
#	define Z_LDOUBLE_SIGNIFICAND_DIGITS	Z_TYPE_SIGNIFICAND_DIGITS (LDOUBLE)
#	define Z_LDOUBLE_EXPONENT_OFFSET	Z_TYPE_EXPONENT_OFFSET	  (LDOUBLE)
#	define Z_LDOUBLE_EXPONENT_BITS		Z_TYPE_EXPONENT_BITS	  (LDOUBLE)
#	define Z_LDOUBLE_EXPONENT_RADIX		Z_TYPE_EXPONENT_RADIX	  (LDOUBLE)
#	define Z_LDOUBLE_EXPONENT_MINIMUM	Z_TYPE_EXPONENT_MINIMUM   (LDOUBLE)
#	define Z_LDOUBLE_EXPONENT_MAXIMUM	Z_TYPE_EXPONENT_MAXIMUM   (LDOUBLE)
#	define Z_LDOUBLE_EXPONENT_10_MINIMUM	Z_TYPE_EXPONENT_10_MINIMUM(LDOUBLE)
#	define Z_LDOUBLE_EXPONENT_10_MAXIMUM	Z_TYPE_EXPONENT_10_MAXIMUM(LDOUBLE)
#	define Z_LDOUBLE_SIGN_OFFSET		Z_TYPE_SIGN_OFFSET	  (LDOUBLE)
#	define Z_LDOUBLE_SIGN_BITS		Z_TYPE_SIGN_BITS	  (LDOUBLE)
#	define Z_LDOUBLE_EPSILON		Z_TYPE_EPSILON		  (LDOUBLE)
#	define Z_LDOUBLE_MINIMUM		Z_TYPE_MINIMUM		  (LDOUBLE)
#	define Z_LDOUBLE_MAXIMUM		Z_TYPE_MAXIMUM		  (LDOUBLE)
#	define Z_LDOUBLE_INFINITY		Z_TYPE_INFINITY		  (LDOUBLE)
#	define Z_LDOUBLE_NAN			Z_TYPE_NAN		  (LDOUBLE)

#endif

/* MARK: - Object size types */

#define Z_SIZE_BITS				Z_DATA_MODEL_BITS(SIZE)

typedef ztype  (SIZE)				zsize;
typedef Z2DType(SIZE)				Z2DSize;
typedef Z3DType(SIZE)				Z3DSize;
typedef Z4DType(SIZE)				Z4DSize;
#define Z_SIZE					Z_TYPE		      (SIZE)
#define Z_SIZE_BASE_VALUE_TYPE			Z_TYPE_BASE_VALUE_TYPE(SIZE)
#define Z_SIZE_FIXED_VALUE_TYPE			Z_TYPE_VALUE_TYPE     (SIZE)
#define Z_SIZE_VALUE_TYPE			Z_VALUE_TYPE_SIZE
#define Z_SIZE_VALUE_FORMAT			Z_TYPE_VALUE_FORMAT   (SIZE)
#define Z_SIZE_ENDIANNESS			Z_TYPE_ENDIANNESS     (SIZE)
#define Z_SIZE_SIZE				Z_TYPE_SIZE	      (SIZE)
#define Z_SIZE_MINIMUM				Z_TYPE_MINIMUM	      (SIZE)
#define Z_SIZE_MAXIMUM				Z_TYPE_MAXIMUM	      (SIZE)

#define Z_SSIZE_BITS				Z_DATA_MODEL_BITS(SSIZE)

typedef ztype  (SSIZE)				zssize;
typedef Z2DType(SSIZE)				Z2DSSize;
typedef Z3DType(SSIZE)				Z3DSSize;
typedef Z4DType(SSIZE)				Z4DSSize;
#define Z_SSIZE					Z_TYPE		      (SSIZE)
#define Z_SSIZE_BASE_VALUE_TYPE			Z_TYPE_BASE_VALUE_TYPE(SSIZE)
#define Z_SSIZE_FIXED_VALUE_TYPE		Z_TYPE_VALUE_TYPE     (SSIZE)
#define Z_SSIZE_VALUE_TYPE			Z_VALUE_TYPE_SSIZE
#define Z_SSIZE_VALUE_FORMAT			Z_TYPE_VALUE_FORMAT   (SSIZE)
#define Z_SSIZE_ENDIANNESS			Z_TYPE_ENDIANNESS     (SSIZE)
#define Z_SSIZE_SIZE				Z_TYPE_SIZE	      (SSIZE)
#define Z_SSIZE_MINIMUM				Z_TYPE_MINIMUM	      (SSIZE)
#define Z_SSIZE_MAXIMUM				Z_TYPE_MAXIMUM	      (SSIZE)

/* MARK: - Maximum size types */

#if defined(Z_UINT128)
#	define Z_UINTMAX_BITS			128
#elif defined(Z_UINT64)
#	define Z_UINTMAX_BITS			64
#elif defined(Z_ULLONG)
#	define Z_UINTMAX_BITS			Z_ULLONG_BITS
#else
#	define Z_UINTMAX_BITS			Z_ULONG_BITS
#endif

typedef ztype  (UINTMAX)			zuintmax;
typedef Z2DType(UINTMAX)			Z2DUIntMax;
typedef Z3DType(UINTMAX)			Z3DUIntMax;
typedef Z4DType(UINTMAX)			Z4DUIntMax;
#define Z_UINTMAX				Z_TYPE		      (UINTMAX)
#define Z_UINTMAX_BASE_VALUE_TYPE		Z_TYPE_BASE_VALUE_TYPE(UINTMAX)
#define Z_UINTMAX_FIXED_VALUE_TYPE		Z_TYPE_VALUE_TYPE     (UINTMAX)
#define Z_UINTMAX_VALUE_TYPE			Z_VALUE_TYPE_UINTMAX
#define Z_UINTMAX_VALUE_FORMAT			Z_TYPE_VALUE_FORMAT   (UINTMAX)
#define Z_UINTMAX_ENDIANNESS			Z_TYPE_ENDIANNESS     (UINTMAX)
#define Z_UINTMAX_SIZE				Z_TYPE_SIZE	      (UINTMAX)
#define Z_UINTMAX_MINIMUM			Z_TYPE_MINIMUM	      (UINTMAX)
#define Z_UINTMAX_MAXIMUM			Z_TYPE_MAXIMUM	      (UINTMAX)

#if defined(Z_INT128)
#	define Z_INTMAX_BITS			128
#elif defined(Z_INT64)
#	define Z_INTMAX_BITS			64
#elif defined(Z_LLONG)
#	define Z_INTMAX_BITS			Z_LLONG_BITS
#else
#	define Z_INTMAX_BITS			Z_LONG_BITS
#endif

typedef ztype  (INTMAX)				zintmax;
typedef Z2DType(INTMAX)				Z2DIntMax;
typedef Z3DType(INTMAX)				Z3DIntMax;
typedef Z4DType(INTMAX)				Z4DIntMax;
#define Z_INTMAX				Z_TYPE		      (INTMAX)
#define Z_INTMAX_BASE_VALUE_TYPE		Z_TYPE_BASE_VALUE_TYPE(INTMAX)
#define Z_INTMAX_FIXED_VALUE_TYPE		Z_TYPE_VALUE_TYPE     (INTMAX)
#define Z_INTMAX_VALUE_TYPE			Z_VALUE_TYPE_INTMAX
#define Z_INTMAX_VALUE_FORMAT			Z_TYPE_VALUE_FORMAT   (INTMAX)
#define Z_INTMAX_ENDIANNESS			Z_TYPE_ENDIANNESS     (INTMAX)
#define Z_INTMAX_SIZE				Z_TYPE_SIZE	      (INTMAX)
#define Z_INTMAX_MINIMUM			Z_TYPE_MINIMUM	      (INTMAX)
#define Z_INTMAX_MAXIMUM			Z_TYPE_MAXIMUM	      (INTMAX)

/* MARK: - Pointer size types */

#define Z_POINTER_BITS				Z_DATA_MODEL_BITS(POINTER)

#define Z_UINTPTR_BITS				Z_POINTER_BITS

typedef ztype  (UINTPTR)			zuintptr;
typedef Z2DType(UINTPTR)			Z2DUIntPtr;
typedef Z3DType(UINTPTR)			Z3DUIntPtr;
typedef Z4DType(UINTPTR)			Z4DUIntPtr;
#define Z_UINTPTR				Z_TYPE		      (UINTPTR)
#define Z_UINTPTR_BASE_VALUE_TYPE		Z_TYPE_BASE_VALUE_TYPE(UINTPTR)
#define Z_UINTPTR_FIXED_VALUE_TYPE		Z_TYPE_VALUE_TYPE     (UINTPTR)
#define Z_UINTPTR_VALUE_TYPE			Z_VALUE_TYPE_UINTPTR
#define Z_UINTPTR_VALUE_FORMAT			Z_TYPE_VALUE_FORMAT   (UINTPTR)
#define Z_UINTPTR_ENDIANNESS			Z_TYPE_ENDIANNESS     (UINTPTR)
#define Z_UINTPTR_SIZE				Z_TYPE_SIZE	      (UINTPTR)
#define Z_UINTPTR_MINIMUM			Z_TYPE_MINIMUM	      (UINTPTR)
#define Z_UINTPTR_MAXIMUM			Z_TYPE_MAXIMUM	      (UINTPTR)

#define Z_INTPTR_BITS				Z_POINTER_BITS

typedef ztype  (INTPTR)				zintptr;
typedef Z2DType(INTPTR)				Z2DIntPtr;
typedef Z3DType(INTPTR)				Z3DIntPtr;
typedef Z4DType(INTPTR)				Z4DIntPtr;
#define Z_INTPTR				Z_TYPE		      (INTPTR)
#define Z_INTPTR_BASE_VALUE_TYPE		Z_TYPE_BASE_VALUE_TYPE(INTPTR)
#define Z_INTPTR_FIXED_VALUE_TYPE		Z_TYPE_VALUE_TYPE     (INTPTR)
#define Z_INTPTR_VALUE_TYPE			Z_VALUE_TYPE_INTPTR
#define Z_INTPTR_VALUE_FORMAT			Z_TYPE_VALUE_FORMAT   (INTPTR)
#define Z_INTPTR_ENDIANNESS			Z_TYPE_ENDIANNESS     (INTPTR)
#define Z_INTPTR_SIZE				Z_TYPE_SIZE	      (INTPTR)
#define Z_INTPTR_MINIMUM			Z_TYPE_MINIMUM	      (INTPTR)
#define Z_INTPTR_MAXIMUM			Z_TYPE_MAXIMUM	      (INTPTR)

#define Z_POINTER_SIZE				Z_UINTPTR_SIZE

/* MARK: - Optimum maximum size types */

#if Z_CPU_BITS(TOP_INTEGER) >= 128 && defined(Z_UINT128)
#	define Z_UINTTOP_BITS			128
#elif Z_CPU_BITS(TOP_INTEGER) >= 64 && defined(Z_UINT64)
#	define Z_UINTTOP_BITS			64
#elif Z_CPU_BITS(TOP_INTEGER) == 32
#	define Z_UINTTOP_BITS			32
#else
#	define Z_UINTTOP_BITS			16
#endif

typedef ztype  (UINTTOP)			zuinttop;
typedef Z2DType(UINTTOP)			Z2DUIntTop;
typedef Z3DType(UINTTOP)			Z3DUIntTop;
typedef Z4DType(UINTTOP)			Z4DUIntTop;
#define Z_UINTTOP				Z_TYPE		      (UINTTOP)
#define Z_UINTTOP_BASE_VALUE_TYPE		Z_TYPE_BASE_VALUE_TYPE(UINTTOP)
#define Z_UINTTOP_FIXED_VALUE_TYPE		Z_TYPE_VALUE_TYPE     (UINTTOP)
#define Z_UINTTOP_VALUE_TYPE			Z_VALUE_TYPE_UINTTOP
#define Z_UINTTOP_VALUE_FORMAT			Z_TYPE_VALUE_FORMAT   (UINTTOP)
#define Z_UINTTOP_ENDIANNESS			Z_TYPE_ENDIANNESS     (UINTTOP)
#define Z_UINTTOP_SIZE				Z_TYPE_SIZE	      (UINTTOP)
#define Z_UINTTOP_MINIMUM			Z_TYPE_MINIMUM	      (UINTTOP)
#define Z_UINTTOP_MAXIMUM			Z_TYPE_MAXIMUM	      (UINTTOP)

#if Z_CPU_BITS(TOP_INTEGER) >= 128 && defined(Z_INT128)
#	define Z_INTTOP_BITS			128
#elif Z_CPU_BITS(TOP_INTEGER) >= 64 && defined(Z_INT64)
#	define Z_INTTOP_BITS			64
#elif Z_CPU_BITS(TOP_INTEGER) == 32
#	define Z_INTTOP_BITS			32
#else
#	define Z_INTTOP_BITS			16
#endif

typedef ztype  (INTTOP)				zinttop;
typedef Z2DType(INTTOP)				Z2DIntTop;
typedef Z3DType(INTTOP)				Z3DIntTop;
typedef Z4DType(INTTOP)				Z4DIntTop;
#define Z_INTTOP				Z_TYPE		      (INTTOP)
#define Z_INTTOP_BASE_VALUE_TYPE		Z_TYPE_BASE_VALUE_TYPE(INTTOP)
#define Z_INTTOP_FIXED_VALUE_TYPE		Z_TYPE_VALUE_TYPE     (INTTOP)
#define Z_INTTOP_VALUE_TYPE			Z_VALUE_TYPE_INTTOP
#define Z_INTTOP_VALUE_FORMAT			Z_TYPE_VALUE_FORMAT   (INTTOP)
#define Z_INTTOP_ENDIANNESS			Z_TYPE_ENDIANNESS     (INTTOP)
#define Z_INTTOP_SIZE				Z_TYPE_SIZE	      (INTTOP)
#define Z_INTTOP_MINIMUM			Z_TYPE_MINIMUM	      (INTTOP)
#define Z_INTTOP_MAXIMUM			Z_TYPE_MAXIMUM	      (INTTOP)

/* MARK: - Default types */

typedef zuint8					zboolean;
#define Z_BOOLEAN_BASE_VALUE_TYPE		Z_UINT8_BASE_VALUE_TYPE
#define Z_BOOLEAN_FIXED_VALUE_TYPE		Z_UINT8_FIXED_VALUE_TYPE
#define Z_BOOLEAN_VALUE_TYPE			Z_VALUE_TYPE_BOOLEAN
#define Z_BOOLEAN_VALUE_FORMAT			Z_UINT8_VALUE_FORMAT
#define Z_BOOLEAN_BITS				Z_UINT8_BITS
#define Z_BOOLEAN_SIZE				Z_UINT8_SIZE

#if ('\0' - 1) > 0
#	define Z_CHARACTER_BITS			Z_UCHAR_BITS
#	define Z_CHARACTER_IS_SIGNED		FALSE
#else
#	define Z_CHARACTER_BITS			Z_CHAR_BITS
#	define Z_CHARACTER_IS_SIGNED		TRUE
#endif

typedef char					zcharacter;
#define Z_CHARACTER				Z_TYPE		      (CHARACTER)
#define Z_CHARACTER_BASE_VALUE_TYPE		Z_TYPE_BASE_VALUE_TYPE(CHARACTER)
#define Z_CHARACTER_FIXED_VALUE_TYPE		Z_TYPE_VALUE_TYPE     (CHARACTER)
#define Z_CHARACTER_VALUE_TYPE			Z_VALUE_TYPE_CHARACTER
#define Z_CHARACTER_VALUE_FORMAT		Z_TYPE_VALUE_FORMAT   (CHARACTER)
#define Z_CHARACTER_SIZE			Z_TYPE_SIZE	      (CHARACTER)
#define Z_CHARACTER_MINIMUM			Z_TYPE_MINIMUM	      (CHARACTER)
#define Z_CHARACTER_MAXIMUM			Z_TYPE_MAXIMUM	      (CHARACTER)

#if defined(Z_USE_NATURAL_UINT16)
#	define Z_NATURAL_BITS			16
#elif defined(Z_USE_NATURAL_UINT32)
#	define Z_NATURAL_BITS			32
#elif defined(Z_USE_NATURAL_UINT64) && defined(Z_UINT64)
#	define Z_NATURAL_BITS			64
#elif defined(Z_USE_NATURAL_UINT128) && defined(Z_UINT128)
#	define Z_NATURAL_BITS			128
#else
#	define Z_NATURAL_BITS			Z_ULONG_BITS
#endif

typedef ztype  (NATURAL)			znatural;
typedef Z2DType(NATURAL)			Z2DNatural;
typedef Z3DType(NATURAL)			Z3DNatural;
typedef Z4DType(NATURAL)			Z4DNatural;
#define Z_NATURAL				Z_TYPE		      (NATURAL)
#define Z_NATURAL_BASE_VALUE_TYPE		Z_TYPE_BASE_VALUE_TYPE(NATURAL)
#define Z_NATURAL_FIXED_VALUE_TYPE		Z_TYPE_VALUE_TYPE     (NATURAL)
#define Z_NATURAL_VALUE_TYPE			Z_VALUE_TYPE_NATURAL
#define Z_NATURAL_VALUE_FORMAT			Z_TYPE_VALUE_FORMAT   (NATURAL)
#define Z_NATURAL_ENDIANNESS			Z_TYPE_ENDIANNESS     (NATURAL)
#define Z_NATURAL_SIZE				Z_TYPE_SIZE	      (NATURAL)
#define Z_NATURAL_MINIMUM			Z_TYPE_MINIMUM	      (NATURAL)
#define Z_NATURAL_MAXIMUM			Z_TYPE_MAXIMUM	      (NATURAL)

#if defined(Z_USE_INTEGER_INT16)
#	define Z_INTEGER_BITS			16
#elif defined(Z_USE_INTEGER_INT32)
#	define Z_INTEGER_BITS			32
#elif defined(Z_USE_INTEGER_INT64) && defined(Z_INT64)
#	define Z_INTEGER_BITS			64
#elif defined(Z_USE_INTEGER_INT64) && defined(Z_INT128)
#	define Z_INTEGER_BITS			128
#else
#	define Z_INTEGER_BITS			Z_LONG_BITS
#endif

typedef ztype  (INTEGER)			zinteger;
typedef Z2DType(INTEGER)			Z2DInteger;
typedef Z3DType(INTEGER)			Z3DInteger;
typedef Z4DType(INTEGER)			Z4DInteger;
#define Z_INTEGER				Z_TYPE		      (INTEGER)
#define Z_INTEGER_BASE_VALUE_TYPE		Z_TYPE_BASE_VALUE_TYPE(INTEGER)
#define Z_INTEGER_FIXED_VALUE_TYPE		Z_TYPE_VALUE_TYPE     (INTEGER)
#define Z_INTEGER_VALUE_TYPE			Z_VALUE_TYPE_INTEGER
#define Z_INTEGER_VALUE_FORMAT			Z_TYPE_VALUE_FORMAT   (INTEGER)
#define Z_INTEGER_ENDIANNESS			Z_TYPE_ENDIANNESS     (INTEGER)
#define Z_INTEGER_SIZE				Z_TYPE_SIZE	      (INTEGER)
#define Z_INTEGER_MINIMUM			Z_TYPE_MINIMUM	      (INTEGER)
#define Z_INTEGER_MAXIMUM			Z_TYPE_MAXIMUM	      (INTEGER)

#if defined(Z_USE_REAL_FLOAT16) && defined(Z_FLOAT16)
#	define Z_REAL_BITS			16
#elif defined(Z_USE_REAL_FLOAT24) && defined(Z_FLOAT24)
#	define Z_REAL_BITS			24
#elif defined(Z_USE_REAL_FLOAT32) && defined(Z_FLOAT32)
#	define Z_REAL_BITS			32
#elif defined(Z_USE_REAL_FLOAT48) && defined(Z_FLOAT48)
#	define Z_REAL_BITS			48
#elif defined(Z_USE_REAL_FLOAT64) && defined(Z_FLOAT64)
#	define Z_REAL_BITS			64
#elif defined(Z_USE_REAL_FLOAT72) && defined(Z_FLOAT72)
#	define Z_REAL_BITS			72
#elif defined(Z_USE_REAL_FLOAT80) && defined(Z_FLOAT80)
#	define Z_REAL_BITS			80
#elif defined(Z_USE_REAL_FLOAT96) && defined(Z_FLOAT96)
#	define Z_REAL_BITS			96
#elif defined(Z_USE_REAL_FLOAT128) && defined(Z_FLOAT128)
#	define Z_REAL_BITS			128
#elif defined(Z_USE_REAL_FLOAT) && defined(Z_FLOAT)
#	define Z_REAL_BITS			Z_FLOAT_BITS
#elif defined(Z_USE_REAL_LDOUBLE) && defined(Z_LDOUBLE)
#	define Z_REAL_BITS			Z_LDOUBLE_BITS
#elif defined(Z_DOUBLE)
#	define Z_REAL_BITS			Z_DOUBLE_BITS
#endif

#ifdef Z_REAL_BITS

	typedef ztype  (REAL)			zreal;
	typedef Z2DType(REAL)			Z2DReal;
	typedef Z3DType(REAL)			Z3DReal;
	typedef Z4DType(REAL)			Z4DReal;
#	define Z_REAL				Z_TYPE			  (REAL)
#	define Z_REAL_BASE_VALUE_TYPE		Z_TYPE_BASE_VALUE_TYPE	  (REAL)
#	define Z_REAL_FIXED_VALUE_TYPE		Z_TYPE_FIXED_VALUE_TYPE	  (REAL)
#	define Z_REAL_VALUE_TYPE		Z_VALUE_TYPE_REAL
#	define Z_REAL_VALUE_FORMAT		Z_TYPE_VALUE_FORMAT	  (REAL)
#	define Z_REAL_SIZE			Z_TYPE_SIZE		  (REAL)
#	define Z_REAL_BIAS			Z_TYPE_BIAS		  (REAL)
#	define Z_REAL_DECIMAL_DIGITS		Z_TYPE_DECIMAL_DIGITS	  (REAL)
#	define Z_REAL_SIGNIFICAND_OFFSET	Z_TYPE_SIGNIFICAND_OFFSET (REAL)
#	define Z_REAL_SIGNIFICAND_BITS		Z_TYPE_SIGNIFICAND_BITS	  (REAL)
#	define Z_REAL_SIGNIFICAND_DIGITS	Z_TYPE_SIGNIFICAND_DIGITS (REAL)
#	define Z_REAL_EXPONENT_OFFSET		Z_TYPE_EXPONENT_OFFSET	  (REAL)
#	define Z_REAL_EXPONENT_BITS		Z_TYPE_EXPONENT_BITS	  (REAL)
#	define Z_REAL_EXPONENT_RADIX		Z_TYPE_EXPONENT_RADIX	  (REAL)
#	define Z_REAL_EXPONENT_MINIMUM		Z_TYPE_EXPONENT_MINIMUM   (REAL)
#	define Z_REAL_EXPONENT_MAXIMUM		Z_TYPE_EXPONENT_MAXIMUM   (REAL)
#	define Z_REAL_EXPONENT_10_MINIMUM	Z_TYPE_EXPONENT_10_MINIMUM(REAL)
#	define Z_REAL_EXPONENT_10_MAXIMUM	Z_TYPE_EXPONENT_10_MAXIMUM(REAL)
#	define Z_REAL_SIGN_OFFSET		Z_TYPE_SIGN_OFFSET	  (REAL)
#	define Z_REAL_SIGN_BITS			Z_TYPE_SIGN_BITS	  (REAL)
#	define Z_REAL_EPSILON			Z_TYPE_EPSILON		  (REAL)
#	define Z_REAL_MINIMUM			Z_TYPE_MINIMUM		  (REAL)
#	define Z_REAL_MAXIMUM			Z_TYPE_MAXIMUM		  (REAL)
#	define Z_REAL_INFINITY			Z_TYPE_INFINITY		  (REAL)
#	define Z_REAL_NAN			Z_TYPE_NAN		  (REAL)

	typedef Z2DReal				Z2D;
	typedef Z3DReal				Z3D;
	typedef Z4DReal				Z4D;

#endif

/* MARK: - Order type */

typedef zint8					ZOrder;

/* MARK: - Status type */

typedef zint					ZStatus;

/* MARK: - Range types */

typedef struct {zuint8	index, size;}		ZRangeUInt8;
typedef struct {zuint16 index, size;}		ZRangeUInt16;
typedef struct {zuint32 index, size;}		ZRangeUInt32;

#ifdef Z_UINT64
	typedef struct {zuint64 index, size;}	ZRangeUInt64;
#endif

#ifdef Z_UINT128
	typedef struct {zuint128 index, size;}	ZRangeUInt128;
#endif

#define ZRangeType(TYPE)			Z_INSERT_##TYPE##_FixedType(ZRange,)

typedef ZRangeType(UCHAR)			ZRangeUChar;
typedef ZRangeType(USHORT)			ZRangeUShort;
typedef ZRangeType(UINT	 )			ZRangeUInt;
typedef ZRangeType(ULONG )			ZRangeULong;

#ifdef Z_ULLONG
	typedef ZRangeType(ULLONG)		ZRangeULLong;
#else
	typedef ZRangeULong			ZRangeULLong;
#endif

typedef ZRangeType(SIZE	  )			ZRangeSize;
typedef ZRangeType(UINTMAX)			ZRangeUIntMax;
typedef ZRangeType(UINTPTR)			ZRangeUIntPtr;
typedef ZRangeType(UINTTOP)			ZRangeUIntTop;
typedef ZRangeType(NATURAL)			ZRangeNatural;
typedef ZRangeSize				ZRange;

/* MARK: - Value component access types */

Z_DEFINE_STRICT_UNION (
	zuint8 value_uint8;
	zint8  value_int8;
) Z8Bit;

Z_DEFINE_STRICT_UNION_BEGIN
	zuint16 value_uint16;
	zint16	value_int16;
	zuint8	array_uint8[2];
	zint8	array_int8 [2];

	struct {Z_ENDIANIZED_MEMBERS(16, 2) (
		zuint8 index1,
		zuint8 index0
	)} values_uint8;

	struct {Z_ENDIANIZED_MEMBERS(16, 2) (
		zint8 index1,
		zint8 index0
	)} values_int8;

#	ifdef Z_FLOAT16
		zfloat16 value_float16;
#	endif
Z_DEFINE_STRICT_UNION_END Z16Bit;

Z_DEFINE_STRICT_UNION_BEGIN
	zuint32 value_uint32;
	zint32	value_int32;
	zuint16 array_uint16[2];
	zint16	array_int16 [2];
	zuint8	array_uint8 [4];
	zint8	array_int8  [4];

	struct {Z_ENDIANIZED_MEMBERS(32, 2) (
		zuint16 index1,
		zuint16 index0
	)} values_uint16;

	struct {Z_ENDIANIZED_MEMBERS(32, 2) (
		zint16 index1,
		zint16 index0
	)} values_int16;

	struct {Z_ENDIANIZED_MEMBERS(32, 4) (
		zuint8 index3,
		zuint8 index2,
		zuint8 index1,
		zuint8 index0
	)} values_uint8;

	struct {Z_ENDIANIZED_MEMBERS(32, 4) (
		zint8 index3,
		zint8 index2,
		zint8 index1,
		zint8 index0
	)} values_int8;

#	ifdef Z_FLOAT32
		zfloat32 value_float32;
#	endif

#	ifdef Z_FLOAT16
		zfloat16 array_float16[2];

		struct {Z_ENDIANIZED_MEMBERS(32, 2) (
			zfloat16 index1,
			zfloat16 index0
		)} values_float16;
#	endif
Z_DEFINE_STRICT_UNION_END Z32Bit;

Z_DEFINE_STRICT_UNION_BEGIN
	zuint32 array_uint32[2];
	zint32	array_int32 [2];
	zuint16 array_uint16[4];
	zint16	array_int16 [4];
	zuint8	array_uint8 [8];
	zint8	array_int8  [8];

	struct {Z_ENDIANIZED_MEMBERS(64, 2) (
		zuint32 index1,
		zuint32 index0
	)} values_uint32;

	struct {Z_ENDIANIZED_MEMBERS(64, 2) (
		zint32 index1,
		zint32 index0
	)} values_int32;

	struct {Z_ENDIANIZED_MEMBERS(64, 4) (
		zuint16 index3,
		zuint16 index2,
		zuint16 index1,
		zuint16 index0
	)} values_uint16;

	struct {Z_ENDIANIZED_MEMBERS(64, 4) (
		zint16 index3,
		zint16 index2,
		zint16 index1,
		zint16 index0
	)} values_int16;

	struct {Z_ENDIANIZED_MEMBERS(64, 8) (
		zuint8 index7,
		zuint8 index6,
		zuint8 index5,
		zuint8 index4,
		zuint8 index3,
		zuint8 index2,
		zuint8 index1,
		zuint8 index0
	)} values_uint8;

	struct {Z_ENDIANIZED_MEMBERS(64, 8) (
		zint8 index7,
		zint8 index6,
		zint8 index5,
		zint8 index4,
		zint8 index3,
		zint8 index2,
		zint8 index1,
		zint8 index0
	)} values_int8;

#	ifdef Z_UINT64
		zuint64 value_uint64;
#	endif

#	ifdef Z_INT64
		zint64 value_int64;
#	endif

#	ifdef Z_DINT64
		zdint64 value_dint64;
#	endif

#	ifdef Z_FLOAT64
		zfloat64 value_float64;
#	endif

#	ifdef Z_FLOAT32
		zfloat32 array_float32[2];

		struct {Z_ENDIANIZED_MEMBERS(64, 2) (
			zfloat32 index1,
			zfloat32 index0
		)} values_float32;
#	endif

#	ifdef Z_FLOAT16
		zfloat16 array_float16[4];

		struct {Z_ENDIANIZED_MEMBERS(64, 4) (
			zfloat16 index3,
			zfloat16 index2,
			zfloat16 index1,
			zfloat16 index0
		)} values_float16;
#	endif
Z_DEFINE_STRICT_UNION_END Z64Bit;

Z_DEFINE_STRICT_UNION_BEGIN
	zuint32	array_uint32[ 4];
	zint32	array_int32 [ 4];
	zuint16	array_uint16[ 8];
	zint16	array_int16 [ 8];
	zuint8	array_uint8 [16];
	zint8	array_int8  [16];

	struct {Z_ENDIANIZED_MEMBERS(128, 4) (
		zuint32 index3,
		zuint32 index2,
		zuint32 index1,
		zuint32 index0
	)} values_uint32;

	struct {Z_ENDIANIZED_MEMBERS(128, 4) (
		zint32 index3,
		zint32 index2,
		zint32 index1,
		zint32 index0
	)} values_int32;

	struct {Z_ENDIANIZED_MEMBERS(128, 8) (
		zuint16 index7,
		zuint16 index6,
		zuint16 index5,
		zuint16 index4,
		zuint16 index3,
		zuint16 index2,
		zuint16 index1,
		zuint16 index0
	)} values_uint16;

	struct {Z_ENDIANIZED_MEMBERS(128, 8) (
		zint16 index7,
		zint16 index6,
		zint16 index5,
		zint16 index4,
		zint16 index3,
		zint16 index2,
		zint16 index1,
		zint16 index0
	)} values_int16;

	struct {Z_ENDIANIZED_MEMBERS(128, 16) (
		zuint8 index15,
		zuint8 index14,
		zuint8 index13,
		zuint8 index12,
		zuint8 index11,
		zuint8 index10,
		zuint8 index09,
		zuint8 index08,
		zuint8 index07,
		zuint8 index06,
		zuint8 index05,
		zuint8 index04,
		zuint8 index03,
		zuint8 index02,
		zuint8 index01,
		zuint8 index00
	)} values_uint8;

	struct {Z_ENDIANIZED_MEMBERS(128, 16) (
		zint8 index15,
		zint8 index14,
		zint8 index13,
		zint8 index12,
		zint8 index11,
		zint8 index10,
		zint8 index09,
		zint8 index08,
		zint8 index07,
		zint8 index06,
		zint8 index05,
		zint8 index04,
		zint8 index03,
		zint8 index02,
		zint8 index01,
		zint8 index00
	)} values_int8;

#	ifdef Z_UINT128
		zuint128 value_uint128;
#	endif

#	ifdef Z_INT128
		zint128 value_int128;
#	endif

#	ifdef Z_DINT128
		zdint128 value_dint128;
#	endif

#	ifdef Z_UINT64
		zuint64 array_uint64[2];

		struct {Z_ENDIANIZED_MEMBERS(128, 2) (
			zuint64 index1,
			zuint64 index0
		)} values_uint64;
#	endif

#	ifdef Z_INT64
		zint64 array_int64[2];

		struct {Z_ENDIANIZED_MEMBERS(128, 2) (
			zint64 index1,
			zint64 index0
		)} values_int64;
#	endif

#	ifdef Z_DINT64
		zdint64 array_dint64[2];

		struct {Z_ENDIANIZED_MEMBERS(128, 2) (
			zdint64 index1,
			zdint64 index0
		)} values_dint64;
#	endif

#	ifdef Z_FLOAT128
		zfloat128 value_float128;
#	endif

#	ifdef Z_FLOAT64
		zfloat64 array_float64[2];

		struct {Z_ENDIANIZED_MEMBERS(128, 2) (
			zfloat64 index1,
			zfloat64 index0
		)} values_float64;
#	endif

#	ifdef Z_FLOAT32
		zfloat32 array_float32[4];

		struct {Z_ENDIANIZED_MEMBERS(128, 4) (
			zfloat32 index3,
			zfloat32 index2,
			zfloat32 index1,
			zfloat32 index0
		)} values_float32;
#	endif

#	ifdef Z_FLOAT16
		zfloat16 array_float16[8];

		struct {Z_ENDIANIZED_MEMBERS(128, 8) (
			zfloat16 index7,
			zfloat16 index6,
			zfloat16 index5,
			zfloat16 index4,
			zfloat16 index3,
			zfloat16 index2,
			zfloat16 index1,
			zfloat16 index0
		)} values_float16;
#	endif
Z_DEFINE_STRICT_UNION_END Z128Bit;

/* MARK: - Pointer cast type for lvalue assignment */

Z_DEFINE_STRICT_UNION_BEGIN
	zuint8*	     pointer_uint8;
	Z2DUInt8*    pointer_2d_uint8;
	Z3DUInt8*    pointer_3d_uint8;
	Z4DUInt8*    pointer_4d_uint8;
	ZRangeUInt8* pointer_range_uint8;

	zuint16*      pointer_uint16;
	Z2DUInt16*    pointer_2d_uint16;
	Z3DUInt16*    pointer_3d_uint16;
	Z4DUInt16*    pointer_4d_uint16;
	ZRangeUInt16* pointer_range_uint16;

	zuint32*      pointer_uint32;
	Z2DUInt32*    pointer_2d_uint32;
	Z3DUInt32*    pointer_3d_uint32;
	Z4DUInt32*    pointer_4d_uint32;
	ZRangeUInt32* pointer_range_uint32;

#	ifdef Z_UINT64
		zuint64*      pointer_uint64;
		Z2DUInt64*    pointer_2d_uint64;
		Z3DUInt64*    pointer_3d_uint64;
		Z4DUInt64*    pointer_4d_uint64;
		ZRangeUInt64* pointer_range_uint64;
#	endif

#	ifdef Z_UINT128
		zuint128*      pointer_uint128;
		Z2DUInt128*    pointer_2d_uint128;
		Z3DUInt128*    pointer_3d_uint128;
		Z4DUInt128*    pointer_4d_uint128;
		ZRangeUInt128* pointer_range_uint128;
#	endif

	zint8*	 pointer_int8;
	Z2DInt8* pointer_2d_int8;
	Z3DInt8* pointer_3d_int8;
	Z4DInt8* pointer_4d_int8;

	zint16*	  pointer_int16;
	Z2DInt16* pointer_2d_int16;
	Z3DInt16* pointer_3d_int16;
	Z4DInt16* pointer_4d_int16;

	zint32*	  pointer_int32;
	Z2DInt32* pointer_2d_int32;
	Z3DInt32* pointer_3d_int32;
	Z4DInt32* pointer_4d_int32;

#	ifdef Z_INT64
		zint64*	  pointer_int64;
		Z2DInt64* pointer_2d_int64;
		Z3DInt64* pointer_3d_int64;
		Z4DInt64* pointer_4d_int64;
#	endif

#	ifdef Z_INT128
		zint128*   pointer_int128;
		Z2DInt128* pointer_2d_int128;
		Z3DInt128* pointer_3d_int128;
		Z4DInt128* pointer_4d_int128;
#	endif

#	ifdef Z_DINT64
		zdint64* pointer_dint64;
#	endif

#	ifdef Z_DINT128
		zdint128* pointer_dint128;
#	endif

#	ifdef Z_FLOAT16
		zfloat16*   pointer_float16;
		Z2DFloat16* pointer_2d_float16;
		Z3DFloat16* pointer_3d_float16;
		Z4DFloat16* pointer_4d_float16;
#	endif

#	ifdef Z_FLOAT24
		zfloat24*   pointer_float24;
		Z2DFloat24* pointer_2d_float24;
		Z3DFloat24* pointer_3d_float24;
		Z4DFloat24* pointer_4d_float24;
#	endif

#	ifdef Z_FLOAT32
		zfloat32*   pointer_float32;
		Z2DFloat32* pointer_2d_float32;
		Z3DFloat32* pointer_3d_float32;
		Z4DFloat32* pointer_4d_float32;
#	endif

#	ifdef Z_FLOAT48
		zfloat48*   pointer_float48;
		Z2DFloat48* pointer_2d_float48;
		Z3DFloat48* pointer_3d_float48;
		Z4DFloat48* pointer_4d_float48;
#	endif

#	ifdef Z_FLOAT64
		zfloat64*   pointer_float64;
		Z2DFloat64* pointer_2d_float64;
		Z3DFloat64* pointer_3d_float64;
		Z4DFloat64* pointer_4d_float64;
#	endif

#	ifdef Z_FLOAT72
		zfloat72*   pointer_float72;
		Z2DFloat72* pointer_2d_float72;
		Z3DFloat72* pointer_3d_float72;
		Z4DFloat72* pointer_4d_float72;
#	endif

#	ifdef Z_FLOAT80
		zfloat80*   pointer_float80;
		Z2DFloat80* pointer_2d_float80;
		Z3DFloat80* pointer_3d_float80;
		Z4DFloat80* pointer_4d_float80;
#	endif

#	ifdef Z_FLOAT96
		zfloat96*   pointer_float96;
		Z2DFloat96* pointer_2d_float96;
		Z3DFloat96* pointer_3d_float96;
		Z4DFloat96* pointer_4d_float96;
#	endif

#	ifdef Z_FLOAT128
		zfloat128*   pointer_float128;
		Z2DFloat128* pointer_2d_float128;
		Z3DFloat128* pointer_3d_float128;
		Z4DFloat128* pointer_4d_float128;
#	endif

	zuchar*	     pointer_uchar;
	Z2DUChar*    pointer_2d_uchar;
	Z3DUChar*    pointer_3d_uchar;
	Z4DUChar*    pointer_4d_uchar;
	ZRangeUChar* pointer_range_uchar;

	zshort*	      pointer_ushort;
	Z2DUShort*    pointer_2d_ushort;
	Z3DUShort*    pointer_3d_ushort;
	Z4DUShort*    pointer_4d_ushort;
	ZRangeUShort* pointer_range_ushort;

	zuint*	    pointer_uint;
	Z2DUInt*    pointer_2d_uint;
	Z3DUInt*    pointer_3d_uint;
	Z4DUInt*    pointer_4d_uint;
	ZRangeUInt* pointer_range_uint;

	zulong*	     pointer_ulong;
	Z2DULong*    pointer_2d_ulong;
	Z3DULong*    pointer_3d_ulong;
	Z4DULong*    pointer_4d_ulong;
	ZRangeULong* pointer_range_ulong;

#	ifdef Z_ULLONG
		zullong*      pointer_ullong;
		Z2DULLong*    pointer_2d_ullong;
		Z3DULLong*    pointer_3d_ullong;
		Z4DULLong*    pointer_4d_ullong;
		ZRangeULLong* pointer_range_ullong;
#	endif

	zchar*	 pointer_char;
	Z2DChar* pointer_2d_char;
	Z3DChar* pointer_3d_char;
	Z4DChar* pointer_4d_char;

	zshort*	  pointer_short;
	Z2DShort* pointer_2d_short;
	Z3DShort* pointer_3d_short;
	Z4DShort* pointer_4d_short;

	zint*	pointer_int;
	Z2DInt* pointer_2d_int;
	Z3DInt* pointer_3d_int;
	Z4DInt* pointer_4d_int;

	zlong*	 pointer_long;
	Z2DLong* pointer_2d_long;
	Z3DLong* pointer_3d_long;
	Z4DLong* pointer_4d_long;

#	ifdef Z_LLONG
		zllong*	  pointer_llong;
		Z2DLLong* pointer_2d_llong;
		Z3DLLong* pointer_3d_llong;
		Z4DLLong* pointer_4d_llong;
#	endif

#	ifdef Z_FLOAT
		zfloat*	  pointer_float;
		Z2DFloat* pointer_2d_float;
		Z3DFloat* pointer_3d_float;
		Z4DFloat* pointer_4d_float;
#	endif

#	ifdef Z_DOUBLE
		zdouble*   pointer_double;
		Z2DDouble* pointer_2d_double;
		Z3DDouble* pointer_3d_double;
		Z4DDouble* pointer_4d_double;
#	endif

#	ifdef Z_LDOUBLE
		zldouble*   pointer_ldouble;
		Z2DLDouble* pointer_2d_ldouble;
		Z3DLDouble* pointer_3d_ldouble;
		Z4DLDouble* pointer_4d_ldouble;
#	endif

	zsize*	    pointer_size;
	Z2DSize*    pointer_2d_size;
	Z3DSize*    pointer_3d_size;
	Z4DSize*    pointer_4d_size;
	ZRangeSize* pointer_range_size;

	zssize*	  pointer_ssize;
	Z2DSSize* pointer_2d_ssize;
	Z3DSSize* pointer_3d_ssize;
	Z4DSSize* pointer_4d_ssize;

	zuintmax*      pointer_uintmax;
	Z2DUIntMax*    pointer_2d_uintmax;
	Z3DUIntMax*    pointer_3d_uintmax;
	Z4DUIntMax*    pointer_4d_uintmax;
	ZRangeUIntMax* pointer_range_uintmax;

	zuintptr*      pointer_uintptr;
	Z2DUIntPtr*    pointer_2d_uintptr;
	Z3DUIntPtr*    pointer_3d_uintptr;
	Z4DUIntPtr*    pointer_4d_uintptr;
	ZRangeUIntPtr* pointer_range_uintptr;

	zuinttop*      pointer_uinttop;
	Z2DUIntTop*    pointer_2d_uinttop;
	Z3DUIntTop*    pointer_3d_uinttop;
	Z4DUIntTop*    pointer_4d_uinttop;
	ZRangeUIntTop* pointer_range_uinttop;

	zintmax*   pointer_intmax;
	Z2DIntMax* pointer_2d_intmax;
	Z3DIntMax* pointer_3d_intmax;
	Z4DIntMax* pointer_4d_intmax;

	zintptr*   pointer_intptr;
	Z2DIntPtr* pointer_2d_intptr;
	Z3DIntPtr* pointer_3d_intptr;
	Z4DIntPtr* pointer_4d_intptr;

	zinttop*   pointer_inttop;
	Z2DIntTop* pointer_2d_inttop;
	Z3DIntTop* pointer_3d_inttop;
	Z4DIntTop* pointer_4d_inttop;

	zboolean* pointer_boolean;

	zcharacter* pointer_character;

	znatural*      pointer_natural;
	Z2DNatural*    pointer_2d_natural;
	Z3DNatural*    pointer_3d_natural;
	Z4DNatural*    pointer_4d_natural;
	ZRangeNatural* pointer_range_natural;

	zinteger*   pointer_integer;
	Z2DInteger* pointer_2d_integer;
	Z3DInteger* pointer_3d_integer;
	Z4DInteger* pointer_4d_integer;

#	ifdef Z_REAL
		zreal*	 pointer_real;
		Z2DReal* pointer_2d_real;
		Z3DReal* pointer_3d_real;
		Z4DReal* pointer_4d_real;
#	endif

	ZOrder* pointer_order;

	ZStatus* pointer_status;

	ZRange* pointer_range;

	Z8Bit*	 pointer_8bit;
	Z16Bit*  pointer_16bit;
	Z32Bit*  pointer_32bit;
	Z64Bit*  pointer_64bit;
	Z128Bit* pointer_128bit;

	void*	 pointer;
	zuintptr value_uintptr;
	zintptr	 value_intptr;

#	ifdef Z_PARTIAL_POINTER_UNION_MEMBERS
		Z_PARTIAL_POINTER_UNION_MEMBERS
#	endif
Z_DEFINE_STRICT_UNION_END ZPointer;

#endif /* __Z_types_base_H__ */
