/* Z Kit C API - types/base.h
	      __	   __
  _______ ___/ /______ ___/ /__
 / __/ -_) _  / __/ _ \ _  / -_)
/_/  \__/\_,_/\__/\___/_,_/\__/
Copyright © 2006-2015 Manuel Sainz de Baranda y Goñi.
Released under the terms of the GNU Lesser General Public License v3. */

#ifndef __Z_types_base_H__
#define __Z_types_base_H__

#include <Z/inspection/floating point.h>
#include <Z/inspection/data model.h>
#include <Z/macros/inspection.h>
#include <Z/macros/structure.h>
#include <Z/constants/base.h>

/* MARK: - Fixed width natural types */

typedef Z_DATA_MODEL_TYPE(UINT8)		zuint8;
typedef struct {zuint8 x, y;}			Z2DUInt8;
typedef struct {zuint8 x, y, z;}		Z3DUInt8;
typedef struct {zuint8 x, y, z, w;}		Z4DUInt8;
#define Z_UINT8					Z_DATA_MODEL_LITERAL   (UINT8)
#define Z_UINT8_BASE_VALUE_TYPE			Z_DATA_MODEL_VALUE_TYPE(UINT8)
#define Z_UINT8_FIXED_VALUE_TYPE		Z_VALUE_TYPE_UINT8
#define Z_UINT8_VALUE_TYPE			Z_VALUE_TYPE_UINT8
#define Z_UINT8_FORMAT				Z_VALUE_FORMAT_8BIT_NATURAL
#define Z_UINT8_BITS				8
#define Z_UINT8_SIZE				1
#define Z_UINT8_MINIMUM				0
#define Z_UINT8_MAXIMUM				255

typedef Z_DATA_MODEL_TYPE(UINT16)		zuint16;
typedef struct {zuint16 x, y;}			Z2DUInt16;
typedef struct {zuint16 x, y, z;}		Z3DUInt16;
typedef struct {zuint16 x, y, z, w;}		Z4DUInt16;
#define Z_UINT16				Z_DATA_MODEL_LITERAL   (UINT16)
#define Z_UINT16_BASE_VALUE_TYPE		Z_DATA_MODEL_VALUE_TYPE(UINT16)
#define Z_UINT16_FIXED_VALUE_TYPE		Z_VALUE_TYPE_UINT16
#define Z_UINT16_VALUE_TYPE			Z_VALUE_TYPE_UINT16
#define Z_UINT16_FORMAT				Z_VALUE_FORMAT_16BIT_NATURAL
#define Z_UINT16_ENDIANNESS			Z_CPU_INTEGER_ENDIANNESS(16BIT)
#define Z_UINT16_BITS				16
#define Z_UINT16_SIZE				2
#define Z_UINT16_MINIMUM			0
#define Z_UINT16_MAXIMUM			65535

typedef Z_DATA_MODEL_TYPE(UINT32)		zuint32;
typedef struct {zuint32 x, y;}			Z2DUInt32;
typedef struct {zuint32 x, y, z;}		Z3DUInt32;
typedef struct {zuint32 x, y, z, w;}		Z4DUInt32;
#define Z_UINT32				Z_DATA_MODEL_LITERAL   (UINT32)
#define Z_UINT32_BASE_VALUE_TYPE		Z_DATA_MODEL_VALUE_TYPE(UINT32)
#define Z_UINT32_FIXED_VALUE_TYPE		Z_VALUE_TYPE_UINT32
#define Z_UINT32_VALUE_TYPE			Z_VALUE_TYPE_UINT32
#define Z_UINT32_FORMAT				Z_VALUE_FORMAT_32BIT_NATURAL
#define Z_UINT32_ENDIANNESS			Z_CPU_INTEGER_ENDIANNESS(32BIT)
#define Z_UINT32_BITS				32
#define Z_UINT32_SIZE				4
#define Z_UINT32_MINIMUM			0
#define Z_UINT32_MAXIMUM			Z_UINT32(4294967295)

typedef Z_DATA_MODEL_TYPE(UINT64)		zuint64;
typedef struct {zuint64 x, y;}			Z2DUInt64;
typedef struct {zuint64 x, y, z;}		Z3DUInt64;
typedef struct {zuint64 x, y, z, w;}		Z4DUInt64;
#define Z_UINT64				Z_DATA_MODEL_LITERAL   (UINT64)
#define Z_UINT64_BASE_VALUE_TYPE		Z_DATA_MODEL_VALUE_TYPE(UINT64)
#define Z_UINT64_FIXED_VALUE_TYPE		Z_VALUE_TYPE_UINT64
#define Z_UINT64_VALUE_TYPE			Z_VALUE_TYPE_UINT64
#define Z_UINT64_FORMAT				Z_VALUE_FORMAT_64BIT_NATURAL
#define Z_UINT64_ENDIANNESS			Z_CPU_INTEGER_ENDIANNESS(64BIT)
#define Z_UINT64_BITS				64
#define Z_UINT64_SIZE				8
#define Z_UINT64_MINIMUM			0
#define Z_UINT64_MAXIMUM			Z_UINT64(18446744073709551615)

#if Z_CPU_HAS(128BIT_ARITHMETIC) && Z_COMPILER_HAS_TYPE(UINT128)

	typedef Z_COMPILER_TYPE_UINT128		zuint128;
	typedef struct {zuint128 x, y;}		Z2DUInt128;
	typedef struct {zuint128 x, y, z;}	Z3DUInt128;
	typedef struct {zuint128 x, y, z, w;}	Z4DUInt128;
#	define Z_UINT128_BASE_VALUE_TYPE	Z_VALUE_TYPE_UINT128
#	define Z_UINT128_FIXED_VALUE_TYPE	Z_VALUE_TYPE_UINT128
#	define Z_UINT128_VALUE_TYPE		Z_VALUE_TYPE_UINT128
#	define Z_UINT128_FORMAT			Z_VALUE_FORMAT_128BIT_NATURAL
#	define Z_UINT128_ENDIANNESS		Z_CPU_INTEGER_ENDIANNESS(128BIT)
#	define Z_UINT128_BITS			128
#	define Z_UINT128_SIZE			16
#	define Z_UINT128_MINIMUM		0
#	define Z_AVAILABLE_UINT128

#	if Z_COMPILER_HAS_LITERAL(UINT128)
#		define Z_UINT128		Z_COMPILER_LITERAL(UINT128)
#		define Z_UINT128_MAXIMUM	Z_UINT128(340282366920938463463374607431768211455)
#	else
#		define Z_UINT128		Z_SAME
#		define Z_UINT128_MAXIMUM	(((zuint128)0) - 1)
#	endif

#endif

#define Z_UINTX_LITERAL(	BITS)		Z_JOIN_2(Z_INSERT_NUMBER_, BITS)(Z_UINT,		 )
#define Z_UINTX_BASE_VALUE_TYPE(BITS)		Z_JOIN_2(Z_INSERT_NUMBER_, BITS)(Z_UINT, _BASE_VALUE_TYPE)
#define Z_UINTX_VALUE_TYPE(	BITS)		Z_JOIN_2(Z_INSERT_NUMBER_, BITS)(Z_UINT, _VALUE_TYPE	 )
#define Z_UINTX_FORMAT(		BITS)		Z_JOIN_2(Z_INSERT_NUMBER_, BITS)(Z_UINT, _FORMAT	 )
#define Z_UINTX_ENDIANNESS(	BITS)		Z_JOIN_2(Z_INSERT_NUMBER_, BITS)(Z_UINT, _ENDIANNESS	 )
#define Z_UINTX_SIZE(		BITS)		Z_JOIN_2(Z_INSERT_NUMBER_, BITS)(Z_UINT, _SIZE		 )
#define Z_UINTX_MINIMUM(	BITS)		Z_JOIN_2(Z_INSERT_NUMBER_, BITS)(Z_UINT, _MINIMUM	 )
#define Z_UINTX_MAXIMUM(	BITS)		Z_JOIN_2(Z_INSERT_NUMBER_, BITS)(Z_UINT, _MAXIMUM	 )

/* MARK: - Fixed width integer types */

typedef Z_DATA_MODEL_TYPE(INT8)			zint8;
typedef struct {zint8 x, y;}			Z2DInt8;
typedef struct {zint8 x, y, z;}			Z3DInt8;
typedef struct {zint8 x, y, z, w;}		Z4DInt8;
#define Z_INT8					Z_DATA_MODEL_LITERAL   (INT8)
#define Z_INT8_BASE_VALUE_TYPE			Z_DATA_MODEL_VALUE_TYPE(INT8)
#define Z_INT8_FIXED_VALUE_TYPE			Z_VALUE_TYPE_INT8
#define Z_INT8_VALUE_TYPE			Z_VALUE_TYPE_INT8
#define Z_INT8_FORMAT				Z_VALUE_FORMAT_8BIT_INTEGER
#define Z_INT8_BITS				8
#define Z_INT8_SIZE				1
#define Z_INT8_MINIMUM				(-128)
#define Z_INT8_MAXIMUM				127

typedef Z_DATA_MODEL_TYPE(INT16)		zint16;
typedef struct {zint16 x, y;}			Z2DInt16;
typedef struct {zint16 x, y, z;}		Z3DInt16;
typedef struct {zint16 x, y, z, w;}		Z4DInt16;
#define Z_INT16					Z_DATA_MODEL_LITERAL   (INT16)
#define Z_INT16_BASE_VALUE_TYPE			Z_DATA_MODEL_VALUE_TYPE(INT16)
#define Z_INT16_FIXED_VALUE_TYPE		Z_VALUE_TYPE_INT16
#define Z_INT16_VALUE_TYPE			Z_VALUE_TYPE_INT16
#define Z_INT16_FORMAT				Z_VALUE_FORMAT_16BIT_INTEGER
#define Z_INT16_ENDIANNESS			Z_CPU_INTEGER_ENDIANNESS(16BIT)
#define Z_INT16_BITS				16
#define Z_INT16_SIZE				2
#define Z_INT16_MINIMUM				(-32768)
#define Z_INT16_MAXIMUM				32767

typedef Z_DATA_MODEL_TYPE(INT32)		zint32;
typedef struct {zint32 x, y;}			Z2DInt32;
typedef struct {zint32 x, y, z;}		Z3DInt32;
typedef struct {zint32 x, y, z, w;}		Z4DInt32;
#define Z_INT32					Z_DATA_MODEL_LITERAL   (INT32)
#define Z_INT32_BASE_VALUE_TYPE			Z_DATA_MODEL_VALUE_TYPE(INT32)
#define Z_INT32_FIXED_VALUE_TYPE		Z_VALUE_TYPE_INT32
#define Z_INT32_VALUE_TYPE			Z_VALUE_TYPE_INT32
#define Z_INT32_FORMAT				Z_VALUE_FORMAT_32BIT_INTEGER
#define Z_INT32_ENDIANNESS			Z_CPU_INTEGER_ENDIANNESS(32BIT)
#define Z_INT32_BITS				32
#define Z_INT32_SIZE				4
#define Z_INT32_MINIMUM				Z_INT32(-2147483648)
#define	Z_INT32_MAXIMUM				Z_INT32( 2147483647)

typedef Z_DATA_MODEL_TYPE(INT64)		zint64;
typedef struct {zint64 x, y;}			Z2DInt64;
typedef struct {zint64 x, y, z;}		Z3DInt64;
typedef struct {zint64 x, y, z, w;}		Z4DInt64;
#define Z_INT64					Z_DATA_MODEL_LITERAL   (INT64)
#define Z_INT64_BASE_VALUE_TYPE			Z_DATA_MODEL_VALUE_TYPE(INT64)
#define Z_INT64_FIXED_VALUE_TYPE		Z_VALUE_TYPE_INT64
#define Z_INT64_VALUE_TYPE			Z_VALUE_TYPE_INT64
#define Z_INT64_FORMAT				Z_VALUE_FORMAT_64BIT_INTEGER
#define Z_INT64_ENDIANNESS			Z_CPU_INTEGER_ENDIANNESS(64BIT)
#define Z_INT64_BITS				64
#define Z_INT64_SIZE				8
#define Z_INT64_MAXIMUM				Z_INT64(9223372036854775807)
#define Z_INT64_MINIMUM				(-Z_INT64_MAXIMUM - Z_INT64(1))

#if Z_CPU_HAS(128BIT_ARITHMETIC) && Z_COMPILER_HAS_TYPE(INT128)

	typedef Z_COMPILER_TYPE_INT128		zint128;
	typedef struct {zint128 x, y;}		Z2DInt128;
	typedef struct {zint128 x, y, z;}	Z3DInt128;
	typedef struct {zint128 x, y, z, w;}	Z4DInt128;
#	define Z_INT128_BASE_VALUE_TYPE		Z_VALUE_TYPE_INT128
#	define Z_INT128_FIXED_VALUE_TYPE	Z_VALUE_TYPE_INT128
#	define Z_INT128_VALUE_TYPE		Z_VALUE_TYPE_INT128
#	define Z_INT128_FORMAT			Z_VALUE_FORMAT_128BIT_INTEGER
#	define Z_INT128_ENDIANNESS		Z_CPU_INTEGER_ENDIANNESS(128BIT)
#	define Z_INT128_BITS			128
#	define Z_INT128_SIZE			16
#	define Z_AVAILABLE_INT128

#	if Z_COMPILER_HAS_LITERAL(INT128)
#		define Z_INT128			Z_COMPILER_LITERAL(INT128)
#		define Z_INT128_MAXIMUM		Z_INT128(170141183460469231731687303715884105727)
#		define Z_INT128_MINIMUM		(-Z_INT128_MAXIMUM - Z_INT128(1))
#	else
#		define Z_INT128			Z_SAME
#		define Z_INT128_MAXIMUM		0 /* TO BE IMPLEMENTED */
#		define Z_INT128_MINIMUM		0 /* TO BE IMPLEMENTED */
#	endif

#endif

#define Z_INTX_LITERAL(	       BITS)		Z_JOIN_2(Z_INSERT_NUMBER_, BITS)(Z_INT,			)
#define Z_INTX_BASE_VALUE_TYPE(BITS)		Z_JOIN_2(Z_INSERT_NUMBER_, BITS)(Z_INT, _BASE_VALUE_TYPE)
#define Z_INTX_VALUE_TYPE(     BITS)		Z_JOIN_2(Z_INSERT_NUMBER_, BITS)(Z_INT, _VALUE_TYPE	)
#define Z_INTX_FORMAT(	       BITS)		Z_JOIN_2(Z_INSERT_NUMBER_, BITS)(Z_INT, _FORMAT		)
#define Z_INTX_ENDIANNESS(     BITS)		Z_JOIN_2(Z_INSERT_NUMBER_, BITS)(Z_INT, _ENDIANNESS	)
#define Z_INTX_SIZE(	       BITS)		Z_JOIN_2(Z_INSERT_NUMBER_, BITS)(Z_INT, _SIZE		)
#define Z_INTX_MINIMUM(	       BITS)		Z_JOIN_2(Z_INSERT_NUMBER_, BITS)(Z_INT, _MINIMUM	)
#define Z_INTX_MAXIMUM(	       BITS)		Z_JOIN_2(Z_INSERT_NUMBER_, BITS)(Z_INT, _MAXIMUM	)

/* MARK: - Base natural types */

#define Z_UCHAR_BITS				Z_DATA_MODEL_BITS(CHAR)

typedef unsigned char				zuchar;
typedef Z_JOIN_2(Z2DUInt, Z_UCHAR_BITS)		Z2DUChar;
typedef Z_JOIN_2(Z3DUInt, Z_UCHAR_BITS)		Z3DUChar;
typedef Z_JOIN_2(Z4DUInt, Z_UCHAR_BITS)		Z4DUChar;
#define Z_UCHAR					Z_SAME
#define Z_UCHAR_BASE_VALUE_TYPE			Z_VALUE_TYPE_UCHAR
#define Z_UCHAR_FIXED_VALUE_TYPE		Z_UINTX_VALUE_TYPE(Z_UCHAR_BITS)
#define Z_UCHAR_VALUE_TYPE			Z_VALUE_TYPE_UCHAR
#define Z_UCHAR_FORMAT				Z_UINTX_FORMAT	  (Z_UCHAR_BITS)
#define Z_UCHAR_SIZE				Z_UINTX_SIZE	  (Z_UCHAR_BITS)
#define Z_UCHAR_MINIMUM				0
#define Z_UCHAR_MAXIMUM				Z_UINTX_MAXIMUM	  (Z_UCHAR_BITS)

#define Z_USHORT_BITS				Z_DATA_MODEL_BITS(SHORT)

typedef unsigned short int			zushort;
typedef Z_JOIN_2(Z2DUInt, Z_USHORT_BITS)	Z2DUShort;
typedef Z_JOIN_2(Z3DUInt, Z_USHORT_BITS)	Z3DUShort;
typedef Z_JOIN_2(Z4DUInt, Z_USHORT_BITS)	Z4DUShort;
#define Z_USHORT				Z_SAME
#define Z_USHORT_BASE_VALUE_TYPE		Z_VALUE_TYPE_USHORT
#define Z_USHORT_FIXED_VALUE_TYPE		Z_UINTX_VALUE_TYPE(Z_USHORT_BITS)
#define Z_USHORT_VALUE_TYPE			Z_VALUE_TYPE_USHORT
#define Z_USHORT_FORMAT				Z_UINTX_FORMAT	  (Z_USHORT_BITS)
#define Z_USHORT_ENDIANNESS			Z_UINTX_ENDIANNESS(Z_USHORT_BITS)
#define Z_USHORT_SIZE				Z_UINTX_SIZE	  (Z_USHORT_BITS)
#define Z_USHORT_MINIMUM			0
#define Z_USHORT_MAXIMUM			Z_UINTX_MAXIMUM   (Z_USHORT_BITS)

#define Z_UINT_BITS				Z_DATA_MODEL_BITS(INT)

typedef unsigned int				zuint;
typedef Z_JOIN_2(Z2DUInt, Z_UINT_BITS)		Z2DUInt;
typedef Z_JOIN_2(Z3DUInt, Z_UINT_BITS)		Z3DUInt;
typedef Z_JOIN_2(Z4DUInt, Z_UINT_BITS)		Z4DUInt;
#define Z_UINT					Z_SAME
#define Z_UINT_BASE_VALUE_TYPE			Z_VALUE_TYPE_UINT
#define Z_UINT_FIXED_VALUE_TYPE			Z_UINTX_VALUE_TYPE(Z_UINT_BITS)
#define Z_UINT_VALUE_TYPE			Z_VALUE_TYPE_UINT
#define Z_UINT_FORMAT				Z_UINTX_FORMAT	  (Z_UINT_BITS)
#define Z_UINT_ENDIANNESS			Z_UINTX_ENDIANNESS(Z_UINT_BITS)
#define Z_UINT_SIZE				Z_UINTX_SIZE	  (Z_UINT_BITS)
#define Z_UINT_MINIMUM				0
#define Z_UINT_MAXIMUM				Z_UINTX_MAXIMUM   (Z_UINT_BITS)

#define Z_ULONG_BITS				Z_DATA_MODEL_BITS(LONG)

typedef unsigned long int			zulong;
typedef Z_JOIN_2(Z2DUInt, Z_ULONG_BITS)		Z2DULong;
typedef Z_JOIN_2(Z3DUInt, Z_ULONG_BITS)		Z3DULong;
typedef Z_JOIN_2(Z4DUInt, Z_ULONG_BITS)		Z4DULong;
#define Z_ULONG					Z_SUFFIX_UL
#define Z_ULONG_BASE_VALUE_TYPE			Z_VALUE_TYPE_ULONG
#define Z_ULONG_FIXED_VALUE_TYPE		Z_UINTX_VALUE_TYPE(Z_ULONG_BITS)
#define Z_ULONG_VALUE_TYPE			Z_VALUE_TYPE_ULONG
#define Z_ULONG_FORMAT				Z_UINTX_FORMAT	  (Z_ULONG_BITS)
#define Z_ULONG_ENDIANNESS			Z_UINTX_ENDIANNESS(Z_ULONG_BITS)
#define Z_ULONG_SIZE				Z_UINTX_SIZE	  (Z_ULONG_BITS)
#define Z_ULONG_MINIMUM				0
#define Z_ULONG_MAXIMUM				Z_UINTX_MAXIMUM   (Z_ULONG_BITS)

#define Z_ULLONG_BITS				Z_DATA_MODEL_BITS(LLONG)

#if Z_LANGUAGE_HAS_TYPE(ULLONG)

	typedef unsigned long long int		zullong;
	typedef Z_JOIN_2(Z2DInt, Z_ULLONG_BITS)	Z2DULLong;
	typedef Z_JOIN_2(Z3DInt, Z_ULLONG_BITS)	Z3DULLong;
	typedef Z_JOIN_2(Z4DInt, Z_ULLONG_BITS)	Z4DULLong;
#	define Z_ULLONG				Z_SUFFIX_LL
#	define Z_ULLONG_BASE_VALUE_TYPE		Z_VALUE_TYPE_ULLONG
#	define Z_ULLONG_FIXED_VALUE_TYPE	Z_UINTX_VALUE_TYPE(Z_ULLONG_BITS)
#	define Z_ULLONG_VALUE_TYPE		Z_VALUE_TYPE_ULLONG
#	define Z_ULLONG_FORMAT			Z_UINTX_FORMAT	  (Z_ULLONG_BITS)
#	define Z_ULLONG_ENDIANNESS		Z_UINTX_ENDIANNESS(Z_ULLONG_BITS)
#	define Z_ULLONG_SIZE			Z_UINTX_SIZE	  (Z_ULLONG_BITS)
#	define Z_ULLONG_MINIMUM			Z_UINTX_MINIMUM	  (Z_ULLONG_BITS)
#	define Z_ULLONG_MAXIMUM			Z_UINTX_MAXIMUM	  (Z_ULLONG_BITS)

#else

	typedef zulong				zullong;
	typedef Z2DULong			Z2DULLong;
	typedef Z3DULong			Z3DULLong;
	typedef Z4DULong			Z4DULLong;
#	define Z_ULLONG				Z_ULLONG
#	define Z_ULLONG_BASE_VALUE_TYPE		Z_ULLONG_BASE_VALUE_TYPE
#	define Z_ULLONG_FIXED_VALUE_TYPE	Z_ULLONG_FIXED_VALUE_TYPE
#	define Z_ULLONG_VALUE_TYPE		Z_ULLONG_VALUE_TYPE
#	define Z_ULLONG_FORMAT			Z_ULLONG_FORMAT
#	define Z_ULLONG_ENDIANNESS		Z_ULLONG_ENDIANNESS
#	define Z_ULLONG_SIZE			Z_ULLONG_SIZE
#	define Z_ULLONG_MINIMUM			Z_ULLONG_MINIMUM
#	define Z_ULLONG_MAXIMUM			Z_ULLONG_MAXIMUM

#endif

/* MARK: - Base integer types */

#define Z_CHAR_BITS				Z_DATA_MODEL_BITS(CHAR)

typedef signed char				zchar;
typedef Z_JOIN_2(Z2DInt, Z_CHAR_BITS)		Z2DChar;
typedef Z_JOIN_2(Z3DInt, Z_CHAR_BITS)		Z3DChar;
typedef Z_JOIN_2(Z4DInt, Z_CHAR_BITS)		Z4DChar;
#define Z_CHAR					Z_SAME
#define Z_CHAR_BASE_VALUE_TYPE			Z_VALUE_TYPE_CHAR
#define Z_CHAR_FIXED_VALUE_TYPE			Z_INTX_VALUE_TYPE(Z_CHAR_BITS)
#define Z_CHAR_VALUE_TYPE			Z_VALUE_TYPE_CHAR
#define Z_CHAR_FORMAT				Z_INTX_FORMAT	 (Z_CHAR_BITS)
#define Z_CHAR_SIZE				Z_INTX_SIZE	 (Z_CHAR_BITS)
#define Z_CHAR_MINIMUM				Z_INTX_MINIMUM	 (Z_CHAR_BITS)
#define Z_CHAR_MAXIMUM				Z_INTX_MAXIMUM	 (Z_CHAR_BITS)

#define Z_SHORT_BITS				Z_DATA_MODEL_BITS(SHORT)

typedef signed short int			zshort;
typedef Z_JOIN_2(Z2DInt, Z_SHORT_BITS)		Z2DShort;
typedef Z_JOIN_2(Z3DInt, Z_SHORT_BITS)		Z3DShort;
typedef Z_JOIN_2(Z4DInt, Z_SHORT_BITS)		Z4DShort;
#define Z_SHORT					Z_SAME
#define Z_SHORT_BASE_VALUE_TYPE			Z_VALUE_TYPE_SHORT
#define Z_SHORT_FIXED_VALUE_TYPE		Z_INTX_VALUE_TYPE(Z_SHORT_BITS)
#define Z_SHORT_VALUE_TYPE			Z_VALUE_TYPE_SHORT
#define Z_SHORT_FORMAT				Z_INTX_FORMAT	 (Z_SHORT_BITS)
#define Z_SHORT_ENDIANNESS			Z_INTX_ENDIANNESS(Z_SHORT_BITS)
#define Z_SHORT_SIZE				Z_INTX_SIZE	 (Z_SHORT_BITS)
#define Z_SHORT_MINIMUM				Z_INTX_MINIMUM	 (Z_SHORT_BITS)
#define Z_SHORT_MAXIMUM				Z_INTX_MAXIMUM	 (Z_SHORT_BITS)

#define Z_INT_BITS				Z_DATA_MODEL_BITS(INT)

typedef signed int				zint;
typedef Z_JOIN_2(Z2DInt, Z_INT_BITS)		Z2DInt;
typedef Z_JOIN_2(Z3DInt, Z_INT_BITS)		Z3DInt;
typedef Z_JOIN_2(Z4DInt, Z_INT_BITS)		Z4DInt;
#define Z_INT					Z_SAME
#define Z_INT_BASE_VALUE_TYPE			Z_VALUE_TYPE_INT
#define Z_INT_FIXED_VALUE_TYPE			Z_INTX_VALUE_TYPE(Z_INT_BITS)
#define Z_INT_VALUE_TYPE			Z_VALUE_TYPE_INT
#define Z_INT_FORMAT				Z_INTX_FORMAT	 (Z_INT_BITS)
#define Z_INT_ENDIANNESS			Z_INTX_ENDIANNESS(Z_INT_BITS)
#define Z_INT_SIZE				Z_INTX_SIZE	 (Z_INT_BITS)
#define Z_INT_MINIMUM				Z_INTX_MINIMUM	 (Z_INT_BITS)
#define Z_INT_MAXIMUM				Z_INTX_MAXIMUM	 (Z_INT_BITS)

#define Z_LONG_BITS				Z_DATA_MODEL_BITS(LONG)

typedef signed long int				zlong;
typedef Z_JOIN_2(Z2DInt, Z_LONG_BITS)		Z2DLong;
typedef Z_JOIN_2(Z3DInt, Z_LONG_BITS)		Z3DLong;
typedef Z_JOIN_2(Z4DInt, Z_LONG_BITS)		Z4DLong;
#define Z_LONG					Z_SUFFIX_L
#define Z_LONG_BASE_VALUE_TYPE			Z_VALUE_TYPE_LONG
#define Z_LONG_FIXED_VALUE_TYPE			Z_INTX_VALUE_TYPE(Z_LONG_BITS)
#define Z_LONG_VALUE_TYPE			Z_VALUE_TYPE_LONG
#define Z_LONG_FORMAT				Z_INTX_FORMAT	 (Z_LONG_BITS)
#define Z_LONG_ENDIANNESS			Z_INTX_ENDIANNESS(Z_LONG_BITS)
#define Z_LONG_SIZE				Z_INTX_SIZE	 (Z_LONG_BITS)
#define Z_LONG_MINIMUM				Z_INTX_MINIMUM	 (Z_LONG_BITS)
#define Z_LONG_MAXIMUM				Z_INTX_MAXIMUM	 (Z_LONG_BITS)

#define Z_LLONG_BITS				Z_DATA_MODEL_BITS(LLONG)

#if Z_LANGUAGE_HAS_TYPE(LLONG)

	typedef signed long long int		zllong;
	typedef Z_JOIN_2(Z2DInt, Z_LLONG_BITS)	Z2DLLong;
	typedef Z_JOIN_2(Z3DInt, Z_LLONG_BITS)	Z3DLLong;
	typedef Z_JOIN_2(Z4DInt, Z_LLONG_BITS)	Z4DLLong;
#	define Z_LLONG				Z_SUFFIX_LL
#	define Z_LLONG_BASE_VALUE_TYPE		Z_VALUE_TYPE_LLONG
#	define Z_LLONG_FIXED_VALUE_TYPE		Z_INTX_VALUE_TYPE(Z_LLONG_BITS)
#	define Z_LLONG_VALUE_TYPE		Z_VALUE_TYPE_LLONG
#	define Z_LLONG_FORMAT			Z_INTX_FORMAT	 (Z_LLONG_BITS)
#	define Z_LLONG_ENDIANNESS		Z_INTX_ENDIANNESS(Z_LLONG_BITS)
#	define Z_LLONG_SIZE			Z_INTX_SIZE	 (Z_LLONG_BITS)
#	define Z_LLONG_MINIMUM			Z_INTX_MINIMUM	 (Z_LLONG_BITS)
#	define Z_LLONG_MAXIMUM			Z_INTX_MAXIMUM	 (Z_LLONG_BITS)

#else

	typedef zlong				zllong;
	typedef Z2DLong				Z2DLLong;
	typedef Z3DLong				Z3DLLong;
	typedef Z4DLong				Z4DLLong;
#	define Z_LLONG				Z_LLONG
#	define Z_LLONG_BASE_VALUE_TYPE		Z_LLONG_BASE_VALUE_TYPE
#	define Z_LLONG_FIXED_VALUE_TYPE		Z_LLONG_FIXED_VALUE_TYPE
#	define Z_LLONG_VALUE_TYPE		Z_LLONG_VALUE_TYPE
#	define Z_LLONG_FORMAT			Z_LLONG_FORMAT
#	define Z_LLONG_ENDIANNESS		Z_LLONG_ENDIANNESS
#	define Z_LLONG_SIZE			Z_LLONG_SIZE
#	define Z_LLONG_MINIMUM			Z_LLONG_MINIMUM
#	define Z_LLONG_MAXIMUM			Z_LLONG_MAXIMUM

#endif

/* MARK: - Base real types */

typedef float					zfloat;
typedef struct {zfloat x, y;}			Z2DFloat;
typedef struct {zfloat x, y, z;}		Z3DFloat;
typedef struct {zfloat x, y, z, w;}		Z4DFloat;
#define Z_FLOAT					Z_SUFFIX_F
#define Z_FLOAT_BASE_VALUE_TYPE			Z_VALUE_TYPE_FLOAT
#define Z_FLOAT_FIXED_VALUE_TYPE		Z_VALUE_TYPE_FLOAT
#define Z_FLOAT_VALUE_TYPE			Z_VALUE_TYPE_FLOAT
#define Z_FLOAT_FORMAT				Z_FLOATING_POINT_FORMAT		    (FLOAT)
#define Z_FLOAT_BITS				Z_FLOATING_POINT_BITS		    (FLOAT)
#define Z_FLOAT_SIZE				(Z_FLOAT_BITS / 8)
#define Z_FLOAT_BIAS				Z_FLOATING_POINT_BIAS		    (FLOAT)
#define Z_FLOAT_EPSILON				Z_FLOAT(Z_FLOATING_POINT_EPSILON    (FLOAT))
#define Z_FLOAT_MINIMUM				Z_FLOAT(Z_FLOATING_POINT_MINIMUM    (FLOAT))
#define Z_FLOAT_MAXIMUM				Z_FLOAT(Z_FLOATING_POINT_MAXIMUM    (FLOAT))
#define Z_FLOAT_DECIMAL_DIGITS			Z_FLOATING_POINT_DECIMAL_DIGITS     (FLOAT)
#define Z_FLOAT_MANTISSA_OFFSET			Z_FLOATING_POINT_MANTISSA_OFFSET    (FLOAT)
#define Z_FLOAT_MANTISSA_BITS			Z_FLOATING_POINT_MANTISSA_BITS	    (FLOAT)
#define Z_FLOAT_MANTISSA_DIGITS			Z_FLOATING_POINT_MANTISSA_DIGITS    (FLOAT)
#define Z_FLOAT_EXPONENT_OFFSET			Z_FLOATING_POINT_EXPONENT_OFFSET    (FLOAT)
#define Z_FLOAT_EXPONENT_BITS			Z_FLOATING_POINT_EXPONENT_BITS	    (FLOAT)
#define Z_FLOAT_EXPONENT_RADIX			Z_FLOATING_POINT_EXPONENT_RADIX     (FLOAT)
#define Z_FLOAT_EXPONENT_MINIMUM		Z_FLOATING_POINT_EXPONENT_MINIMUM   (FLOAT)
#define Z_FLOAT_EXPONENT_MAXIMUM		Z_FLOATING_POINT_EXPONENT_MAXIMUM   (FLOAT)
#define Z_FLOAT_EXPONENT_10_MINIMUM		Z_FLOATING_POINT_EXPONENT_10_MINIMUM(FLOAT)
#define Z_FLOAT_EXPONENT_10_MAXIMUM		Z_FLOATING_POINT_EXPONENT_10_MAXIMUM(FLOAT)
#define Z_FLOAT_SIGN_OFFSET			Z_FLOATING_POINT_SIGN_OFFSET	    (FLOAT)
#define Z_FLOAT_SIGN_BITS			Z_FLOATING_POINT_SIGN_BITS	    (FLOAT)
#define Z_FLOAT_INFINITY			Z_FLOATING_POINT_INFINITY	    (FLOAT, Z_FLOAT)
#define Z_FLOAT_NAN				Z_FLOATING_POINT_NAN		    (FLOAT, Z_FLOAT)

typedef double					zdouble;
typedef struct {zdouble x, y;}			Z2DDouble;
typedef struct {zdouble x, y, z;}		Z3DDouble;
typedef struct {zdouble x, y, z, w;}		Z4DDouble;
#define Z_DOUBLE				Z_SAME
#define Z_DOUBLE_BASE_VALUE_TYPE		Z_VALUE_TYPE_DOUBLE
#define Z_DOUBLE_FIXED_VALUE_TYPE		Z_VALUE_TYPE_DOUBLE
#define Z_DOUBLE_VALUE_TYPE			Z_VALUE_TYPE_DOUBLE
#define Z_DOUBLE_FORMAT				Z_FLOATING_POINT_FORMAT		    (DOUBLE)
#define Z_DOUBLE_BITS				Z_FLOATING_POINT_BITS		    (DOUBLE)
#define Z_DOUBLE_SIZE				(Z_DOUBLE_BITS / 8)
#define Z_DOUBLE_BIAS				Z_FLOATING_POINT_BIAS		    (DOUBLE)
#define Z_DOUBLE_EPSILON			Z_FLOATING_POINT_EPSILON	    (DOUBLE)
#define Z_DOUBLE_MINIMUM			Z_FLOATING_POINT_MINIMUM	    (DOUBLE)
#define Z_DOUBLE_MAXIMUM			Z_FLOATING_POINT_MAXIMUM	    (DOUBLE)
#define Z_DOUBLE_DECIMAL_DIGITS			Z_FLOATING_POINT_DECIMAL_DIGITS     (DOUBLE)
#define Z_DOUBLE_MANTISSA_OFFSET		Z_FLOATING_POINT_MANTISSA_OFFSET    (DOUBLE)
#define Z_DOUBLE_MANTISSA_BITS			Z_FLOATING_POINT_MANTISSA_BITS	    (DOUBLE)
#define Z_DOUBLE_MANTISSA_DIGITS		Z_FLOATING_POINT_MANTISSA_DIGITS    (DOUBLE)
#define Z_DOUBLE_EXPONENT_OFFSET		Z_FLOATING_POINT_EXPONENT_OFFSET    (DOUBLE)
#define Z_DOUBLE_EXPONENT_BITS			Z_FLOATING_POINT_EXPONENT_BITS	    (DOUBLE)
#define Z_DOUBLE_EXPONENT_RADIX			Z_FLOATING_POINT_EXPONENT_RADIX     (DOUBLE)
#define Z_DOUBLE_EXPONENT_MINIMUM		Z_FLOATING_POINT_EXPONENT_MINIMUM   (DOUBLE)
#define Z_DOUBLE_EXPONENT_MAXIMUM		Z_FLOATING_POINT_EXPONENT_MAXIMUM   (DOUBLE)
#define Z_DOUBLE_EXPONENT_10_MINIMUM		Z_FLOATING_POINT_EXPONENT_10_MINIMUM(DOUBLE)
#define Z_DOUBLE_EXPONENT_10_MAXIMUM		Z_FLOATING_POINT_EXPONENT_10_MAXIMUM(DOUBLE)
#define Z_DOUBLE_SIGN_OFFSET			Z_FLOATING_POINT_SIGN_OFFSET	    (DOUBLE)
#define Z_DOUBLE_SIGN_BITS			Z_FLOATING_POINT_SIGN_BITS	    (DOUBLE)
#define Z_DOUBLE_INFINITY			Z_FLOATING_POINT_INFINITY	    (DOUBLE, Z_DOUBLE)
#define Z_DOUBLE_NAN				Z_FLOATING_POINT_NAN		    (DOUBLE, Z_DOUBLE)

#if Z_LANGUAGE_HAS_TYPE(LDOUBLE) && Z_FLOATING_POINT_BITS(LDOUBLE) != Z_DOUBLE_BITS

	typedef long double			zldouble;
	typedef struct {zldouble x, y;}		Z2DLDouble;
	typedef struct {zldouble x, y, z;}	Z3DLDouble;
	typedef struct {zldouble x, y, z, w;}	Z4DLDouble;
#	define Z_LDOUBLE			Z_SUFFIX_L
#	define Z_LDOUBLE_BASE_VALUE_TYPE	Z_VALUE_TYPE_LDOUBLE
#	define Z_LDOUBLE_FIXED_VALUE_TYPE	Z_VALUE_TYPE_LDOUBLE
#	define Z_LDOUBLE_VALUE_TYPE		Z_VALUE_TYPE_LDOUBLE
#	define Z_LDOUBLE_FORMAT			Z_FLOATING_POINT_FORMAT		    (LDOUBLE)
#	define Z_LDOUBLE_BITS			Z_FLOATING_POINT_BITS		    (LDOUBLE)
#	define Z_LDOUBLE_SIZE			(Z_LDOUBLE_BITS / 8)
#	define Z_LDOUBLE_BIAS			Z_FLOATING_POINT_BIAS		    (LDOUBLE)
#	define Z_LDOUBLE_EPSILON		Z_LDOUBLE(Z_FLOATING_POINT_EPSILON  (LDOUBLE))
#	define Z_LDOUBLE_MINIMUM		Z_LDOUBLE(Z_FLOATING_POINT_MINIMUM  (LDOUBLE))
#	define Z_LDOUBLE_MAXIMUM		Z_LDOUBLE(Z_FLOATING_POINT_MAXIMUM  (LDOUBLE))
#	define Z_LDOUBLE_DECIMAL_DIGITS		Z_FLOATING_POINT_DECIMAL_DIGITS     (LDOUBLE)
#	define Z_LDOUBLE_MANTISSA_OFFSET	Z_FLOATING_POINT_MANTISSA_OFFSET    (LDOUBLE)
#	define Z_LDOUBLE_MANTISSA_BITS		Z_FLOATING_POINT_MANTISSA_BITS	    (LDOUBLE)
#	define Z_LDOUBLE_MANTISSA_DIGITS	Z_FLOATING_POINT_MANTISSA_DIGITS    (LDOUBLE)
#	define Z_LDOUBLE_EXPONENT_OFFSET	Z_FLOATING_POINT_EXPONENT_OFFSET    (LDOUBLE)
#	define Z_LDOUBLE_EXPONENT_BITS		Z_FLOATING_POINT_EXPONENT_BITS	    (LDOUBLE)
#	define Z_LDOUBLE_EXPONENT_RADIX		Z_FLOATING_POINT_EXPONENT_RADIX     (LDOUBLE)
#	define Z_LDOUBLE_EXPONENT_MINIMUM	Z_FLOATING_POINT_EXPONENT_MINIMUM   (LDOUBLE)
#	define Z_LDOUBLE_EXPONENT_MAXIMUM	Z_FLOATING_POINT_EXPONENT_MAXIMUM   (LDOUBLE)
#	define Z_LDOUBLE_EXPONENT_10_MINIMUM	Z_FLOATING_POINT_EXPONENT_10_MINIMUM(LDOUBLE)
#	define Z_LDOUBLE_EXPONENT_10_MAXIMUM	Z_FLOATING_POINT_EXPONENT_10_MAXIMUM(LDOUBLE)
#	define Z_LDOUBLE_SIGN_OFFSET		Z_FLOATING_POINT_SIGN_OFFSET	    (LDOUBLE)
#	define Z_LDOUBLE_SIGN_BITS		Z_FLOATING_POINT_SIGN_BITS	    (LDOUBLE)
#	define Z_LDOUBLE_INFINITY		Z_FLOATING_POINT_INFINITY	    (LDOUBLE, Z_LDOUBLE)
#	define Z_LDOUBLE_NAN			Z_FLOATING_POINT_NAN		    (LDOUBLE, Z_LDOUBLE)

#else

	typedef zdouble				zldouble;
	typedef Z2DDouble			Z2DLDouble;
	typedef Z3DDouble			Z3DLDouble;
	typedef Z4DDouble			Z4DLDouble;
#	define Z_LDOUBLE			Z_DOUBLE
#	define Z_LDOUBLE_BASE_VALUE_TYPE	Z_DOUBLE_BASE_VALUE_TYPE
#	define Z_LDOUBLE_FIXED_VALUE_TYPE	Z_DOUBLE_FIXED_VALUE_TYPE
#	define Z_LDOUBLE_VALUE_TYPE		Z_DOUBLE_VALUE_TYPE
#	define Z_LDOUBLE_FORMAT			Z_DOUBLE_FORMAT
#	define Z_LDOUBLE_BITS			Z_DOUBLE_BITS
#	define Z_LDOUBLE_SIZE			Z_DOUBLE_SIZE
#	define Z_LDOUBLE_BIAS			Z_DOUBLE_BIAS
#	define Z_LDOUBLE_MINIMUM		Z_DOUBLE_MINIMUM
#	define Z_LDOUBLE_MAXIMUM		Z_DOUBLE_MAXIMUM
#	define Z_LDOUBLE_EPSILON		Z_DOUBLE_EPSILON
#	define Z_LDOUBLE_DECIMAL_DIGITS		Z_DOUBLE_DECIMAL_DIGITS
#	define Z_LDOUBLE_MANTISSA_OFFSET	Z_DOUBLE_MANTISSA_OFFSET
#	define Z_LDOUBLE_MANTISSA_BITS		Z_DOUBLE_MANTISSA_BITS
#	define Z_LDOUBLE_MANTISSA_DIGITS	Z_DOUBLE_MANTISSA_DIGITS
#	define Z_LDOUBLE_EXPONENT_OFFSET	Z_DOUBLE_EXPONENT_OFFSET
#	define Z_LDOUBLE_EXPONENT_BITS		Z_DOUBLE_EXPONENT_BITS
#	define Z_LDOUBLE_EXPONENT_RADIX		Z_DOUBLE_EXPONENT_RADIX
#	define Z_LDOUBLE_EXPONENT_MINIMUM	Z_DOUBLE_EXPONENT_MINIMUM
#	define Z_LDOUBLE_EXPONENT_MAXIMUM	Z_DOUBLE_EXPONENT_MAXIMUM
#	define Z_LDOUBLE_EXPONENT_10_MINIMUM	Z_DOUBLE_EXPONENT_10_MINIMUM
#	define Z_LDOUBLE_EXPONENT_10_MAXIMUM	Z_DOUBLE_EXPONENT_10_MAXIMUM
#	define Z_LDOUBLE_SIGN_OFFSET		Z_DOUBLE_SIGN_OFFSET
#	define Z_LDOUBLE_SIGN_BITS		Z_DOUBLE_SIGN_BITS
#	define Z_LDOUBLE_INFINITY		Z_DOUBLE_INFINITY
#	define Z_LDOUBLE_NAN			Z_DOUBLE_NAN

#endif

/* MARK: - Object size types */

#define Z_SIZE_BITS				Z_DATA_MODEL_BITS(SIZE)

typedef Z_JOIN_2(zuint,	  Z_SIZE_BITS)		zsize;
typedef Z_JOIN_2(Z2DUInt, Z_SIZE_BITS)		Z2DSize;
typedef Z_JOIN_2(Z3DUInt, Z_SIZE_BITS)		Z3DSize;
typedef Z_JOIN_2(Z4DUInt, Z_SIZE_BITS)		Z4DSize;
#define Z_SIZE					Z_UINTX_LITERAL	       (Z_SIZE_BITS)
#define Z_SIZE_BASE_VALUE_TYPE			Z_UINTX_BASE_VALUE_TYPE(Z_SIZE_BITS)
#define Z_SIZE_FIXED_VALUE_TYPE			Z_UINTX_VALUE_TYPE     (Z_SIZE_BITS)
#define Z_SIZE_VALUE_TYPE			Z_VALUE_TYPE_SIZE
#define Z_SIZE_FORMAT				Z_UINTX_FORMAT	       (Z_SIZE_BITS)
#define Z_SIZE_ENDIANNESS			Z_UINTX_ENDIANNESS     (Z_SIZE_BITS)
#define Z_SIZE_SIZE				Z_UINTX_SIZE	       (Z_SIZE_BITS)
#define Z_SIZE_MINIMUM				0
#define Z_SIZE_MAXIMUM				Z_UINTX_MAXIMUM	       (Z_SIZE_BITS)

#define Z_SSIZE_BITS				Z_SIZE_BITS

typedef Z_JOIN_2(zint,	 Z_SSIZE_BITS)		zssize;
typedef Z_JOIN_2(Z2DInt, Z_SSIZE_BITS)		Z2DSSize;
typedef Z_JOIN_2(Z3DInt, Z_SSIZE_BITS)		Z3DSSize;
typedef Z_JOIN_2(Z4DInt, Z_SSIZE_BITS)		Z4DSSize;
#define Z_SSIZE					Z_INTX_LITERAL	      (Z_SSIZE_BITS)
#define Z_SSIZE_BASE_VALUE_TYPE			Z_INTX_BASE_VALUE_TYPE(Z_SSIZE_BITS)
#define Z_SSIZE_FIXED_VALUE_TYPE		Z_INTX_VALUE_TYPE     (Z_SSIZE_BITS)
#define Z_SSIZE_VALUE_TYPE			Z_VALUE_TYPE_SSIZE
#define Z_SSIZE_FORMAT				Z_INTX_FORMAT	      (Z_SSIZE_BITS)
#define Z_SSIZE_ENDIANNESS			Z_INTX_ENDIANNESS     (Z_SSIZE_BITS)
#define Z_SSIZE_SIZE				Z_INTX_SIZE	      (Z_SSIZE_BITS)
#define Z_SSIZE_MINIMUM				Z_INTX_MINIMUM	      (Z_SSIZE_BITS)
#define Z_SSIZE_MAXIMUM				Z_INTX_MAXIMUM	      (Z_SSIZE_BITS)

/* MARK: - Maximun natural and integer types */

#if Z_IS_AVAILABLE(UINT128)
#	define Z_UINTMAX_BITS			128
#else
#	define Z_UINTMAX_BITS			64
#endif

typedef Z_JOIN_2(zuint,	  Z_UINTMAX_BITS)	zuintmax;
typedef Z_JOIN_2(Z2DUInt, Z_UINTMAX_BITS)	Z2DUIntMax;
typedef Z_JOIN_2(Z3DUInt, Z_UINTMAX_BITS)	Z3DUIntMax;
typedef Z_JOIN_2(Z4DUInt, Z_UINTMAX_BITS)	Z4DUIntMax;
#define Z_UINTMAX				Z_UINTX_LITERAL	       (Z_UINTMAX_BITS)
#define Z_UINTMAX_BASE_VALUE_TYPE		Z_UINTX_BASE_VALUE_TYPE(Z_UINTMAX_BITS)
#define Z_UINTMAX_FIXED_VALUE_TYPE		Z_UINTX_VALUE_TYPE     (Z_UINTMAX_BITS)
#define Z_UINTMAX_VALUE_TYPE			Z_VALUE_TYPE_UINTMAX
#define Z_UINTMAX_FORMAT			Z_UINTX_FORMAT	       (Z_UINTMAX_BITS)
#define Z_UINTMAX_ENDIANNESS			Z_UINTX_ENDIANNESS     (Z_UINTMAX_BITS)
#define Z_UINTMAX_SIZE				Z_UINTX_SIZE	       (Z_UINTMAX_BITS)
#define Z_UINTMAX_MINIMUM			0
#define Z_UINTMAX_MAXIMUM			Z_UINTX_MAXIMUM	       (Z_UINTMAX_BITS)

#if Z_IS_AVAILABLE(INT128)
#	define Z_INTMAX_BITS			128
#else
#	define Z_INTMAX_BITS			64
#endif

typedef Z_JOIN_2(zint,	 Z_INTMAX_BITS)		zintmax;
typedef Z_JOIN_2(Z2DInt, Z_INTMAX_BITS)		Z2DIntMax;
typedef Z_JOIN_2(Z3DInt, Z_INTMAX_BITS)		Z3DIntMax;
typedef Z_JOIN_2(Z4DInt, Z_INTMAX_BITS)		Z4DIntMax;
#define Z_INTMAX				Z_INTX_LITERAL	      (Z_INTMAX_BITS)
#define Z_INTMAX_BASE_VALUE_TYPE		Z_INTX_BASE_VALUE_TYPE(Z_INTMAX_BITS)
#define Z_INTMAX_FIXED_VALUE_TYPE		Z_INTX_VALUE_TYPE     (Z_INTMAX_BITS)
#define Z_INTMAX_VALUE_TYPE			Z_VALUE_TYPE_INTMAX
#define Z_INTMAX_FORMAT				Z_INTX_FORMAT	      (Z_INTMAX_BITS)
#define Z_INTMAX_ENDIANNESS			Z_INTX_ENDIANNESS     (Z_INTMAX_BITS)
#define Z_INTMAX_SIZE				Z_INTX_SIZE	      (Z_INTMAX_BITS)
#define Z_INTMAX_MINIMUM			Z_INTX_MINIMUM	      (Z_INTMAX_BITS)
#define Z_INTMAX_MAXIMUM			Z_INTX_MAXIMUM	      (Z_INTMAX_BITS)

/* MARK: - Pointer types */

#define Z_POINTER_BITS				Z_DATA_MODEL_BITS(POINTER)

#define Z_POINTER_VALUE_TYPE			Z_VALUE_TYPE_POINTER
#define Z_POINTER_FORMAT			Z_UINTX_FORMAT(Z_POINTER_BITS)
#define Z_POINTER_SIZE				Z_UINTX_SIZE  (Z_POINTER_BITS)

#define Z_UINTPTR_BITS				Z_POINTER_BITS

typedef Z_JOIN_2(zuint,	  Z_UINTPTR_BITS)	zuintptr;
typedef Z_JOIN_2(Z2DUInt, Z_UINTPTR_BITS)	Z2DUIntPtr;
typedef Z_JOIN_2(Z3DUInt, Z_UINTPTR_BITS)	Z3DUIntPtr;
typedef Z_JOIN_2(Z4DUInt, Z_UINTPTR_BITS)	Z4DUIntPtr;
#define Z_UINTPTR				Z_UINTX_LITERAL	       (Z_UINTPTR_BITS)
#define Z_UINTPTR_BASE_VALUE_TYPE		Z_UINTX_BASE_VALUE_TYPE(Z_UINTPTR_BITS)
#define Z_UINTPTR_FIXED_VALUE_TYPE		Z_UINTX_VALUE_TYPE     (Z_UINTPTR_BITS)
#define Z_UINTPTR_VALUE_TYPE			Z_VALUE_TYPE_UINTPTR
#define Z_UINTPTR_FORMAT			Z_UINTX_FORMAT	       (Z_UINTPTR_BITS)
#define Z_UINTPTR_ENDIANNESS			Z_UINTX_ENDIANNESS     (Z_UINTPTR_BITS)
#define Z_UINTPTR_SIZE				Z_UINTX_SIZE	       (Z_UINTPTR_BITS)
#define Z_UINTPTR_MINIMUM			0
#define Z_UINTPTR_MAXIMUM			Z_UINTX_MAXIMUM	       (Z_UINTPTR_BITS)

#define Z_INTPTR_BITS				Z_POINTER_BITS

typedef Z_JOIN_2(zint,	 Z_INTPTR_BITS)		zintptr;
typedef Z_JOIN_2(Z2DInt, Z_INTPTR_BITS)		Z2DIntPtr;
typedef Z_JOIN_2(Z3DInt, Z_INTPTR_BITS)		Z3DIntPtr;
typedef Z_JOIN_2(Z4DInt, Z_INTPTR_BITS)		Z4DIntPtr;
#define Z_INTPTR				Z_INTX_LITERAL	      (Z_INTPTR_BITS)
#define Z_INTPTR_BASE_VALUE_TYPE		Z_INTX_BASE_VALUE_TYPE(Z_INTPTR_BITS)
#define Z_INTPTR_FIXED_VALUE_TYPE		Z_INTX_VALUE_TYPE     (Z_INTPTR_BITS)
#define Z_INTPTR_VALUE_TYPE			Z_VALUE_TYPE_INTPTR
#define Z_INTPTR_FORMAT				Z_INTX_FORMAT	      (Z_INTPTR_BITS)
#define Z_INTPTR_ENDIANNESS			Z_INTX_ENDIANNESS     (Z_INTPTR_BITS)
#define Z_INTPTR_SIZE				Z_INTX_SIZE	      (Z_INTPTR_BITS)
#define Z_INTPTR_MINIMUM			Z_INTX_MINIMUM	      (Z_INTPTR_BITS)
#define Z_INTPTR_MAXIMUM			Z_INTX_MAXIMUM	      (Z_INTPTR_BITS)

/* MARK: - CPU top natural and integer types */

#if Z_CPU(MAXIMUM_COPY_BITS) == 128 && Z_IS_AVAILABLE(UINT128)
#	define Z_UINTTOP_BITS			128
#elif Z_CPU(MAXIMUM_COPY_BITS) >= 64
#	define Z_UINTTOP_BITS			64
#elif Z_CPU(MAXIMUM_COPY_BITS) == 32
#	define Z_UINTTOP_BITS			32
#else
#	define Z_UINTTOP_BITS			16
#endif

typedef Z_JOIN_2(zuint,	  Z_UINTTOP_BITS)	zuinttop;
typedef Z_JOIN_2(Z2DUInt, Z_UINTTOP_BITS)	Z2DUIntTop;
typedef Z_JOIN_2(Z3DUInt, Z_UINTTOP_BITS)	Z3DUIntTop;
typedef Z_JOIN_2(Z4DUInt, Z_UINTTOP_BITS)	Z4DUIntTop;
#define Z_UINTTOP				Z_UINTX_LITERAL	       (Z_UINTTOP_BITS)
#define Z_UINTTOP_BASE_VALUE_TYPE		Z_UINTX_BASE_VALUE_TYPE(Z_UINTTOP_BITS)
#define Z_UINTTOP_FIXED_VALUE_TYPE		Z_UINTX_VALUE_TYPE     (Z_UINTTOP_BITS)
#define Z_UINTTOP_VALUE_TYPE			Z_VALUE_TYPE_UINTTOP
#define Z_UINTTOP_FORMAT			Z_UINTX_FORMAT	       (Z_UINTTOP_BITS)
#define Z_UINTTOP_ENDIANNESS			Z_UINTX_ENDIANNESS     (Z_UINTTOP_BITS)
#define Z_UINTTOP_SIZE				Z_UINTX_SIZE	       (Z_UINTTOP_BITS)
#define Z_UINTTOP_MINIMUM			0
#define Z_UINTTOP_MAXIMUM			Z_UINTX_MAXIMUM	       (Z_UINTTOP_BITS)

#if Z_CPU(MAXIMUM_COPY_BITS) == 128 && Z_IS_AVAILABLE(INT128)
#	define Z_INTTOP_BITS			128
#elif Z_CPU(MAXIMUM_COPY_BITS) >= 64
#	define Z_INTTOP_BITS			64
#elif Z_CPU(MAXIMUM_COPY_BITS) == 32
#	define Z_INTTOP_BITS			32
#else
#	define Z_INTTOP_BITS			16
#endif

typedef Z_JOIN_2(zint,	 Z_INTTOP_BITS)		zinttop;
typedef Z_JOIN_2(Z2DInt, Z_INTTOP_BITS)		Z2DIntTop;
typedef Z_JOIN_2(Z3DInt, Z_INTTOP_BITS)		Z3DIntTop;
typedef Z_JOIN_2(Z4DInt, Z_INTTOP_BITS)		Z4DIntTop;
#define Z_INTTOP				Z_INTX_LITERAL	      (Z_INTTOP_BITS)
#define Z_INTTOP_BASE_VALUE_TYPE		Z_INTX_BASE_VALUE_TYPE(Z_INTTOP_BITS)
#define Z_INTTOP_FIXED_VALUE_TYPE		Z_INTX_VALUE_TYPE     (Z_INTTOP_BITS)
#define Z_INTTOP_VALUE_TYPE			Z_VALUE_TYPE_INTTOP
#define Z_INTTOP_FORMAT				Z_INTX_FORMAT	      (Z_INTTOP_BITS)
#define Z_INTTOP_ENDIANNESS			Z_INTX_ENDIANNESS     (Z_INTTOP_BITS)
#define Z_INTTOP_SIZE				Z_INTX_SIZE	      (Z_INTTOP_BITS)
#define Z_INTTOP_MINIMUM			Z_INTX_MINIMUM	      (Z_INTTOP_BITS)
#define Z_INTTOP_MAXIMUM			Z_INTX_MAXIMUM	      (Z_INTTOP_BITS)

/* MARK: - Boolean type */

typedef zuint8					zboolean;
#define Z_BOOLEAN_BASE_VALUE_TYPE		Z_UINT8_BASE_VALUE_TYPE
#define Z_BOOLEAN_FIXED_VALUE_TYPE		Z_UINT8_FIXED_VALUE_TYPE
#define Z_BOOLEAN_VALUE_TYPE			Z_VALUE_TYPE_BOOLEAN
#define Z_BOOLEAN_FORMAT			Z_UINT8_FORMAT
#define Z_BOOLEAN_BITS				Z_UINT8_BITS
#define Z_BOOLEAN_SIZE				Z_UINT8_SIZE

/* MARK: - Default types */

#if defined(Z_USE_NATURAL_UINT16)
#	define Z_NATURAL_BITS			16
#elif defined(Z_USE_NATURAL_UINT32)
#	define Z_NATURAL_BITS			32
#elif defined(Z_USE_NATURAL_UINT64)
#	define Z_NATURAL_BITS			64
#else
#	define Z_NATURAL_BITS			Z_ULONG_BITS
#endif

typedef Z_JOIN_2(zuint,	  Z_NATURAL_BITS)	znatural;
typedef Z_JOIN_2(Z2DUInt, Z_NATURAL_BITS)	Z2DNatural;
typedef Z_JOIN_2(Z3DUInt, Z_NATURAL_BITS)	Z3DNatural;
typedef Z_JOIN_2(Z4DUInt, Z_NATURAL_BITS)	Z4DNatural;
#define Z_NATURAL				Z_UINTX_LITERAL	       (Z_NATURAL_BITS)
#define Z_NATURAL_BASE_VALUE_TYPE		Z_UINTX_BASE_VALUE_TYPE(Z_NATURAL_BITS)
#define Z_NATURAL_FIXED_VALUE_TYPE		Z_UINTX_VALUE_TYPE     (Z_NATURAL_BITS)
#define Z_NATURAL_VALUE_TYPE			Z_VALUE_TYPE_NATURAL
#define Z_NATURAL_FORMAT			Z_UINTX_FORMAT	       (Z_NATURAL_BITS)
#define Z_NATURAL_ENDIANNESS			Z_UINTX_ENDIANNESS     (Z_NATURAL_BITS)
#define Z_NATURAL_SIZE				Z_UINTX_SIZE	       (Z_NATURAL_BITS)
#define Z_NATURAL_MINIMUM			0
#define Z_NATURAL_MAXIMUM			Z_UINTX_MAXIMUM	       (Z_NATURAL_BITS)

#if defined(Z_USE_INTEGER_INT16)
#	define Z_INTEGER_BITS			16
#elif defined(Z_USE_INTEGER_INT32)
#	define Z_INTEGER_BITS			32
#elif defined(Z_USE_INTEGER_INT64)
#	define Z_INTEGER_BITS			64
#else
#	define Z_INTEGER_BITS			Z_LONG_BITS
#endif

typedef Z_JOIN_2(zint,	 Z_INTEGER_BITS)	zinteger;
typedef Z_JOIN_2(Z2DInt, Z_INTEGER_BITS)	Z2DInteger;
typedef Z_JOIN_2(Z3DInt, Z_INTEGER_BITS)	Z3DInteger;
typedef Z_JOIN_2(Z4DInt, Z_INTEGER_BITS)	Z4DInteger;
#define Z_INTEGER				Z_INTX_LITERAL	      (Z_INTEGER_BITS)
#define Z_INTEGER_BASE_VALUE_TYPE		Z_INTX_BASE_VALUE_TYPE(Z_INTEGER_BITS)
#define Z_INTEGER_FIXED_VALUE_TYPE		Z_INTX_VALUE_TYPE     (Z_INTEGER_BITS)
#define Z_INTEGER_VALUE_TYPE			Z_VALUE_TYPE_INTEGER
#define Z_INTEGER_FORMAT			Z_INTX_FORMAT	      (Z_INTEGER_BITS)
#define Z_INTEGER_ENDIANNESS			Z_INTX_ENDIANNESS     (Z_INTEGER_BITS)
#define Z_INTEGER_SIZE				Z_INTX_SIZE	      (Z_INTEGER_BITS)
#define Z_INTEGER_MINIMUM			Z_INTX_MINIMUM	      (Z_INTEGER_BITS)
#define Z_INTEGER_MAXIMUM			Z_INTX_MAXIMUM	      (Z_INTEGER_BITS)

#define Z_REAL_VALUE_TYPE			Z_VALUE_TYPE_REAL

#if defined(Z_USE_REAL_FLOAT)

	typedef zfloat				zreal;
	typedef Z2DFloat			Z2DReal;
	typedef Z3DFloat			Z3DReal;
	typedef Z4DFloat			Z4DReal;
#	define Z_REAL				Z_FLOAT
#	define Z_REAL_BASE_VALUE_TYPE		Z_FLOAT_BASE_VALUE_TYPE
#	define Z_REAL_FIXED_VALUE_TYPE		Z_FLOAT_FIXED_VALUE_TYPE
#	define Z_REAL_FORMAT			Z_FLOAT_FORMAT
#	define Z_REAL_BITS			Z_FLOAT_BITS
#	define Z_REAL_SIZE			Z_FLOAT_SIZE
#	define Z_REAL_MINIMUM			Z_FLOAT_MINIMUM
#	define Z_REAL_MAXIMUM			Z_FLOAT_MAXIMUM
#	define Z_REAL_EPSILON			Z_FLOAT_EPSILON
#	define Z_REAL_DECIMAL_DIGITS		Z_FLOAT_DECIMAL_DIGITS
#	define Z_REAL_MANTISSA_DIGITS		Z_FLOAT_MANTISSA_DIGITS
#	define Z_REAL_EXPONENT_MAXIMUM		Z_FLOAT_EXPONENT_MAXIMUM
#	define Z_REAL_EXPONENT_MINIMUM		Z_FLOAT_EXPONENT_MINIMUM
#	define Z_REAL_EXPONENT_10_MAXIMUM	Z_FLOAT_EXPONENT_10_MAXIMUM
#	define Z_REAL_EXPONENT_10_MINIMUM	Z_FLOAT_EXPONENT_10_MINIMUM

	typedef Z2DFloat			Z2D;
	typedef Z3DFloat			Z3D;
	typedef Z4DFloat			Z4D;

#elif defined(Z_USE_REAL_LDOUBLE)

	typedef zldouble			zreal;
	typedef Z2DLDouble			Z2DReal;
	typedef Z3DLDouble			Z3DReal;
	typedef Z4DLDouble			Z4DReal;
#	define Z_REAL				Z_LDOUBLE
#	define Z_REAL_BASE_VALUE_TYPE		Z_LDOUBLE_BASE_VALUE_TYPE
#	define Z_REAL_FIXED_VALUE_TYPE		Z_LDOUBLE_FIXED_VALUE_TYPE
#	define Z_REAL_FORMAT			Z_LDOUBLE_FORMAT
#	define Z_REAL_BITS			Z_LDOUBLE_BITS
#	define Z_REAL_SIZE			Z_LDOUBLE_SIZE
#	define Z_REAL_MINIMUM			Z_LDOUBLE_MINIMUM
#	define Z_REAL_MAXIMUM			Z_LDOUBLE_MAXIMUM
#	define Z_REAL_EPSILON			Z_LDOUBLE_EPSILON
#	define Z_REAL_DECIMAL_DIGITS		Z_LDOUBLE_DECIMAL_DIGITS
#	define Z_REAL_MANTISSA_DIGITS		Z_LDOUBLE_MANTISSA_DIGITS
#	define Z_REAL_EXPONENT_MAXIMUM		Z_LDOUBLE_EXPONENT_MAXIMUM
#	define Z_REAL_EXPONENT_MINIMUM		Z_LDOUBLE_EXPONENT_MINIMUM
#	define Z_REAL_EXPONENT_10_MAXIMUM	Z_LDOUBLE_EXPONENT_10_MAXIMUM
#	define Z_REAL_EXPONENT_10_MINIMUM	Z_LDOUBLE_EXPONENT_10_MINIMUM

	typedef Z2DLDouble			Z2D;
	typedef Z3DLDouble			Z3D;
	typedef Z4DLDouble			Z4D;

#else

	typedef zdouble				zreal;
	typedef Z2DDouble			Z2DReal;
	typedef Z3DDouble			Z3DReal;
	typedef Z4DDouble			Z4DReal;
#	define Z_REAL				Z_DOUBLE
#	define Z_REAL_BASE_VALUE_TYPE		Z_DOUBLE_BASE_VALUE_TYPE
#	define Z_REAL_FIXED_VALUE_TYPE		Z_DOUBLE_FIXED_VALUE_TYPE
#	define Z_REAL_FORMAT			Z_DOUBLE_FORMAT
#	define Z_REAL_BITS			Z_DOUBLE_BITS
#	define Z_REAL_SIZE			Z_DOUBLE_SIZE
#	define Z_REAL_MINIMUM			Z_DOUBLE_MINIMUM
#	define Z_REAL_MAXIMUM			Z_DOUBLE_MAXIMUM
#	define Z_REAL_EPSILON			Z_DOUBLE_EPSILON
#	define Z_REAL_DECIMAL_DIGITS		Z_DOUBLE_DECIMAL_DIGITS
#	define Z_REAL_MANTISSA_DIGITS		Z_DOUBLE_MANTISSA_DIGITS
#	define Z_REAL_EXPONENT_MAXIMUM		Z_DOUBLE_EXPONENT_MAXIMUM
#	define Z_REAL_EXPONENT_MINIMUM		Z_DOUBLE_EXPONENT_MINIMUM
#	define Z_REAL_EXPONENT_10_MAXIMUM	Z_DOUBLE_EXPONENT_10_MAXIMUM
#	define Z_REAL_EXPONENT_10_MINIMUM	Z_DOUBLE_EXPONENT_10_MINIMUM

	typedef Z2DDouble			Z2D;
	typedef Z3DDouble			Z3D;
	typedef Z4DDouble			Z4D;

#endif

/* MARK: - Standard C string character */

typedef char					ZString;

/* MARK: - Status type */

typedef zint					ZStatus;
#define Z_STATUS_TYPE				Z_INT_TYPE
#define Z_STATUS_FIXED_VALUE_TYPE		Z_INT_FIXED_VALUE_TYPE
#define Z_STATUS_BASE_VALUE_TYPE		Z_INT_BASE_VALUE_TYPE
#define Z_STATUS_FORMAT				Z_INT_FORMAT
#define Z_STATUS_ENDIANNESS			Z_INT_ENDIANNESS
#define Z_STATUS_BITS				Z_INT_BITS
#define Z_STATUS_SIZE				Z_INT_SIZE

/* MARK: - Order type */

typedef zint8					ZOrder;
#define Z_ORDER_TYPE				Z_UINT8_TYPE
#define Z_ORDER_FIXED_VALUE_TYPE		Z_UINT8_FIXED_VALUE_TYPE
#define Z_ORDER_BASE_VALUE_TYPE			Z_UINT8_BASE_VALUE_TYPE
#define Z_ORDER_FORMAT				Z_UINT8_FORMAT
#define Z_ORDER_BITS				Z_UINT8_BITS
#define Z_ORDER_SIZE				Z_UINT8_SIZE

/* MARK: - Value component access types */

typedef zuint8 uint8_value;

Z_DEFINE_STRICT_UNION (
	zuint8 value_uint8;
	zint8  value_int8;
) Z8Bit;

#if Z_CPU_INTEGER_ENDIANNESS(16BIT) == Z_ENDIANNESS_BIG

	Z_DEFINE_STRICT_UNION (
		zuint16 value_uint16;
		zint16	value_int16;
		zuint8	array_uint8[2];
		zint8	array_int8 [2];

		struct {zuint8 index1;
			zuint8 index0;
		} values_uint8;

		struct {zint8 index1;
			zint8 index0;
		} values_int8;
	) Z16Bit;

#elif Z_CPU_INTEGER_ENDIANNESS(16BIT) == Z_ENDIANNESS_LITTLE

	Z_DEFINE_STRICT_UNION (
		zuint16 value_uint16;
		zint16	value_int16;
		zuint8	array_uint8[2];
		zint8	array_int8 [2];

		struct {zuint8 index0;
			zuint8 index1;
		} values_uint8;

		struct {zint8 index0;
			zint8 index1;
		} values_int8;
	) Z16Bit;

#endif

#if Z_CPU_INTEGER_ENDIANNESS(32BIT) == Z_ENDIANNESS_BIG

	Z_DEFINE_STRICT_UNION (
		zuint32 value_uint32;
		zint32	value_int32;
		zuint16 array_uint16[2];
		zuint8	array_uint8 [4];
		zint16	array_int16 [2];
		zint8	array_int8  [4];

		struct {zuint16 index1;
			zuint16 index0;
		} values_uint16;

		struct {zuint8 index3;
			zuint8 index2;
			zuint8 index1;
			zuint8 index0;
		} values_uint8;

		struct {zint16 index1;
			zint16 index0;
		} values_int16;

		struct {zint8 index3;
			zint8 index2;
			zint8 index1;
			zint8 index0;
		} values_int8;
	) Z32Bit;

#elif Z_CPU_INTEGER_ENDIANNESS(32BIT) == Z_ENDIANNESS_LITTLE

	Z_DEFINE_STRICT_UNION (
		zuint32 value_uint32;
		zint32	value_int32;
		zuint16 array_uint16[2];
		zuint8	array_uint8 [4];
		zint16	array_int16 [2];
		zint8	array_int8  [4];

		struct {zuint16 index0;
			zuint16 index1;
		} values_uint16;

		struct {zuint8 index0;
			zuint8 index1;
			zuint8 index2;
			zuint8 index3;
		} values_uint8;

		struct {zint16 index0;
			zint16 index1;
		} values_int16;

		struct {zint8 index0;
			zint8 index1;
			zint8 index2;
			zint8 index3;
		} values_int8;
	) Z32Bit;

#endif

#if Z_CPU_INTEGER_ENDIANNESS(64BIT) == Z_ENDIANNESS_BIG

	Z_DEFINE_STRICT_UNION (
		zuint64 value_uint64;
		zint64	value_int64;
		zuint32 array_uint32[2];
		zuint16 array_uint16[4];
		zuint8	array_uint8 [8];
		zint32	array_int32 [2];
		zint16	array_int16 [4];
		zint8	array_int8  [8];

		struct {zuint32 index1;
			zuint32 index0;
		} values_uint32;

		struct {zuint16 index3;
			zuint16 index2;
			zuint16 index1;
			zuint16 index0;
		} values_uint16;

		struct {zuint8 index7;
			zuint8 index6;
			zuint8 index5;
			zuint8 index4;
			zuint8 index3;
			zuint8 index2;
			zuint8 index1;
			zuint8 index0;
		} values_uint8;

		struct {zint32 index1;
			zint32 index0;
		} values_int32;

		struct {zint16 index3;
			zint16 index2;
			zint16 index1;
			zint16 index0;
		} values_int16;

		struct {zint8 index7;
			zint8 index6;
			zint8 index5;
			zint8 index4;
			zint8 index3;
			zint8 index2;
			zint8 index1;
			zint8 index0;
		} values_int8;
	) Z64Bit;

#elif Z_CPU_INTEGER_ENDIANNESS(64BIT) == Z_ENDIANNESS_LITTLE

	Z_DEFINE_STRICT_UNION (
		zuint64 value_uint64;
		zint64	value_int64;
		zuint32 array_uint32[2];
		zuint16 array_uint16[4];
		zuint8	array_uint8 [8];
		zint32	array_int32 [2];
		zint16	array_int16 [4];
		zint8	array_int8  [8];

		struct {zuint32 index0;
			zuint32 index1;
		} values_uint32;

		struct {zuint16 index0;
			zuint16 index1;
			zuint16 index2;
			zuint16 index3;
		} values_uint16;

		struct {zuint8 index0;
			zuint8 index1;
			zuint8 index2;
			zuint8 index3;
			zuint8 index4;
			zuint8 index5;
			zuint8 index6;
			zuint8 index7;
		} values_uint8;

		struct {zint32 index0;
			zint32 index1;
		} values_int32;

		struct {zint16 index0;
			zint16 index1;
			zint16 index2;
			zint16 index3;
		} values_int16;

		struct {zint8 index0;
			zint8 index1;
			zint8 index2;
			zint8 index3;
			zint8 index4;
			zint8 index5;
			zint8 index6;
			zint8 index7;
		} values_int8;
	) Z64Bit;

#endif

#if Z_IS_AVAILABLE(UINT128) && Z_IS_AVAILABLE(INT128)

#	if Z_CPU_INTEGER_ENDIANNESS(128BIT) == Z_ENDIANNESS_BIG

		Z_DEFINE_STRICT_UNION (
			zuint128 value_uint128;
			zint128  value_int128;
			zuint64  array_uint64[ 2];
			zuint32  array_uint32[ 4];
			zuint16  array_uint16[ 8];
			zuint8	 array_uint8 [16];
			zint64	 array_int64 [ 2];
			zint32	 array_int32 [ 4];
			zint16	 array_int16 [ 8];
			zint8	 array_int8  [16];

			struct {zuint64 index1;
				zuint64 index0;
			} values_uint64;

			struct {zuint32 index3;
				zuint32 index2;
				zuint32 index1;
				zuint32 index0;
			} values_uint32;

			struct {zuint16 index7;
				zuint16 index6;
				zuint16 index5;
				zuint16 index4;
				zuint16 index3;
				zuint16 index2;
				zuint16 index1;
				zuint16 index0;
			} values_uint16;

			struct {zuint8 index15;
				zuint8 index14;
				zuint8 index13;
				zuint8 index12;
				zuint8 index11;
				zuint8 index10;
				zuint8 index09;
				zuint8 index08;
				zuint8 index07;
				zuint8 index06;
				zuint8 index05;
				zuint8 index04;
				zuint8 index03;
				zuint8 index02;
				zuint8 index01;
				zuint8 index00;
			} values_uint8;

			struct {zint64 index1;
				zint64 index0;
			} values_int64;

			struct {zint32 index3;
				zint32 index2;
				zint32 index1;
				zint32 index0;
			} values_int32;

			struct {zint16 index7;
				zint16 index6;
				zint16 index5;
				zint16 index4;
				zint16 index3;
				zint16 index2;
				zint16 index1;
				zint16 index0;
			} values_int16;

			struct {zint8 index15;
				zint8 index14;
				zint8 index13;
				zint8 index12;
				zint8 index11;
				zint8 index10;
				zint8 index09;
				zint8 index08;
				zint8 index07;
				zint8 index06;
				zint8 index05;
				zint8 index04;
				zint8 index03;
				zint8 index02;
				zint8 index01;
				zint8 index00;
			} values_int8;
		) Z128Bit;

#	elif Z_CPU_INTEGER_ENDIANNESS(128BIT) == Z_ENDIANNESS_LITTLE

		Z_DEFINE_STRICT_UNION (
			zuint128 value_uint128;
			zuint128 value_int128;
			zuint64  array_uint64[ 2];
			zuint32  array_uint32[ 4];
			zuint16  array_uint16[ 8];
			zuint8	 array_uint8 [16];
			zint64	 array_int64 [ 2];
			zint32	 array_int32 [ 4];
			zint16	 array_int16 [ 8];
			zint8	 array_int8  [16];

			struct {zuint64 index0;
				zuint64 index1;
			} values_uint64;

			struct {zuint32 index0;
				zuint32 index1;
				zuint32 index2;
				zuint32 index3;
			} values_uint32;

			struct {zuint16 index0;
				zuint16 index1;
				zuint16 index2;
				zuint16 index3;
				zuint16 index4;
				zuint16 index5;
				zuint16 index6;
				zuint16 index7;
			} values_uint16;

			struct {zuint8 index00;
				zuint8 index01;
				zuint8 index02;
				zuint8 index03;
				zuint8 index04;
				zuint8 index05;
				zuint8 index06;
				zuint8 index07;
				zuint8 index08;
				zuint8 index09;
				zuint8 index10;
				zuint8 index11;
				zuint8 index12;
				zuint8 index13;
				zuint8 index14;
				zuint8 index15;
			} values_uint8;

			struct {zint64 index0;
				zint64 index1;
			} values_int64;

			struct {zint32 index0;
				zint32 index1;
				zint32 index2;
				zint32 index3;
			} values_int32;

			struct {zint16 index0;
				zint16 index1;
				zint16 index2;
				zint16 index3;
				zint16 index4;
				zint16 index5;
				zint16 index6;
				zint16 index7;
			} values_int16;

			struct {zint8 index00;
				zint8 index01;
				zint8 index02;
				zint8 index03;
				zint8 index04;
				zint8 index05;
				zint8 index06;
				zint8 index07;
				zint8 index08;
				zint8 index09;
				zint8 index10;
				zint8 index11;
				zint8 index12;
				zint8 index13;
				zint8 index14;
				zint8 index15;
			} values_int8;
		) Z128Bit;

#	endif

#endif

/* MARK: - Range type */

typedef struct {zsize index, size;} ZRange;

/* Pointer cast type for lvalue assignment */

Z_DEFINE_STRICT_UNION_BEGIN
	zuint8*	   pointer_uint8;
	Z2DUInt8*  pointer_2d_uint8;
	Z3DUInt8*  pointer_3d_uint8;
	Z4DUInt8*  pointer_4d_uint8;

	zuint16*   pointer_uint16;
	Z2DUInt16* pointer_2d_uint16;
	Z3DUInt16* pointer_3d_uint16;
	Z4DUInt16* pointer_4d_uint16;

	zuint32*   pointer_uint32;
	Z2DUInt32* pointer_2d_uint32;
	Z3DUInt32* pointer_3d_uint32;
	Z4DUInt32* pointer_4d_uint32;

	zuint64*   pointer_uint64;
	Z2DUInt64* pointer_2d_uint64;
	Z3DUInt64* pointer_3d_uint64;
	Z4DUInt64* pointer_4d_uint64;

	zint8*	   pointer_int8;
	Z2DInt8*   pointer_2d_int8;
	Z3DInt8*   pointer_3d_int8;
	Z4DInt8*   pointer_4d_int8;

	zint16*	   pointer_int16;
	Z2DInt16*  pointer_2d_int16;
	Z3DInt16*  pointer_3d_int16;
	Z4DInt16*  pointer_4d_int16;

	zint32*	   pointer_int32;
	Z2DInt32*  pointer_2d_int32;
	Z3DInt32*  pointer_3d_int32;
	Z4DInt32*  pointer_4d_int32;

	zint64*	   pointer_int64;
	Z2DInt64*  pointer_2d_int64;
	Z3DInt64*  pointer_3d_int64;
	Z4DInt64*  pointer_4d_int64;

#	if Z_IS_AVAILABLE(UINT128)
		zuint128*   pointer_uint128;
		Z2DUInt128* pointer_2d_uint128;
		Z3DUInt128* pointer_3d_uint128;
		Z4DUInt128* pointer_4d_uint128;
#	endif

#	if Z_IS_AVAILABLE(INT128)
		zint128*    pointer_int128;
		Z2DInt128*  pointer_2d_int128;
		Z3DInt128*  pointer_3d_int128;
		Z4DInt128*  pointer_4d_int128;
#	endif

	zuchar*	    pointer_uchar;
	Z2DUChar*   pointer_2d_uchar;
	Z3DUChar*   pointer_3d_uchar;
	Z4DUChar*   pointer_4d_uchar;

	zshort*	    pointer_ushort;
	Z2DUShort*  pointer_2d_ushort;
	Z3DUShort*  pointer_3d_ushort;
	Z4DUShort*  pointer_4d_ushort;

	zuint*	    pointer_uint;
	Z2DUInt*    pointer_2d_uint;
	Z3DUInt*    pointer_3d_uint;
	Z4DUInt*    pointer_4d_uint;

	zulong*	    pointer_ulong;
	Z2DULong*   pointer_2d_ulong;
	Z3DULong*   pointer_3d_ulong;
	Z4DULong*   pointer_4d_ulong;

	zullong*    pointer_ullong;
	Z2DULLong*  pointer_2d_ullong;
	Z3DULLong*  pointer_3d_ullong;
	Z4DULLong*  pointer_4d_ullong;

	zchar*	    pointer_char;
	Z2DChar*    pointer_2d_char;
	Z3DChar*    pointer_3d_char;
	Z4DChar*    pointer_4d_char;

	zshort*	    pointer_short;
	Z2DShort*   pointer_2d_short;
	Z3DShort*   pointer_3d_short;
	Z4DShort*   pointer_4d_short;

	zint*	    pointer_int;
	Z2DInt*     pointer_2d_int;
	Z3DInt*     pointer_3d_int;
	Z4DInt*     pointer_4d_int;

	zlong*	    pointer_long;
	Z2DLong*    pointer_2d_long;
	Z3DLong*    pointer_3d_long;
	Z4DLong*    pointer_4d_long;

	zllong*	    pointer_llong;
	Z2DLLong*   pointer_2d_llong;
	Z3DLLong*   pointer_3d_llong;
	Z4DLLong*   pointer_4d_llong;

	zfloat*	    pointer_float;
	Z2DFloat*   pointer_2d_float;
	Z3DFloat*   pointer_3d_float;
	Z4DFloat*   pointer_4d_float;

	zdouble*    pointer_double;
	Z2DDouble*  pointer_2d_double;
	Z3DDouble*  pointer_3d_double;
	Z4DDouble*  pointer_4d_double;

	zldouble*   pointer_ldouble;
	Z2DLDouble* pointer_2d_ldouble;
	Z3DLDouble* pointer_3d_ldouble;
	Z4DLDouble* pointer_4d_ldouble;

	zsize*	    pointer_size;
	Z2DSize*    pointer_2d_size;
	Z3DSize*    pointer_3d_size;
	Z4DSize*    pointer_4d_size;

	zssize*	    pointer_ssize;
	Z2DSSize*   pointer_2d_ssize;
	Z3DSSize*   pointer_3d_ssize;
	Z4DSSize*   pointer_4d_ssize;

	zuintmax*   pointer_uintmax;
	Z2DUIntMax* pointer_2d_uintmax;
	Z3DUIntMax* pointer_3d_uintmax;
	Z4DUIntMax* pointer_4d_uintmax;

	zuintptr*   pointer_uintptr;
	Z2DUIntPtr* pointer_2d_uintptr;
	Z3DUIntPtr* pointer_3d_uintptr;
	Z4DUIntPtr* pointer_4d_uintptr;

	zuinttop*   pointer_uinttop;
	Z2DUIntTop* pointer_2d_uinttop;
	Z3DUIntTop* pointer_3d_uinttop;
	Z4DUIntTop* pointer_4d_uinttop;

	zintmax*    pointer_intmax;
	Z2DIntMax*  pointer_2d_intmax;
	Z3DIntMax*  pointer_3d_intmax;
	Z4DIntMax*  pointer_4d_intmax;

	zintptr*    pointer_intptr;
	Z2DIntPtr*  pointer_2d_intptr;
	Z3DIntPtr*  pointer_3d_intptr;
	Z4DIntPtr*  pointer_4d_intptr;

	zinttop*    pointer_inttop;
	Z2DIntTop*  pointer_2d_inttop;
	Z3DIntTop*  pointer_3d_inttop;
	Z4DIntTop*  pointer_4d_inttop;

	zboolean*   pointer_boolean;

	znatural*   pointer_natural;
	Z2DNatural* pointer_2d_natural;
	Z3DNatural* pointer_3d_natural;
	Z4DNatural* pointer_4d_natural;

	zinteger*   pointer_integer;
	Z2DInteger* pointer_2d_integer;
	Z3DInteger* pointer_3d_integer;
	Z4DInteger* pointer_4d_integer;

	zreal*	    pointer_real;
	Z2DReal*    pointer_2d_real;
	Z3DReal*    pointer_3d_real;
	Z4DReal*    pointer_4d_real;

	ZStatus*    pointer_status;
	ZOrder*	    pointer_order;

	Z8Bit*	    pointer_8bit;
	Z16Bit*     pointer_16bit;
	Z32Bit*     pointer_32bit;
	Z64Bit*     pointer_64bit;

#	if Z_IS_AVAILABLE(UINT128) && Z_IS_AVAILABLE(INT128)
		Z128Bit* pointer_128bit;
#	endif

	void*	 pointer;
	zuintptr value_uintptr;
	ZRange*	 pointer_range;

#	ifdef Z_PARTIAL_POINTER_UNION
		Z_PARTIAL_POINTER_UNION
#	endif
Z_DEFINE_STRICT_UNION_END ZPointer;

/* MARK: - Casts */

#define Z_2D_UCHAR(  p) ((Z2DUChar   *)(p))
#define Z_2D_USHORT( p) ((Z2DUShort  *)(p))
#define Z_2D_UINT(   p) ((Z2DUInt    *)(p))
#define Z_2D_ULONG(  p) ((Z2DULong   *)(p))
#define Z_2D_ULLONG( p) ((Z2DULLong  *)(p))
#define Z_2D_CHAR(   p) ((Z2DChar    *)(p))
#define Z_2D_SHORT(  p) ((Z2DShort   *)(p))
#define Z_2D_INT(    p) ((Z2DInt     *)(p))
#define Z_2D_LONG(   p) ((Z2DLong    *)(p))
#define Z_2D_LLONG(  p) ((Z2DLLong   *)(p))
#define Z_2D_FLOAT(  p) ((Z2DFloat   *)(p))
#define Z_2D_DOUBLE( p) ((Z2DDouble  *)(p))
#define Z_2D_LDOUBLE(p) ((Z2DLDouble *)(p))
#define Z_2D_UINT8(  p) ((Z2DUInt8   *)(p))
#define Z_2D_UINT16( p) ((Z2DUInt16  *)(p))
#define Z_2D_UINT32( p) ((Z2DUInt32  *)(p))
#define Z_2D_UINT64( p) ((Z2DUInt64  *)(p))
#define Z_2D_UINT128(p) ((Z2DUInt128 *)(p))
#define Z_2D_INT8(   p) ((Z2DInt8    *)(p))
#define Z_2D_INT16(  p) ((Z2DInt16   *)(p))
#define Z_2D_INT32(  p) ((Z2DInt32   *)(p))
#define Z_2D_INT64(  p) ((Z2DInt64   *)(p))
#define Z_2D_INT128( p) ((Z2DInt128  *)(p))
#define Z_2D_SIZE(   p) ((Z2DSize    *)(p))
#define Z_2D_SSIZE(  p) ((Z2DSSize   *)(p))
#define Z_2D_UINTPTR(p) ((Z2DUIntPtr *)(p))
#define Z_2D_UINTTOP(p) ((Z2DUIntTop *)(p))
#define Z_2D_UINTMAX(p) ((Z2DUIntMax *)(p))
#define Z_2D_INTMAX( p) ((Z2DIntMax  *)(p))
#define Z_2D_INTPTR( p) ((Z2DIntPtr  *)(p))
#define Z_2D_INTTOP( p) ((Z2DIntTop  *)(p))
#define Z_2D_NATURAL(p) ((Z2DNatural *)(p))
#define Z_2D_INTEGER(p) ((Z2DInteger *)(p))
#define Z_2D_REAL(   p) ((Z2DReal    *)(p))
#define Z_2D(	     p) ((Z2D	     *)(p))
#define Z_3D_UCHAR(  p) ((Z3DUChar   *)(p))
#define Z_3D_USHORT( p) ((Z3DUShort  *)(p))
#define Z_3D_UINT(   p) ((Z3DUInt    *)(p))
#define Z_3D_ULONG(  p) ((Z3DULong   *)(p))
#define Z_3D_ULLON(  p) ((Z3DULLong  *)(p))
#define Z_3D_CHAR(   p) ((Z3DChar    *)(p))
#define Z_3D_SHORT(  p) ((Z3DShort   *)(p))
#define Z_3D_INT(    p) ((Z3DInt     *)(p))
#define Z_3D_LONG(   p) ((Z3DLong    *)(p))
#define Z_3D_LLON(   p) ((Z3DLLong   *)(p))
#define Z_3D_FLOAT(  p) ((Z3DFloat   *)(p))
#define Z_3D_DOUBLE( p) ((Z3DDouble  *)(p))
#define Z_3D_LDOUBLE(p) ((Z3DLDouble *)(p))
#define Z_3D_UINT8(  p) ((Z3DUInt8   *)(p))
#define Z_3D_UINT16( p) ((Z3DUInt16  *)(p))
#define Z_3D_UINT32( p) ((Z3DUInt32  *)(p))
#define Z_3D_UINT64( p) ((Z3DUInt64  *)(p))
#define Z_3D_INT8(   p) ((Z3DInt8    *)(p))
#define Z_3D_INT16(  p) ((Z3DInt16   *)(p))
#define Z_3D_INT32(  p) ((Z3DInt32   *)(p))
#define Z_3D_INT64(  p) ((Z3DInt64   *)(p))
#define Z_3D_SIZE(   p) ((Z3DSize    *)(p))
#define Z_3D_SSIZE(  p) ((Z3DSSize   *)(p))
#define Z_3D_UINTMAX(p) ((Z3DUIntMax *)(p))
#define Z_3D_UINTPTR(p) ((Z3DUIntPtr *)(p))
#define Z_3D_UINTTOP(p) ((Z3DUIntTop *)(p))
#define Z_3D_INTMAX( p) ((Z3DIntMax  *)(p))
#define Z_3D_INTPTR( p) ((Z3DIntPtr  *)(p))
#define Z_3D_INTTOP( p) ((Z3DIntTop  *)(p))
#define Z_3D_NATURAL(p) ((Z3DNatural *)(p))
#define Z_3D_INTEGER(p) ((Z3DInteger *)(p))
#define Z_3D_REAL(   p) ((Z3DReal    *)(p))
#define Z_3D(	     p) ((Z3D	     *)(p))
#define Z_4D_UCHAR(  p) ((Z4DUChar   *)(p))
#define Z_4D_USHORT( p) ((Z4DUShort  *)(p))
#define Z_4D_UINT(   p) ((Z4DUInt    *)(p))
#define Z_4D_ULONG(  p) ((Z4DULong   *)(p))
#define Z_4D_ULLON(  p) ((Z4DULLong  *)(p))
#define Z_4D_CHAR(   p) ((Z4DChar    *)(p))
#define Z_4D_SHORT(  p) ((Z4DShort   *)(p))
#define Z_4D_INT(    p) ((Z4DInt     *)(p))
#define Z_4D_LONG(   p) ((Z4DLong    *)(p))
#define Z_4D_LLON(   p) ((Z4DLLong   *)(p))
#define Z_4D_FLOAT(  p) ((Z4DFloat   *)(p))
#define Z_4D_DOUBLE( p) ((Z4DDouble  *)(p))
#define Z_4D_LDOUBLE(p) ((Z4DLDouble *)(p))
#define Z_4D_UINT8(  p) ((Z4DUInt8   *)(p))
#define Z_4D_UINT16( p) ((Z4DUInt16  *)(p))
#define Z_4D_UINT32( p) ((Z4DUInt32  *)(p))
#define Z_4D_UINT64( p) ((Z4DUInt64  *)(p))
#define Z_4D_INT8(   p) ((Z4DInt8    *)(p))
#define Z_4D_INT16(  p) ((Z4DInt16   *)(p))
#define Z_4D_INT32(  p) ((Z4DInt32   *)(p))
#define Z_4D_INT64(  p) ((Z4DInt64   *)(p))
#define Z_4D_SIZE(   p) ((Z4DSize    *)(p))
#define Z_4D_UINTMAX(p) ((Z4DUIntMax *)(p))
#define Z_4D_UINTPTR(p) ((Z4DUIntPtr *)(p))
#define Z_4D_UINTTOP(p) ((Z4DUIntTop *)(p))
#define Z_4D_SSIZE(  p) ((Z4DSSize   *)(p))
#define Z_4D_INTMAX( p) ((Z4DIntMax  *)(p))
#define Z_4D_INTPTR( p) ((Z4DIntPtr  *)(p))
#define Z_4D_INTTOP( p) ((Z4DIntTop  *)(p))
#define Z_4D_NATURAL(p) ((Z4DNatural *)(p))
#define Z_4D_INTEGER(p) ((Z4DInteger *)(p))
#define Z_4D_REAL(   p) ((Z4DReal    *)(p))
#define Z_4D(	     p) ((Z4D	     *)(p))
#define Z_8BIT(	     p) ((Z8Bit	     *)(p))
#define Z_16BIT(     p) ((Z16Bit     *)(p))
#define Z_32BIT(     p) ((Z32Bit     *)(p))
#define Z_64BIT(     p) ((Z64Bit     *)(p))
#define Z_128BIT(    p) ((Z128Bit    *)(p))
#define Z_RANGE(     p) ((ZRange     *)(p))
#define Z_POINTER(   p) ((ZPointer   *)(p))

#endif /* __Z_types_base_H__ */
