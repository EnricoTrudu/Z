/* Z Kit C API - inspection/floating point.h
	      __	   __
  _______ ___/ /______ ___/ /__
 / __/ -_) _  / __/ _ \ _  / -_)
/_/  \__/\_,_/\__/\___/_,_/\__/
Copyright © 2006-2015 Manuel Sainz de Baranda y Goñi.
Released under the terms of the GNU Lesser General Public License v3. */

#ifndef __Z_inspection_floating_point_H__
#define __Z_inspection_floating_point_H__

#include <Z/inspection/CPU.h>
#include <Z/inspection/language.h>

#define Z_INSPECTING_FLOATING_POINT

#	if	Z_CPU_ARCHITECTURE == Z_CPU_ARCHITECTURE_X86_32 || \
		Z_CPU_ARCHITECTURE == Z_CPU_ARCHITECTURE_X86_64

#		if Z_COMPILER == Z_COMPILER_MICROSOFT_VISUAL_CPP

#			include <Z/formats/floating point/Microsoft Visual C++.h>

#			define Z_FLOATING_POINT_NAME_FLOAT   MICROSOFT_VISUAL_CPP_FLOAT
#			define Z_FLOATING_POINT_NAME_DOUBLE  MICROSOFT_VISUAL_CPP_DOUBLE
#			define Z_FLOATING_POINT_NAME_LDOUBLE MICROSOFT_VISUAL_CPP_DOUBLE

#		else

#			include <Z/formats/floating point/IEEE 754.h>
#			include <Z/formats/floating point/Intel.h>

#			undef IEEE_754_BINARY32
#			undef IEEE_754_BINARY64

#			define Z_FLOATING_POINT_NAME_FLOAT   IEEE_754_BINARY32
#			define Z_FLOATING_POINT_NAME_DOUBLE  IEEE_754_BINARY64
#			define Z_FLOATING_POINT_NAME_LDOUBLE INTEL_FLOAT80

#		endif

#	else
#	endif

#undef Z_INSPECTING_FLOATING_POINT

#include <Z/keys/floating point.h>

/* EXPONENT_MINIMUM
El menor número entero negativo tal que FLT_RADIX elevado a la potencia de éste menos 1 es un número normalizado de coma flotante. */

#undef _BITS
#undef _BIAS
#undef _MINIMUM
#undef _MAXIMUM
#undef _EPSILON
#undef _DECIMAL_DIGITS
#undef _MANTISSA_OFFSET
#undef _MANTISSA_BITS
#undef _MANTISSA_DIGITS
#undef _EXPONENT_OFFSET
#undef _EXPONENT_BITS
#undef _EXPONENT_RADIX
#undef _EXPONENT_MINIMUM
#undef _EXPONENT_MAXIMUM
#undef _EXPONENT_10_MINIMUM
#undef _EXPONENT_10_MAXIMUM
#undef _SIGN_OFFSET
#undef _SIGN_BITS

#define Z_FLOATING_POINT_NAME(		     TYPE) Z_JOIN_2(Z_FLOATING_POINT_NAME_, TYPE)
#define Z_FLOATING_POINT_FORMAT(	     TYPE) Z_JOIN_2(Z_VALUE_FORMAT_, Z_FLOATING_POINT_NAME(TYPE))
#define Z_FLOATING_POINT_BITS(		     TYPE) Z_JOIN_3(Z_, Z_FLOATING_POINT_NAME(TYPE), _BITS)
#define Z_FLOATING_POINT_BIAS(		     TYPE) Z_JOIN_3(Z_, Z_FLOATING_POINT_NAME(TYPE), _BIAS)
#define Z_FLOATING_POINT_EPSILON(	     TYPE) Z_JOIN_3(Z_, Z_FLOATING_POINT_NAME(TYPE), _EPSILON)
#define Z_FLOATING_POINT_MINIMUM(	     TYPE) Z_JOIN_3(Z_, Z_FLOATING_POINT_NAME(TYPE), _MINIMUM)
#define Z_FLOATING_POINT_MAXIMUM(	     TYPE) Z_JOIN_3(Z_, Z_FLOATING_POINT_NAME(TYPE), _MAXIMUM)
#define Z_FLOATING_POINT_DECIMAL_DIGITS(     TYPE) Z_JOIN_3(Z_, Z_FLOATING_POINT_NAME(TYPE), _DECIMAL_DIGITS)
#define Z_FLOATING_POINT_MANTISSA_OFFSET(    TYPE) Z_JOIN_3(Z_, Z_FLOATING_POINT_NAME(TYPE), _MANTISSA_OFFSET)
#define Z_FLOATING_POINT_MANTISSA_BITS(      TYPE) Z_JOIN_3(Z_, Z_FLOATING_POINT_NAME(TYPE), _MANTISSA_BITS)
#define Z_FLOATING_POINT_MANTISSA_DIGITS(    TYPE) Z_JOIN_3(Z_, Z_FLOATING_POINT_NAME(TYPE), _MANTISSA_DIGITS)
#define Z_FLOATING_POINT_EXPONENT_OFFSET(    TYPE) Z_JOIN_3(Z_, Z_FLOATING_POINT_NAME(TYPE), _EXPONENT_OFFSET)
#define Z_FLOATING_POINT_EXPONENT_BITS(      TYPE) Z_JOIN_3(Z_, Z_FLOATING_POINT_NAME(TYPE), _EXPONENT_BITS)
#define Z_FLOATING_POINT_EXPONENT_RADIX(     TYPE) Z_JOIN_3(Z_, Z_FLOATING_POINT_NAME(TYPE), _EXPONENT_RADIX)
#define Z_FLOATING_POINT_EXPONENT_MINIMUM(   TYPE) Z_JOIN_3(Z_, Z_FLOATING_POINT_NAME(TYPE), _EXPONENT_MINIMUM)
#define Z_FLOATING_POINT_EXPONENT_MAXIMUM(   TYPE) Z_JOIN_3(Z_, Z_FLOATING_POINT_NAME(TYPE), _EXPONENT_MAXIMUM)
#define Z_FLOATING_POINT_EXPONENT_10_MINIMUM(TYPE) Z_JOIN_3(Z_, Z_FLOATING_POINT_NAME(TYPE), _EXPONENT_10_MINIMUM)
#define Z_FLOATING_POINT_EXPONENT_10_MAXIMUM(TYPE) Z_JOIN_3(Z_, Z_FLOATING_POINT_NAME(TYPE), _EXPONENT_10_MAXIMUM)
#define Z_FLOATING_POINT_SIGN_OFFSET(	     TYPE) Z_JOIN_3(Z_, Z_FLOATING_POINT_NAME(TYPE), _SIGN_OFFSET)
#define Z_FLOATING_POINT_SIGN_BITS(	     TYPE) Z_JOIN_3(Z_, Z_FLOATING_POINT_NAME(TYPE), _SIGN_BITS)

#if Z_COMPILER_HAS_MACRO(INFINITY)
#	define Z_FLOATING_POINT_INFINITY(TYPE, _) Z_COMPILER_MACRO(INFINITY)(_(Z_FLOATING_POINT_MAXIMUM(TYPE)), _)
#else
#	define Z_FLOATING_POINT_INFINITY(TYPE, _) (_(Z_FLOATING_POINT_MAXIMUM(TYPE)) + _(Z_FLOATING_POINT_MAXIMUM(TYPE)))
#endif

#if Z_COMPILER_HAS_MACRO(NAN)
#	define Z_FLOATING_POINT_NAN(TYPE, _) Z_COMPILER_MACRO(NAN)(_(Z_FLOATING_POINT_MAXIMUM(TYPE)), _)
#else
#	define Z_FLOATING_POINT_NAN(TYPE, _) (Z_FLOATING_POINT_INFINITY(TYPE, _) - Z_FLOATING_POINT_INFINITY(TYPE, _))
#endif

#endif /* __Z_inspection_floating_point_H__ */
