/* Z Kit - types/fundamental.h
 _____  _______________
/_   /_/  -_/_   _/  _ |
 /____/\___/ /__//___/_| Kit
Copyright (C) 2006-2019 Manuel Sainz de Baranda y Go√±i.
Released under the terms of the GNU Lesser General Public License v3. */

#ifndef Z_types_fundamental_H
#define Z_types_fundamental_H

#include <Z/inspection/CPU.h>
#include <Z/inspection/floating-point.h>
#include <Z/inspection/data model.h>
#include <Z/macros/templating.h>

/* MARK: - Fixed width integral types */

#if Z_DATA_MODEL_HAS_TYPE(UINT8)

	typedef Z_DATA_MODEL_TYPE(UINT8)  zuint8;
#	define Z_UINT8			  Z_DATA_MODEL_LITERAL	  (UINT8)
#	define Z_UINT8_FUNDAMENTAL	  Z_DATA_MODEL_FUNDAMENTAL(UINT8)
#	define Z_UINT8_FIXED_FUNDAMENTAL  Z_FUNDAMENTAL_UINT8
#	define Z_UINT8_NUMBER_FORMAT	  Z_NUMBER_FORMAT_8BIT_NATURAL
#	define Z_UINT8_BITS		  8
#	define Z_UINT8_MAXIMUM		  Z_UINT8(255)
#	define Z_UINT8_MINIMUM		  Z_UINT8(0)

#endif

#if Z_DATA_MODEL_HAS_TYPE(SINT8)

	typedef Z_DATA_MODEL_TYPE(SINT8)  zsint8;
#	define Z_SINT8			  Z_DATA_MODEL_LITERAL	  (SINT8)
#	define Z_SINT8_FUNDAMENTAL	  Z_DATA_MODEL_FUNDAMENTAL(SINT8)
#	define Z_SINT8_FIXED_FUNDAMENTAL  Z_FUNDAMENTAL_SINT8
#	define Z_SINT8_NUMBER_FORMAT	  Z_CPU_INTEGER_FORMAT(8)
#	define Z_SINT8_BITS		  8
#	define Z_SINT8_MAXIMUM		  Z_SINT8(127)
#	define Z_SINT8_MINIMUM		  (-Z_SINT8_MAXIMUM - Z_SINT8(1))

#endif

#if Z_DATA_MODEL_HAS_TYPE(UINT16)

	typedef Z_DATA_MODEL_TYPE(UINT16) zuint16;
#	define Z_UINT16			  Z_DATA_MODEL_LITERAL	  (UINT16)
#	define Z_UINT16_FUNDAMENTAL	  Z_DATA_MODEL_FUNDAMENTAL(UINT16)
#	define Z_UINT16_FIXED_FUNDAMENTAL Z_FUNDAMENTAL_UINT16
#	define Z_UINT16_NUMBER_FORMAT	  Z_NUMBER_FORMAT_16BIT_NATURAL
#	define Z_UINT16_ENDIANNESS	  Z_CPU_INTEGRAL_ENDIANNESS(16)
#	define Z_UINT16_BITS		  16
#	define Z_UINT16_MAXIMUM		  Z_UINT16(65535)
#	define Z_UINT16_MINIMUM		  Z_UINT16(0)

#endif

#if Z_DATA_MODEL_HAS_TYPE(SINT16)

	typedef Z_DATA_MODEL_TYPE(SINT16) zsint16;
#	define Z_SINT16			  Z_DATA_MODEL_LITERAL	  (SINT16)
#	define Z_SINT16_FUNDAMENTAL	  Z_DATA_MODEL_FUNDAMENTAL(SINT16)
#	define Z_SINT16_FIXED_FUNDAMENTAL Z_FUNDAMENTAL_SINT16
#	define Z_SINT16_NUMBER_FORMAT	  Z_CPU_INTEGER_FORMAT	   (16)
#	define Z_SINT16_ENDIANNESS	  Z_CPU_INTEGRAL_ENDIANNESS(16)
#	define Z_SINT16_BITS		  16
#	define Z_SINT16_MAXIMUM		  Z_SINT16(32767)
#	define Z_SINT16_MINIMUM		  (-Z_SINT16_MAXIMUM -Z_SINT16(1))

#endif

#if Z_DATA_MODEL_HAS_TYPE(UINT24)

	typedef Z_DATA_MODEL_TYPE(UINT24) zuint24;
#	define Z_UINT24			  Z_DATA_MODEL_LITERAL	  (UINT24)
#	define Z_UINT24_FUNDAMENTAL	  Z_DATA_MODEL_FUNDAMENTAL(UINT24)
#	define Z_UINT24_FIXED_FUNDAMENTAL Z_FUNDAMENTAL_UINT24
#	define Z_UINT24_NUMBER_FORMAT	  Z_NUMBER_FORMAT_24BIT_NATURAL
#	define Z_UINT24_ENDIANNESS	  Z_CPU_INTEGRAL_ENDIANNESS(24)
#	define Z_UINT24_BITS		  24
#	define Z_UINT24_MAXIMUM		  Z_UINT24(16777215)
#	define Z_UINT24_MINIMUM		  Z_UINT24(0)

#endif

#if Z_DATA_MODEL_HAS_TYPE(SINT24)

	typedef Z_DATA_MODEL_TYPE(SINT24) zsint24;
#	define Z_SINT24			  Z_DATA_MODEL_LITERAL	  (SINT24)
#	define Z_SINT24_FUNDAMENTAL	  Z_DATA_MODEL_FUNDAMENTAL(SINT24)
#	define Z_SINT24_FIXED_FUNDAMENTAL Z_FUNDAMENTAL_SINT24
#	define Z_SINT24_NUMBER_FORMAT	  Z_CPU_INTEGER_FORMAT	   (24)
#	define Z_SINT24_ENDIANNESS	  Z_CPU_INTEGRAL_ENDIANNESS(24)
#	define Z_SINT24_BITS		  24
#	define Z_SINT24_MAXIMUM		  Z_SINT24(8388607)
#	define Z_SINT24_MINIMUM		  (-Z_SINT24_MAXIMUM - Z_SINT24(1))

#endif

#if Z_DATA_MODEL_HAS_TYPE(UINT32)

	typedef Z_DATA_MODEL_TYPE(UINT32) zuint32;
#	define Z_UINT32			  Z_DATA_MODEL_LITERAL	  (UINT32)
#	define Z_UINT32_FUNDAMENTAL	  Z_DATA_MODEL_FUNDAMENTAL(UINT32)
#	define Z_UINT32_FIXED_FUNDAMENTAL Z_FUNDAMENTAL_UINT32
#	define Z_UINT32_NUMBER_FORMAT	  Z_NUMBER_FORMAT_32BIT_NATURAL
#	define Z_UINT32_ENDIANNESS	  Z_CPU_INTEGRAL_ENDIANNESS(32)
#	define Z_UINT32_BITS		  32
#	define Z_UINT32_MAXIMUM		  Z_UINT32(4294967295)
#	define Z_UINT32_MINIMUM		  Z_UINT32(0)

#endif

#if Z_DATA_MODEL_HAS_TYPE(SINT32)

	typedef Z_DATA_MODEL_TYPE(SINT32) zsint32;
#	define Z_SINT32			  Z_DATA_MODEL_LITERAL	  (SINT32)
#	define Z_SINT32_FUNDAMENTAL	  Z_DATA_MODEL_FUNDAMENTAL(SINT32)
#	define Z_SINT32_FIXED_FUNDAMENTAL Z_FUNDAMENTAL_SINT32
#	define Z_SINT32_NUMBER_FORMAT	  Z_CPU_INTEGER_FORMAT	   (32)
#	define Z_SINT32_ENDIANNESS	  Z_CPU_INTEGRAL_ENDIANNESS(32)
#	define Z_SINT32_BITS		  32
#	define Z_SINT32_MAXIMUM		  Z_SINT32(2147483647)
#	define Z_SINT32_MINIMUM		  (-Z_SINT32_MAXIMUM - Z_SINT32(1))

#endif

#if Z_DATA_MODEL_HAS_TYPE(UINT40)

	typedef Z_DATA_MODEL_TYPE(UINT40) zuint40;
#	define Z_UINT40			  Z_DATA_MODEL_LITERAL	  (UINT40)
#	define Z_UINT40_FUNDAMENTAL	  Z_DATA_MODEL_FUNDAMENTAL(UINT40)
#	define Z_UINT40_FIXED_FUNDAMENTAL Z_FUNDAMENTAL_UINT40
#	define Z_UINT40_NUMBER_FORMAT	  Z_NUMBER_FORMAT_40BIT_NATURAL
#	define Z_UINT40_ENDIANNESS	  Z_CPU_INTEGRAL_ENDIANNESS(40)
#	define Z_UINT40_BITS		  40
#	define Z_UINT40_MAXIMUM		  Z_UINT40(1099511627775)
#	define Z_UINT40_MINIMUM		  Z_UINT40(0)

#endif

#if Z_DATA_MODEL_HAS_TYPE(SINT40)

	typedef Z_DATA_MODEL_TYPE(SINT40) zsint40;
#	define Z_SINT40			  Z_DATA_MODEL_LITERAL	  (SINT40)
#	define Z_SINT40_FUNDAMENTAL	  Z_DATA_MODEL_FUNDAMENTAL(SINT40)
#	define Z_SINT40_FIXED_FUNDAMENTAL Z_FUNDAMENTAL_SINT40
#	define Z_SINT40_NUMBER_FORMAT	  Z_CPU_INTEGER_FORMAT	   (40)
#	define Z_SINT40_ENDIANNESS	  Z_CPU_INTEGRAL_ENDIANNESS(40)
#	define Z_SINT40_BITS		  40
#	define Z_SINT40_MAXIMUM		  Z_SINT40(549755813887)
#	define Z_SINT40_MINIMUM		  (-Z_SINT40_MAXIMUM - Z_SINT40(1))

#endif

#if Z_DATA_MODEL_HAS_TYPE(UINT48)

	typedef Z_DATA_MODEL_TYPE(UINT48) zuint48;
#	define Z_UINT48			  Z_DATA_MODEL_LITERAL	  (UINT48)
#	define Z_UINT48_FUNDAMENTAL	  Z_DATA_MODEL_FUNDAMENTAL(UINT48)
#	define Z_UINT48_FIXED_FUNDAMENTAL Z_FUNDAMENTAL_UINT48
#	define Z_UINT48_NUMBER_FORMAT	  Z_NUMBER_FORMAT_48BIT_NATURAL
#	define Z_UINT48_ENDIANNESS	  Z_CPU_INTEGRAL_ENDIANNESS(48)
#	define Z_UINT48_BITS		  48
#	define Z_UINT48_MAXIMUM		  Z_UINT48(281474976710655)
#	define Z_UINT48_MINIMUM		  Z_UINT48(0)

#endif

#if Z_DATA_MODEL_HAS_TYPE(SINT48)

	typedef Z_DATA_MODEL_TYPE(SINT48) zsint48;
#	define Z_SINT48			  Z_DATA_MODEL_LITERAL	  (SINT48)
#	define Z_SINT48_FUNDAMENTAL	  Z_DATA_MODEL_FUNDAMENTAL(SINT48)
#	define Z_SINT48_FIXED_FUNDAMENTAL Z_FUNDAMENTAL_SINT48
#	define Z_SINT48_NUMBER_FORMAT	  Z_CPU_INTEGER_FORMAT	   (48)
#	define Z_SINT48_ENDIANNESS	  Z_CPU_INTEGRAL_ENDIANNESS(48)
#	define Z_SINT48_BITS		  48
#	define Z_SINT48_MAXIMUM		  Z_SINT48(140737488355327)
#	define Z_SINT48_MINIMUM		  (-Z_SINT48_MAXIMUM - Z_SINT48(1))

#endif

#if Z_DATA_MODEL_HAS_TYPE(UINT56)

	typedef Z_DATA_MODEL_TYPE(UINT56) zuint56;
#	define Z_UINT56			  Z_DATA_MODEL_LITERAL	  (UINT56)
#	define Z_UINT56_FUNDAMENTAL	  Z_DATA_MODEL_FUNDAMENTAL(UINT56)
#	define Z_UINT56_FIXED_FUNDAMENTAL Z_FUNDAMENTAL_UINT56
#	define Z_UINT56_NUMBER_FORMAT	  Z_NUMBER_FORMAT_56BIT_NATURAL
#	define Z_UINT56_ENDIANNESS	  Z_CPU_INTEGRAL_ENDIANNESS(56)
#	define Z_UINT56_BITS		  56
#	define Z_UINT56_MAXIMUM		  Z_UINT56(72057594037927935)
#	define Z_UINT56_MINIMUM		  Z_UINT56(0)

#endif

#if Z_DATA_MODEL_HAS_TYPE(SINT56)

	typedef Z_DATA_MODEL_TYPE(SINT56) zsint56;
#	define Z_SINT56			  Z_DATA_MODEL_LITERAL	  (SINT56)
#	define Z_SINT56_FUNDAMENTAL	  Z_DATA_MODEL_FUNDAMENTAL(SINT56)
#	define Z_SINT56_FIXED_FUNDAMENTAL Z_FUNDAMENTAL_SINT56
#	define Z_SINT56_NUMBER_FORMAT	  Z_CPU_INTEGER_FORMAT	   (56)
#	define Z_SINT56_ENDIANNESS	  Z_CPU_INTEGRAL_ENDIANNESS(56)
#	define Z_SINT56_BITS		  56
#	define Z_SINT56_MAXIMUM		  Z_SINT56(36028797018963967)
#	define Z_SINT56_MINIMUM		  (-Z_SINT56_MAXIMUM - Z_SINT56(1))

#endif

#if Z_DATA_MODEL_HAS_TYPE(UINT64)

	typedef Z_DATA_MODEL_TYPE(UINT64) zuint64;
#	define Z_UINT64_FUNDAMENTAL	  Z_DATA_MODEL_FUNDAMENTAL(UINT64)
#	define Z_UINT64_FIXED_FUNDAMENTAL Z_FUNDAMENTAL_UINT64
#	define Z_UINT64_NUMBER_FORMAT	  Z_NUMBER_FORMAT_64BIT_NATURAL
#	define Z_UINT64_ENDIANNESS	  Z_CPU_INTEGRAL_ENDIANNESS(64)
#	define Z_UINT64_BITS		  64

#	if Z_DATA_MODEL_HAS_LITERAL(UINT64)
#		define Z_UINT64		Z_DATA_MODEL_LITERAL(UINT64)
#		define Z_UINT64_MAXIMUM Z_UINT64(18446744073709551615)
#		define Z_UINT64_MINIMUM Z_UINT64(0)
#	else
#		define Z_UINT64		Z_SAME
#		define Z_UINT64_MAXIMUM ((zuint64)~(zuint64)0)
#		define Z_UINT64_MINIMUM ((zuint64)0)
#	endif

#endif

#if Z_DATA_MODEL_HAS_TYPE(SINT64)

	typedef Z_DATA_MODEL_TYPE(SINT64) zsint64;
#	define Z_SINT64_FUNDAMENTAL	  Z_DATA_MODEL_FUNDAMENTAL(SINT64)
#	define Z_SINT64_FIXED_FUNDAMENTAL Z_FUNDAMENTAL_SINT64
#	define Z_SINT64_NUMBER_FORMAT	  Z_CPU_INTEGER_FORMAT	   (64)
#	define Z_SINT64_ENDIANNESS	  Z_CPU_INTEGRAL_ENDIANNESS(64)
#	define Z_SINT64_BITS		  64

#	if Z_DATA_MODEL_HAS_LITERAL(SINT64)
#		define Z_SINT64		Z_DATA_MODEL_LITERAL(SINT64)
#		define Z_SINT64_MAXIMUM Z_SINT64(9223372036854775807)
#		define Z_SINT64_MINIMUM (-Z_SINT64_MAXIMUM - Z_SINT64(1))
#	else
#		define Z_SINT64		Z_SAME
#		define Z_SINT64_MAXIMUM ((zsint64)~(((zsint64)1) << 63))
#		define Z_SINT64_MINIMUM (-Z_SINT64_MAXIMUM - (zsint64)1)
#	endif

#endif

#if Z_DATA_MODEL_HAS_TYPE(UINT128)

	typedef Z_DATA_MODEL_TYPE(UINT128) zuint128;
#	define Z_UINT128_FUNDAMENTAL	   Z_DATA_MODEL_FUNDAMENTAL(UINT128)
#	define Z_UINT128_FIXED_FUNDAMENTAL Z_FUNDAMENTAL_UINT128
#	define Z_UINT128_NUMBER_FORMAT	   Z_NUMBER_FORMAT_128BIT_NATURAL
#	define Z_UINT128_ENDIANNESS	   Z_CPU_INTEGRAL_ENDIANNESS(128)
#	define Z_UINT128_BITS		   128

#	if Z_DATA_MODEL_HAS_LITERAL(UINT128)
#		define Z_UINT128	 Z_DATA_MODEL_LITERAL(UINT128)
#		define Z_UINT128_MAXIMUM Z_UINT128(340282366920938463463374607431768211455)
#		define Z_UINT128_MINIMUM Z_UINT128(0)
#	else
#		define Z_UINT128	 Z_SAME
#		define Z_UINT128_MAXIMUM ((zuint128)~(zuint128)0)
#		define Z_UINT128_MINIMUM ((zuint128)0)
#	endif

#endif

#if Z_DATA_MODEL_HAS_TYPE(SINT128)

	typedef Z_DATA_MODEL_TYPE(SINT128) zsint128;
#	define Z_SINT128_FUNDAMENTAL	   Z_DATA_MODEL_FUNDAMENTAL(SINT128)
#	define Z_SINT128_FIXED_FUNDAMENTAL Z_FUNDAMENTAL_SINT128
#	define Z_SINT128_NUMBER_FORMAT	   Z_CPU_INTEGER_FORMAT	    (128)
#	define Z_SINT128_ENDIANNESS	   Z_CPU_INTEGRAL_ENDIANNESS(128)
#	define Z_SINT128_BITS		   128

#	if Z_DATA_MODEL_HAS_LITERAL(SINT128)
#		define Z_SINT128	 Z_DATA_MODEL_LITERAL(SINT128)
#		define Z_SINT128_MAXIMUM Z_SINT128(170141183460469231731687303715884105727)
#		define Z_SINT128_MINIMUM (-Z_SINT128_MAXIMUM - Z_SINT128(1))
#	else
#		define Z_SINT128	 Z_SAME
#		define Z_SINT128_MAXIMUM ((zsint128)~(((zsint128)1) << 127))
#		define Z_SINT128_MINIMUM (-Z_SINT128_MAXIMUM - (zsint128)1)
#	endif

#endif

/* MARK: - Fixed format real types */

#if Z_FLOATING_POINT_HAS_TYPE(BFP16)

	typedef Z_FLOATING_POINT_TYPE(BFP16) zbfp16;
#	define Z_BFP16			     Z_FLOATING_POINT_LITERAL	 (BFP16)
#	define Z_BFP16_FUNDAMENTAL	     Z_FLOATING_POINT_FUNDAMENTAL(BFP16)
#	define Z_BFP16_FIXED_FUNDAMENTAL     Z_FUNDAMENTAL_BFP16
#	define Z_BFP16_NUMBER_FORMAT	     Z_NUMBER_FORMAT_IEEE_754_BINARY16
#	define Z_BFP16_BITS		     16
#	define Z_BFP16_DIGITS_10	     Z_IEEE_754_BINARY16_DIGITS_10
#	define Z_BFP16_MAXIMUM_DIGITS_10     Z_IEEE_754_BINARY16_MAXIMUM_DIGITS_10
#	define Z_BFP16_RADIX		     Z_IEEE_754_BINARY16_RADIX
#	define Z_BFP16_SIGNIFICAND_DIGITS    Z_IEEE_754_BINARY16_SIGNIFICAND_DIGITS
#	define Z_BFP16_EXPONENT_MAXIMUM	     Z_IEEE_754_BINARY16_EXPONENT_MAXIMUM
#	define Z_BFP16_EXPONENT_MINIMUM	     Z_IEEE_754_BINARY16_EXPONENT_MINIMUM
#	define Z_BFP16_EXPONENT_10_MAXIMUM   Z_IEEE_754_BINARY16_EXPONENT_10_MAXIMUM
#	define Z_BFP16_EXPONENT_10_MINIMUM   Z_IEEE_754_BINARY16_EXPONENT_10_MINIMUM
#	define Z_BFP16_EPSILON		     Z_BFP16(Z_IEEE_754_BINARY16_EPSILON)
#	define Z_BFP16_MAXIMUM		     Z_BFP16(Z_IEEE_754_BINARY16_MAXIMUM)
#	define Z_BFP16_MINIMUM		     Z_BFP16(Z_IEEE_754_BINARY16_MINIMUM)
#	define Z_BFP16_DENORMAL_MINIMUM	     Z_BFP16(Z_IEEE_754_BINARY16_DENORMAL_MINIMUM)

#	if Z_FLOATING_POINT_HAS_INFINITY(BFP16)
#		define Z_BFP16_INFINITY Z_FLOATING_POINT_INFINITY(BFP16)
#	endif

#	if Z_FLOATING_POINT_HAS_NAN(BFP16)
#		define Z_BFP16_NAN Z_FLOATING_POINT_NAN(BFP16)
#	endif

#	if Z_FLOATING_POINT_HAS_QUIET_NAN(BFP16)
#		define Z_BFP16_QUIET_NAN Z_FLOATING_POINT_QUIET_NAN(BFP16)
#	endif

#endif

#if Z_FLOATING_POINT_HAS_TYPE(BFP32)

	typedef Z_FLOATING_POINT_TYPE(BFP32) zbfp32;
#	define Z_BFP32			     Z_FLOATING_POINT_LITERAL	 (BFP32)
#	define Z_BFP32_FUNDAMENTAL	     Z_FLOATING_POINT_FUNDAMENTAL(BFP32)
#	define Z_BFP32_FIXED_FUNDAMENTAL     Z_FUNDAMENTAL_BFP32
#	define Z_BFP32_NUMBER_FORMAT	     Z_NUMBER_FORMAT_IEEE_754_BINARY32
#	define Z_BFP32_BITS		     32
#	define Z_BFP32_DIGITS_10	     Z_IEEE_754_BINARY32_DIGITS_10
#	define Z_BFP32_MAXIMUM_DIGITS_10     Z_IEEE_754_BINARY32_MAXIMUM_DIGITS_10
#	define Z_BFP32_RADIX		     Z_IEEE_754_BINARY32_RADIX
#	define Z_BFP32_SIGNIFICAND_DIGITS    Z_IEEE_754_BINARY32_SIGNIFICAND_DIGITS
#	define Z_BFP32_EXPONENT_MAXIMUM	     Z_IEEE_754_BINARY32_EXPONENT_MAXIMUM
#	define Z_BFP32_EXPONENT_MINIMUM	     Z_IEEE_754_BINARY32_EXPONENT_MINIMUM
#	define Z_BFP32_EXPONENT_10_MAXIMUM   Z_IEEE_754_BINARY32_EXPONENT_10_MAXIMUM
#	define Z_BFP32_EXPONENT_10_MINIMUM   Z_IEEE_754_BINARY32_EXPONENT_10_MINIMUM
#	define Z_BFP32_EPSILON		     Z_BFP32(Z_IEEE_754_BINARY32_EPSILON)
#	define Z_BFP32_MAXIMUM		     Z_BFP32(Z_IEEE_754_BINARY32_MAXIMUM)
#	define Z_BFP32_MINIMUM		     Z_BFP32(Z_IEEE_754_BINARY32_MINIMUM)
#	define Z_BFP32_DENORMAL_MINIMUM	     Z_BFP32(Z_IEEE_754_BINARY32_DENORMAL_MINIMUM)

#	if Z_FLOATING_POINT_HAS_INFINITY(BFP32)
#		define Z_BFP32_INFINITY Z_FLOATING_POINT_INFINITY(BFP32)
#	endif

#	if Z_FLOATING_POINT_HAS_NAN(BFP32)
#		define Z_BFP32_NAN Z_FLOATING_POINT_NAN(BFP32)
#	endif

#	if Z_FLOATING_POINT_HAS_QUIET_NAN(BFP32)
#		define Z_BFP32_QUIET_NAN Z_FLOATING_POINT_QUIET_NAN(BFP32)
#	endif

#endif

#if Z_FLOATING_POINT_HAS_TYPE(BFP64)

	typedef Z_FLOATING_POINT_TYPE(BFP64) zbfp64;
#	define Z_BFP64			     Z_FLOATING_POINT_LITERAL	 (BFP64)
#	define Z_BFP64_FUNDAMENTAL	     Z_FLOATING_POINT_FUNDAMENTAL(BFP64)
#	define Z_BFP64_FIXED_FUNDAMENTAL     Z_FUNDAMENTAL_BFP64
#	define Z_BFP64_NUMBER_FORMAT	     Z_NUMBER_FORMAT_IEEE_754_BINARY64
#	define Z_BFP64_BITS		     64
#	define Z_BFP64_DIGITS_10	     Z_IEEE_754_BINARY64_DIGITS_10
#	define Z_BFP64_MAXIMUM_DIGITS_10     Z_IEEE_754_BINARY64_MAXIMUM_DIGITS_10
#	define Z_BFP64_RADIX		     Z_IEEE_754_BINARY64_RADIX
#	define Z_BFP64_SIGNIFICAND_DIGITS    Z_IEEE_754_BINARY64_SIGNIFICAND_DIGITS
#	define Z_BFP64_EXPONENT_MAXIMUM	     Z_IEEE_754_BINARY64_EXPONENT_MAXIMUM
#	define Z_BFP64_EXPONENT_MINIMUM	     Z_IEEE_754_BINARY64_EXPONENT_MINIMUM
#	define Z_BFP64_EXPONENT_10_MAXIMUM   Z_IEEE_754_BINARY64_EXPONENT_10_MAXIMUM
#	define Z_BFP64_EXPONENT_10_MINIMUM   Z_IEEE_754_BINARY64_EXPONENT_10_MINIMUM
#	define Z_BFP64_EPSILON		     Z_BFP64(Z_IEEE_754_BINARY64_EPSILON)
#	define Z_BFP64_MAXIMUM		     Z_BFP64(Z_IEEE_754_BINARY64_MAXIMUM)
#	define Z_BFP64_MINIMUM		     Z_BFP64(Z_IEEE_754_BINARY64_MINIMUM)
#	define Z_BFP64_DENORMAL_MINIMUM	     Z_BFP64(Z_IEEE_754_BINARY64_DENORMAL_MINIMUM)

#if	Z_FLOATING_POINT_HAS_INFINITY(BFP64)
#		define Z_BFP64_INFINITY Z_FLOATING_POINT_INFINITY(BFP64)
#	endif

#if	Z_FLOATING_POINT_HAS_NAN(BFP64)
#		define Z_BFP64_NAN Z_FLOATING_POINT_NAN(BFP64)
#	endif

#	if Z_FLOATING_POINT_HAS_QUIET_NAN(BFP64)
#		define Z_BFP64_QUIET_NAN Z_FLOATING_POINT_QUIET_NAN(BFP64)
#	endif

#endif

#if Z_FLOATING_POINT_HAS_TYPE(BFP128)

	typedef Z_FLOATING_POINT_TYPE(BFP128) zbfp128;
#	define Z_BFP128			      Z_FLOATING_POINT_LITERAL	  (BFP128)
#	define Z_BFP128_FUNDAMENTAL	      Z_FLOATING_POINT_FUNDAMENTAL(BFP128)
#	define Z_BFP128_FIXED_FUNDAMENTAL     Z_FUNDAMENTAL_BFP128
#	define Z_BFP128_NUMBER_FORMAT	      Z_NUMBER_FORMAT_IEEE_754_BINARY128
#	define Z_BFP128_BITS		      128
#	define Z_BFP128_DIGITS_10	      Z_IEEE_754_BINARY128_DIGITS_10
#	define Z_BFP128_MAXIMUM_DIGITS_10     Z_IEEE_754_BINARY128_MAXIMUM_DIGITS_10
#	define Z_BFP128_RADIX		      Z_IEEE_754_BINARY128_RADIX
#	define Z_BFP128_SIGNIFICAND_DIGITS    Z_IEEE_754_BINARY128_SIGNIFICAND_DIGITS
#	define Z_BFP128_EXPONENT_MAXIMUM      Z_IEEE_754_BINARY128_EXPONENT_MAXIMUM
#	define Z_BFP128_EXPONENT_MINIMUM      Z_IEEE_754_BINARY128_EXPONENT_MINIMUM
#	define Z_BFP128_EXPONENT_10_MAXIMUM   Z_IEEE_754_BINARY128_EXPONENT_10_MAXIMUM
#	define Z_BFP128_EXPONENT_10_MINIMUM   Z_IEEE_754_BINARY128_EXPONENT_10_MINIMUM
#	define Z_BFP128_EPSILON		      Z_BFP128(Z_IEEE_754_BINARY128_EPSILON)
#	define Z_BFP128_MAXIMUM		      Z_BFP128(Z_IEEE_754_BINARY128_MAXIMUM)
#	define Z_BFP128_MINIMUM		      Z_BFP128(Z_IEEE_754_BINARY128_MINIMUM)
#	define Z_BFP128_DENORMAL_MINIMUM      Z_BFP128(Z_IEEE_754_BINARY128_DENORMAL_MINIMUM)

#	if Z_FLOATING_POINT_HAS_INFINITY(BFP128)
#		define Z_BFP128_INFINITY Z_FLOATING_POINT_INFINITY(BFP128)
#	endif

#	if Z_FLOATING_POINT_HAS_NAN(BFP128)
#		define Z_BFP128_NAN Z_FLOATING_POINT_NAN(BFP128)
#	endif

#	if Z_FLOATING_POINT_HAS_QUIET_NAN(BFP128)
#		define Z_BFP128_QUIET_NAN Z_FLOATING_POINT_QUIET_NAN(BFP128)
#	endif

#endif

#if Z_FLOATING_POINT_HAS_TYPE(DFP32)

	typedef Z_FLOATING_POINT_TYPE(DFP32) zdfp32;
#	define Z_DFP32			     Z_FLOATING_POINT_LITERAL	 (DFP32)
#	define Z_DFP32_FUNDAMENTAL	     Z_FLOATING_POINT_FUNDAMENTAL(DFP32)
#	define Z_DFP32_FIXED_FUNDAMENTAL     Z_FUNDAMENTAL_DFP32
#	define Z_DFP32_NUMBER_FORMAT	     Z_NUMBER_FORMAT_IEEE_754_DECIMAL32
#	define Z_DFP32_BITS		     32
#	define Z_DFP32_DIGITS_10	     Z_IEEE_754_DECIMAL32_DIGITS_10
#	define Z_DFP32_MAXIMUM_DIGITS_10     Z_IEEE_754_DECIMAL32_MAXIMUM_DIGITS_10
#	define Z_DFP32_RADIX		     Z_IEEE_754_DECIMAL32_RADIX
#	define Z_DFP32_SIGNIFICAND_DIGITS    Z_IEEE_754_DECIMAL32_SIGNIFICAND_DIGITS
#	define Z_DFP32_EXPONENT_MAXIMUM	     Z_IEEE_754_DECIMAL32_EXPONENT_MAXIMUM
#	define Z_DFP32_EXPONENT_MINIMUM	     Z_IEEE_754_DECIMAL32_EXPONENT_MINIMUM
#	define Z_DFP32_EXPONENT_10_MAXIMUM   Z_IEEE_754_DECIMAL32_EXPONENT_10_MAXIMUM
#	define Z_DFP32_EXPONENT_10_MINIMUM   Z_IEEE_754_DECIMAL32_EXPONENT_10_MINIMUM
#	define Z_DFP32_EPSILON		     Z_DFP32(Z_IEEE_754_DECIMAL32_EPSILON)
#	define Z_DFP32_MAXIMUM		     Z_DFP32(Z_IEEE_754_DECIMAL32_MAXIMUM)
#	define Z_DFP32_MINIMUM		     Z_DFP32(Z_IEEE_754_DECIMAL32_MINIMUM)
#	define Z_DFP32_DENORMAL_MINIMUM	     Z_DFP32(Z_IEEE_754_DECIMAL32_DENORMAL_MINIMUM)

#	if Z_FLOATING_POINT_HAS_INFINITY(DFP32)
#		define Z_DFP32_INFINITY Z_FLOATING_POINT_INFINITY(DFP32)
#	endif

#	if Z_FLOATING_POINT_HAS_NAN(DFP32)
#		define Z_DFP32_NAN Z_FLOATING_POINT_NAN(DFP32)
#	endif

#	if Z_FLOATING_POINT_HAS_QUIET_NAN(DFP32)
#		define Z_DFP32_QUIET_NAN Z_FLOATING_POINT_QUIET_NAN(DFP32)
#	endif

#endif

#if Z_FLOATING_POINT_HAS_TYPE(DFP64)

	typedef Z_FLOATING_POINT_TYPE(DFP64) zdfp64;
#	define Z_DFP64			     Z_FLOATING_POINT_LITERAL	 (DFP64)
#	define Z_DFP64_FUNDAMENTAL	     Z_FLOATING_POINT_FUNDAMENTAL(DFP64)
#	define Z_DFP64_FIXED_FUNDAMENTAL     Z_FUNDAMENTAL_DFP64
#	define Z_DFP64_NUMBER_FORMAT	     Z_NUMBER_FORMAT_IEEE_754_DECIMAL64
#	define Z_DFP64_BITS		     64
#	define Z_DFP64_DIGITS_10	     Z_IEEE_754_DECIMAL64_DIGITS_10
#	define Z_DFP64_MAXIMUM_DIGITS_10     Z_IEEE_754_DECIMAL64_MAXIMUM_DIGITS_10
#	define Z_DFP64_RADIX		     Z_IEEE_754_DECIMAL64_RADIX
#	define Z_DFP64_SIGNIFICAND_DIGITS    Z_IEEE_754_DECIMAL64_SIGNIFICAND_DIGITS
#	define Z_DFP64_EXPONENT_MAXIMUM	     Z_IEEE_754_DECIMAL64_EXPONENT_MAXIMUM
#	define Z_DFP64_EXPONENT_MINIMUM	     Z_IEEE_754_DECIMAL64_EXPONENT_MINIMUM
#	define Z_DFP64_EXPONENT_10_MAXIMUM   Z_IEEE_754_DECIMAL64_EXPONENT_10_MAXIMUM
#	define Z_DFP64_EXPONENT_10_MINIMUM   Z_IEEE_754_DECIMAL64_EXPONENT_10_MINIMUM
#	define Z_DFP64_EPSILON		     Z_DFP64(Z_IEEE_754_DECIMAL64_EPSILON)
#	define Z_DFP64_MAXIMUM		     Z_DFP64(Z_IEEE_754_DECIMAL64_MAXIMUM)
#	define Z_DFP64_MINIMUM		     Z_DFP64(Z_IEEE_754_DECIMAL64_MINIMUM)
#	define Z_DFP64_DENORMAL_MINIMUM	     Z_DFP64(Z_IEEE_754_DECIMAL64_DENORMAL_MINIMUM)

#	if Z_FLOATING_POINT_HAS_INFINITY(DFP64)
#		define Z_DFP64_INFINITY Z_FLOATING_POINT_INFINITY(DFP64)
#	endif

#	if Z_FLOATING_POINT_HAS_NAN(DFP64)
#		define Z_DFP64_NAN Z_FLOATING_POINT_NAN(DFP64)
#	endif

#	if Z_FLOATING_POINT_HAS_QUIET_NAN(DFP64)
#		define Z_DFP64_QUIET_NAN Z_FLOATING_POINT_QUIET_NAN(DFP64)
#	endif

#endif

#if Z_FLOATING_POINT_HAS_TYPE(DFP128)

	typedef Z_FLOATING_POINT_TYPE(DFP128) zdfp128;
#	define Z_DFP128			      Z_FLOATING_POINT_LITERAL	  (DFP128)
#	define Z_DFP128_FUNDAMENTAL	      Z_FLOATING_POINT_FUNDAMENTAL(DFP128)
#	define Z_DFP128_FIXED_FUNDAMENTAL     Z_FUNDAMENTAL_DFP128
#	define Z_DFP128_NUMBER_FORMAT	      Z_NUMBER_FORMAT_IEEE_754_DECIMAL128
#	define Z_DFP128_BITS		      128
#	define Z_DFP128_DIGITS_10	      Z_IEEE_754_DECIMAL128_DIGITS_10
#	define Z_DFP128_MAXIMUM_DIGITS_10     Z_IEEE_754_DECIMAL128_MAXIMUM_DIGITS_10
#	define Z_DFP128_RADIX		      Z_IEEE_754_DECIMAL128_RADIX
#	define Z_DFP128_SIGNIFICAND_DIGITS    Z_IEEE_754_DECIMAL128_SIGNIFICAND_DIGITS
#	define Z_DFP128_EXPONENT_MAXIMUM      Z_IEEE_754_DECIMAL128_EXPONENT_MAXIMUM
#	define Z_DFP128_EXPONENT_MINIMUM      Z_IEEE_754_DECIMAL128_EXPONENT_MINIMUM
#	define Z_DFP128_EXPONENT_10_MAXIMUM   Z_IEEE_754_DECIMAL128_EXPONENT_10_MAXIMUM
#	define Z_DFP128_EXPONENT_10_MINIMUM   Z_IEEE_754_DECIMAL128_EXPONENT_10_MINIMUM
#	define Z_DFP128_EPSILON		      Z_DFP128(Z_IEEE_754_DECIMAL128_EPSILON)
#	define Z_DFP128_MAXIMUM		      Z_DFP128(Z_IEEE_754_DECIMAL128_MAXIMUM)
#	define Z_DFP128_MINIMUM		      Z_DFP128(Z_IEEE_754_DECIMAL128_MINIMUM)
#	define Z_DFP128_DENORMAL_MINIMUM      Z_DFP128(Z_IEEE_754_DECIMAL128_DENORMAL_MINIMUM)

#	if Z_FLOATING_POINT_HAS_INFINITY(DFP128)
#		define Z_DFP128_INFINITY Z_FLOATING_POINT_INFINITY(DFP128)
#	endif

#	if Z_FLOATING_POINT_HAS_NAN(DFP128)
#		define Z_DFP128_NAN Z_FLOATING_POINT_NAN(DFP128)
#	endif

#	if Z_FLOATING_POINT_HAS_QUIET_NAN(DFP128)
#		define Z_DFP128_QUIET_NAN Z_FLOATING_POINT_QUIET_NAN(DFP128)
#	endif

#endif

#if Z_FLOATING_POINT_HAS_TYPE(X87_DE80)

	typedef Z_FLOATING_POINT_TYPE(X87_DE80) zx87_de80;
#	define Z_X87_DE80			Z_FLOATING_POINT_LITERAL    (X87_DE80)
#	define Z_X87_DE80_FUNDAMENTAL		Z_FLOATING_POINT_FUNDAMENTAL(X87_DE80)
#	define Z_X87_DE80_FIXED_FUNDAMENTAL	Z_FUNDAMENTAL_X87_DE80
#	define Z_X87_DE80_NUMBER_FORMAT		Z_NUMBER_FORMAT_X87_80BIT_DOUBLE_EXTENDED
#	define Z_X87_DE80_BITS			80
#	define Z_X87_DE80_DIGITS_10		Z_X87_DOUBLE_EXTENDED_DIGITS_10
#	define Z_X87_DE80_MAXIMUM_DIGITS_10	Z_X87_DOUBLE_EXTENDED_MAXIMUM_DIGITS_10
#	define Z_X87_DE80_RADIX			Z_X87_DOUBLE_EXTENDED_RADIX
#	define Z_X87_DE80_SIGNIFICAND_DIGITS	Z_X87_DOUBLE_EXTENDED_SIGNIFICAND_DIGITS
#	define Z_X87_DE80_EXPONENT_MAXIMUM	Z_X87_DOUBLE_EXTENDED_EXPONENT_MAXIMUM
#	define Z_X87_DE80_EXPONENT_MINIMUM	Z_X87_DOUBLE_EXTENDED_EXPONENT_MINIMUM
#	define Z_X87_DE80_EXPONENT_10_MAXIMUM	Z_X87_DOUBLE_EXTENDED_EXPONENT_10_MAXIMUM
#	define Z_X87_DE80_EXPONENT_10_MINIMUM	Z_X87_DOUBLE_EXTENDED_EXPONENT_10_MINIMUM
#	define Z_X87_DE80_EPSILON		Z_X87_DE80(Z_X87_DOUBLE_EXTENDED_EPSILON)
#	define Z_X87_DE80_MAXIMUM		Z_X87_DE80(Z_X87_DOUBLE_EXTENDED_MAXIMUM)
#	define Z_X87_DE80_MINIMUM		Z_X87_DE80(Z_X87_DOUBLE_EXTENDED_MINIMUM)
#	define Z_X87_DE80_DENORMAL_MINIMUM	Z_X87_DE80(Z_X87_DOUBLE_EXTENDED_DENORMAL_MINIMUM)

#	if Z_FLOATING_POINT_HAS_INFINITY(X87_DE80)
#		define Z_X87_DE80_INFINITY Z_FLOATING_POINT_INFINITY(X87_DE80)
#	endif

#	if Z_FLOATING_POINT_HAS_NAN(X87_DE80)
#		define Z_X87_DE80_NAN Z_FLOATING_POINT_NAN(X87_DE80)
#	endif

#	if Z_FLOATING_POINT_HAS_QUIET_NAN(X87_DE80)
#		define Z_X87_DE80_QUIET_NAN Z_FLOATING_POINT_QUIET_NAN(X87_DE80)
#	endif

#endif

#if Z_FLOATING_POINT_HAS_TYPE(X87_DE96)

	typedef Z_FLOATING_POINT_TYPE(X87_DE96) zx87_de96;
#	define Z_X87_DE96			Z_FLOATING_POINT_LITERAL    (X87_DE96)
#	define Z_X87_DE96_FUNDAMENTAL		Z_FLOATING_POINT_FUNDAMENTAL(X87_DE96)
#	define Z_X87_DE96_FIXED_FUNDAMENTAL	Z_FUNDAMENTAL_X87_DE96
#	define Z_X87_DE96_NUMBER_FORMAT		Z_NUMBER_FORMAT_X87_96BIT_DOUBLE_EXTENDED
#	define Z_X87_DE96_BITS			96
#	define Z_X87_DE96_DIGITS_10		Z_X87_DOUBLE_EXTENDED_DIGITS_10
#	define Z_X87_DE96_MAXIMUM_DIGITS_10	Z_X87_DOUBLE_EXTENDED_MAXIMUM_DIGITS_10
#	define Z_X87_DE96_RADIX			Z_X87_DOUBLE_EXTENDED_RADIX
#	define Z_X87_DE96_SIGNIFICAND_DIGITS	Z_X87_DOUBLE_EXTENDED_SIGNIFICAND_DIGITS
#	define Z_X87_DE96_EXPONENT_MAXIMUM	Z_X87_DOUBLE_EXTENDED_EXPONENT_MAXIMUM
#	define Z_X87_DE96_EXPONENT_MINIMUM	Z_X87_DOUBLE_EXTENDED_EXPONENT_MINIMUM
#	define Z_X87_DE96_EXPONENT_10_MAXIMUM	Z_X87_DOUBLE_EXTENDED_EXPONENT_10_MAXIMUM
#	define Z_X87_DE96_EXPONENT_10_MINIMUM	Z_X87_DOUBLE_EXTENDED_EXPONENT_10_MINIMUM
#	define Z_X87_DE96_EPSILON		Z_X87_DE96(Z_X87_DOUBLE_EXTENDED_EPSILON)
#	define Z_X87_DE96_MAXIMUM		Z_X87_DE96(Z_X87_DOUBLE_EXTENDED_MAXIMUM)
#	define Z_X87_DE96_MINIMUM		Z_X87_DE96(Z_X87_DOUBLE_EXTENDED_MINIMUM)
#	define Z_X87_DE96_DENORMAL_MINIMUM	Z_X87_DE96(Z_X87_DOUBLE_EXTENDED_DENORMAL_MINIMUM)

#	if Z_FLOATING_POINT_HAS_INFINITY(X87_DE96)
#		define Z_X87_DE96_INFINITY Z_FLOATING_POINT_INFINITY(X87_DE96)
#	endif

#	if Z_FLOATING_POINT_HAS_NAN(X87_DE96)
#		define Z_X87_DE96_NAN Z_FLOATING_POINT_NAN(X87_DE96)
#	endif

#	if Z_FLOATING_POINT_HAS_QUIET_NAN(X87_DE96)
#		define Z_X87_DE96_QUIET_NAN Z_FLOATING_POINT_QUIET_NAN(X87_DE96)
#	endif

#endif

#if Z_FLOATING_POINT_HAS_TYPE(X87_DE128)

	typedef Z_FLOATING_POINT_TYPE(X87_DE128) zx87_de128;
#	define Z_X87_DE128			 Z_FLOATING_POINT_LITERAL    (X87_DE128)
#	define Z_X87_DE128_FUNDAMENTAL		 Z_FLOATING_POINT_FUNDAMENTAL(X87_DE128)
#	define Z_X87_DE128_FIXED_FUNDAMENTAL	 Z_FUNDAMENTAL_X87_DE128
#	define Z_X87_DE128_NUMBER_FORMAT	 Z_NUMBER_FORMAT_X87_128BIT_DOUBLE_EXTENDED
#	define Z_X87_DE128_BITS			 128
#	define Z_X87_DE128_DIGITS_10		 Z_X87_DOUBLE_EXTENDED_DIGITS_10
#	define Z_X87_DE128_MAXIMUM_DIGITS_10	 Z_X87_DOUBLE_EXTENDED_MAXIMUM_DIGITS_10
#	define Z_X87_DE128_RADIX		 Z_X87_DOUBLE_EXTENDED_RADIX
#	define Z_X87_DE128_SIGNIFICAND_DIGITS	 Z_X87_DOUBLE_EXTENDED_SIGNIFICAND_DIGITS
#	define Z_X87_DE128_EXPONENT_MAXIMUM	 Z_X87_DOUBLE_EXTENDED_EXPONENT_MAXIMUM
#	define Z_X87_DE128_EXPONENT_MINIMUM	 Z_X87_DOUBLE_EXTENDED_EXPONENT_MINIMUM
#	define Z_X87_DE128_EXPONENT_10_MAXIMUM	 Z_X87_DOUBLE_EXTENDED_EXPONENT_10_MAXIMUM
#	define Z_X87_DE128_EXPONENT_10_MINIMUM	 Z_X87_DOUBLE_EXTENDED_EXPONENT_10_MINIMUM
#	define Z_X87_DE128_EPSILON		 Z_X87_DE128(Z_X87_DOUBLE_EXTENDED_EPSILON)
#	define Z_X87_DE128_MAXIMUM		 Z_X87_DE128(Z_X87_DOUBLE_EXTENDED_MAXIMUM)
#	define Z_X87_DE128_MINIMUM		 Z_X87_DE128(Z_X87_DOUBLE_EXTENDED_MINIMUM)
#	define Z_X87_DE128_DENORMAL_MINIMUM	 Z_X87_DE128(Z_X87_DOUBLE_EXTENDED_DENORMAL_MINIMUM)

#	if Z_FLOATING_POINT_HAS_INFINITY(X87_DE128)
#		define Z_X87_DE128_INFINITY Z_FLOATING_POINT_INFINITY(X87_DE128)
#	endif

#	if Z_FLOATING_POINT_HAS_NAN(X87_DE128)
#		define Z_X87_DE128_NAN Z_FLOATING_POINT_NAN(X87_DE128)
#	endif

#	if Z_FLOATING_POINT_HAS_QUIET_NAN(X87_DE128)
#		define Z_X87_DE128_QUIET_NAN Z_FLOATING_POINT_QUIET_NAN(X87_DE128)
#	endif

#endif

/* MARK: - Selection macros */

#define zuintn(			  TYPE) Z_JOIN_2(Z_APPEND_NUMBER_, Z_##TYPE##_BITS)(zuint)
#define zsintn(			  TYPE) Z_JOIN_2(Z_APPEND_NUMBER_, Z_##TYPE##_BITS)(zsint)
#define Z_UINTN_FIXED_FUNDAMENTAL(TYPE) Z_JOIN_2(Z_INSERT_NUMBER_, Z_##TYPE##_BITS)(Z_UINT, _FIXED_FUNDAMENTAL)
#define Z_SINTN_FIXED_FUNDAMENTAL(TYPE) Z_JOIN_2(Z_INSERT_NUMBER_, Z_##TYPE##_BITS)(Z_SINT, _FIXED_FUNDAMENTAL)

#define ztype(			   TYPE) Z_APPEND_fixed_type(Z_##TYPE)(z)
#define Z_TYPE_FUNDAMENTAL(	   TYPE) Z_INSERT_FIXED_TYPE(Z_##TYPE)(Z_, _FUNDAMENTAL	       )
#define Z_TYPE_ENDIANNESS(	   TYPE) Z_INSERT_FIXED_TYPE(Z_##TYPE)(Z_, _ENDIANNESS	       )
#define Z_TYPE_NUMBER_FORMAT(	   TYPE) Z_INSERT_FIXED_TYPE(Z_##TYPE)(Z_, _NUMBER_FORMAT      )
#define Z_TYPE_BITS(		   TYPE) Z_INSERT_FIXED_TYPE(Z_##TYPE)(Z_, _BITS	       )
#define Z_TYPE_DIGITS_10(	   TYPE) Z_INSERT_FIXED_TYPE(Z_##TYPE)(Z_, _DIGITS_10	       )
#define Z_TYPE_MAXIMUM_DIGITS_10(  TYPE) Z_INSERT_FIXED_TYPE(Z_##TYPE)(Z_, _MAXIMUM_DIGITS_10  )
#define Z_TYPE_RADIX(		   TYPE) Z_INSERT_FIXED_TYPE(Z_##TYPE)(Z_, _RADIX	       )
#define Z_TYPE_SIGNIFICAND_DIGITS( TYPE) Z_INSERT_FIXED_TYPE(Z_##TYPE)(Z_, _SIGNIFICAND_DIGITS )
#define Z_TYPE_EXPONENT_MAXIMUM(   TYPE) Z_INSERT_FIXED_TYPE(Z_##TYPE)(Z_, _EXPONENT_MAXIMUM   )
#define Z_TYPE_EXPONENT_MINIMUM(   TYPE) Z_INSERT_FIXED_TYPE(Z_##TYPE)(Z_, _EXPONENT_MINIMUM   )
#define Z_TYPE_EXPONENT_10_MAXIMUM(TYPE) Z_INSERT_FIXED_TYPE(Z_##TYPE)(Z_, _EXPONENT_10_MAXIMUM)
#define Z_TYPE_EXPONENT_10_MINIMUM(TYPE) Z_INSERT_FIXED_TYPE(Z_##TYPE)(Z_, _EXPONENT_10_MINIMUM)

#define Z_TYPE_EPSILON(		TYPE) Z_##TYPE(Z_INSERT_NUMBER_FORMAT(Z_##TYPE)(Z_, _EPSILON	     ))
#define Z_TYPE_MAXIMUM(		TYPE) Z_##TYPE(Z_INSERT_NUMBER_FORMAT(Z_##TYPE)(Z_, _MAXIMUM	     ))
#define Z_TYPE_MINIMUM(		TYPE) Z_##TYPE(Z_INSERT_NUMBER_FORMAT(Z_##TYPE)(Z_, _MINIMUM	     ))
#define Z_TYPE_DENORMAL_MINIMUM(TYPE) Z_##TYPE(Z_INSERT_NUMBER_FORMAT(Z_##TYPE)(Z_, _DENORMAL_MINIMUM))

/* MARK: - Integral types with at least a certain width */

#if defined(Z_UINT8)
#	define Z_UINT_LEAST8_BITS 8

#elif defined(Z_UINT16)
#	define Z_UINT_LEAST8_BITS 16

#elif defined(Z_UINT24)
#	define Z_UINT_LEAST8_BITS 24

#elif defined(Z_UINT32)
#	define Z_UINT_LEAST8_BITS 32

#elif defined(Z_UINT40)
#	define Z_UINT_LEAST8_BITS 40

#elif defined(Z_UINT48)
#	define Z_UINT_LEAST8_BITS 48

#elif defined(Z_UINT56)
#	define Z_UINT_LEAST8_BITS 56

#elif defined(Z_UINT64)
#	define Z_UINT_LEAST8_BITS 64

#elif defined(Z_UINT128)
#	define Z_UINT_LEAST8_BITS 128
#endif

typedef zuintn(UINT_LEAST8)		zuint_least8;
#define Z_UINT_LEAST8			Z_TYPE			 (UINT_LEAST8)
#define Z_UINT_LEAST8_FUNDAMENTAL	Z_TYPE_FUNDAMENTAL	 (UINT_LEAST8)
#define Z_UINT_LEAST8_FIXED_FUNDAMENTAL Z_UINTN_FIXED_FUNDAMENTAL(UINT_LEAST8)
#define Z_UINT_LEAST8_NUMBER_FORMAT	Z_TYPE_NUMBER_FORMAT	 (UINT_LEAST8)
#define Z_UINT_LEAST8_ENDIANNESS	Z_TYPE_ENDIANNESS	 (UINT_LEAST8)
#define Z_UINT_LEAST8_MAXIMUM		Z_TYPE_MAXIMUM		 (UINT_LEAST8)
#define Z_UINT_LEAST8_MINIMUM		Z_TYPE_MINIMUM		 (UINT_LEAST8)

#if defined(Z_SINT8)
#	define Z_SINT_LEAST8_BITS 8

#elif defined(Z_UINT16)
#	define Z_SINT_LEAST8_BITS 16

#elif defined(Z_SINT24)
#	define Z_SINT_LEAST8_BITS 24

#elif defined(Z_SINT32)
#	define Z_SINT_LEAST8_BITS 32

#elif defined(Z_SINT40)
#	define Z_SINT_LEAST8_BITS 40

#elif defined(Z_SINT48)
#	define Z_SINT_LEAST8_BITS 48

#elif defined(Z_SINT56)
#	define Z_SINT_LEAST8_BITS 56

#elif defined(Z_SINT64)
#	define Z_SINT_LEAST8_BITS 64

#elif defined(Z_SINT128)
#	define Z_SINT_LEAST8_BITS 128
#endif

typedef zsintn(SINT_LEAST8)		zsint_least8;
#define Z_SINT_LEAST8			Z_TYPE			 (SINT_LEAST8)
#define Z_SINT_LEAST8_FUNDAMENTAL	Z_TYPE_FUNDAMENTAL	 (SINT_LEAST8)
#define Z_SINT_LEAST8_FIXED_FUNDAMENTAL Z_SINTN_FIXED_FUNDAMENTAL(SINT_LEAST8)
#define Z_SINT_LEAST8_NUMBER_FORMAT	Z_TYPE_NUMBER_FORMAT	 (SINT_LEAST8)
#define Z_SINT_LEAST8_ENDIANNESS	Z_TYPE_ENDIANNESS	 (SINT_LEAST8)
#define Z_SINT_LEAST8_MAXIMUM		Z_TYPE_MAXIMUM		 (SINT_LEAST8)
#define Z_SINT_LEAST8_MINIMUM		Z_TYPE_MINIMUM		 (SINT_LEAST8)

#if defined(Z_UINT16)
#	define Z_UINT_LEAST16_BITS 16

#elif defined(Z_UINT24)
#	define Z_UINT_LEAST16_BITS 24

#elif defined(Z_UINT32)
#	define Z_UINT_LEAST16_BITS 32

#elif defined(Z_UINT40)
#	define Z_UINT_LEAST16_BITS 40

#elif defined(Z_UINT48)
#	define Z_UINT_LEAST16_BITS 48

#elif defined(Z_UINT56)
#	define Z_UINT_LEAST16_BITS 56

#elif defined(Z_UINT64)
#	define Z_UINT_LEAST16_BITS 64

#elif defined(Z_UINT128)
#	define Z_UINT_LEAST16_BITS 128
#endif

#ifdef Z_UINT_LEAST16_BITS

	typedef zuintn(UINT_LEAST16)		zuint_least16;
#	define Z_UINT_LEAST16			Z_TYPE			 (UINT_LEAST16)
#	define Z_UINT_LEAST16_FUNDAMENTAL	Z_TYPE_FUNDAMENTAL	 (UINT_LEAST16)
#	define Z_UINT_LEAST16_FIXED_FUNDAMENTAL Z_UINTN_FIXED_FUNDAMENTAL(UINT_LEAST16)
#	define Z_UINT_LEAST16_NUMBER_FORMAT	Z_TYPE_NUMBER_FORMAT	 (UINT_LEAST16)
#	define Z_UINT_LEAST16_ENDIANNESS	Z_TYPE_ENDIANNESS	 (UINT_LEAST16)
#	define Z_UINT_LEAST16_MAXIMUM		Z_TYPE_MAXIMUM		 (UINT_LEAST16)
#	define Z_UINT_LEAST16_MINIMUM		Z_TYPE_MINIMUM		 (UINT_LEAST16)

#endif

#if defined(Z_SINT16)
#	define Z_SINT_LEAST16_BITS 16

#elif defined(Z_SINT24)
#	define Z_SINT_LEAST16_BITS 24

#elif defined(Z_SINT32)
#	define Z_SINT_LEAST16_BITS 32

#elif defined(Z_SINT40)
#	define Z_SINT_LEAST16_BITS 40

#elif defined(Z_SINT48)
#	define Z_SINT_LEAST16_BITS 48

#elif defined(Z_SINT56)
#	define Z_SINT_LEAST16_BITS 56

#elif defined(Z_SINT64)
#	define Z_SINT_LEAST16_BITS 64

#elif defined(Z_SINT128)
#	define Z_SINT_LEAST16_BITS 128
#endif

#ifdef Z_SINT_LEAST16_BITS

	typedef zsintn(SINT_LEAST16)		zsint_least16;
#	define Z_SINT_LEAST16			Z_TYPE			 (SINT_LEAST16)
#	define Z_SINT_LEAST16_FUNDAMENTAL	Z_TYPE_FUNDAMENTAL	 (SINT_LEAST16)
#	define Z_SINT_LEAST16_FIXED_FUNDAMENTAL Z_SINTN_FIXED_FUNDAMENTAL(SINT_LEAST16)
#	define Z_SINT_LEAST16_NUMBER_FORMAT	Z_TYPE_NUMBER_FORMAT	 (SINT_LEAST16)
#	define Z_SINT_LEAST16_ENDIANNESS	Z_TYPE_ENDIANNESS	 (SINT_LEAST16)
#	define Z_SINT_LEAST16_MAXIMUM		Z_TYPE_MAXIMUM		 (SINT_LEAST16)
#	define Z_SINT_LEAST16_MINIMUM		Z_TYPE_MINIMUM		 (SINT_LEAST16)

#endif

#if defined(Z_UINT24)
#	define Z_UINT_LEAST24_BITS 24

#elif defined(Z_UINT32)
#	define Z_UINT_LEAST24_BITS 32

#elif defined(Z_UINT40)
#	define Z_UINT_LEAST24_BITS 40

#elif defined(Z_UINT48)
#	define Z_UINT_LEAST24_BITS 48

#elif defined(Z_UINT56)
#	define Z_UINT_LEAST24_BITS 56

#elif defined(Z_UINT64)
#	define Z_UINT_LEAST24_BITS 64

#elif defined(Z_UINT128)
#	define Z_UINT_LEAST24_BITS 128
#endif

#ifdef Z_UINT_LEAST24_BITS

	typedef zuintn(UINT_LEAST24)		zuint_least24;
#	define Z_UINT_LEAST24			Z_TYPE			 (UINT_LEAST24)
#	define Z_UINT_LEAST24_FUNDAMENTAL	Z_TYPE_FUNDAMENTAL	 (UINT_LEAST24)
#	define Z_UINT_LEAST24_FIXED_FUNDAMENTAL Z_UINTN_FIXED_FUNDAMENTAL(UINT_LEAST24)
#	define Z_UINT_LEAST24_NUMBER_FORMAT	Z_TYPE_NUMBER_FORMAT	 (UINT_LEAST24)
#	define Z_UINT_LEAST24_ENDIANNESS	Z_TYPE_ENDIANNESS	 (UINT_LEAST24)
#	define Z_UINT_LEAST24_MAXIMUM		Z_TYPE_MAXIMUM		 (UINT_LEAST24)
#	define Z_UINT_LEAST24_MINIMUM		Z_TYPE_MINIMUM		 (UINT_LEAST24)

#endif

#if defined(Z_SINT24)
#	define Z_SINT_LEAST24_BITS 24

#elif defined(Z_SINT32)
#	define Z_SINT_LEAST24_BITS 32

#elif defined(Z_SINT40)
#	define Z_SINT_LEAST24_BITS 40

#elif defined(Z_SINT48)
#	define Z_SINT_LEAST24_BITS 48

#elif defined(Z_SINT56)
#	define Z_SINT_LEAST24_BITS 56

#elif defined(Z_SINT64)
#	define Z_SINT_LEAST24_BITS 64

#elif defined(Z_SINT128)
#	define Z_SINT_LEAST24_BITS 128
#endif

#ifdef Z_SINT_LEAST24_BITS

	typedef zsintn(SINT_LEAST24)		zsint_least24;
#	define Z_SINT_LEAST24			Z_TYPE			 (SINT_LEAST24)
#	define Z_SINT_LEAST24_FUNDAMENTAL	Z_TYPE_FUNDAMENTAL	 (SINT_LEAST24)
#	define Z_SINT_LEAST24_FIXED_FUNDAMENTAL Z_SINTN_FIXED_FUNDAMENTAL(SINT_LEAST24)
#	define Z_SINT_LEAST24_NUMBER_FORMAT	Z_TYPE_NUMBER_FORMAT	 (SINT_LEAST24)
#	define Z_SINT_LEAST24_ENDIANNESS	Z_TYPE_ENDIANNESS	 (SINT_LEAST24)
#	define Z_SINT_LEAST24_MAXIMUM		Z_TYPE_MAXIMUM		 (SINT_LEAST24)
#	define Z_SINT_LEAST24_MINIMUM		Z_TYPE_MINIMUM		 (SINT_LEAST24)

#endif

#if defined(Z_UINT32)
#	define Z_UINT_LEAST32_BITS 32

#elif defined(Z_UINT40)
#	define Z_UINT_LEAST32_BITS 40

#elif defined(Z_UINT48)
#	define Z_UINT_LEAST32_BITS 48

#elif defined(Z_UINT56)
#	define Z_UINT_LEAST32_BITS 56

#elif defined(Z_UINT64)
#	define Z_UINT_LEAST32_BITS 64

#elif defined(Z_UINT128)
#	define Z_UINT_LEAST32_BITS 128
#endif

#ifdef Z_UINT_LEAST32_BITS

	typedef zuintn(UINT_LEAST32)		zuint_least32;
#	define Z_UINT_LEAST32			Z_TYPE			 (UINT_LEAST32)
#	define Z_UINT_LEAST32_FUNDAMENTAL	Z_TYPE_FUNDAMENTAL	 (UINT_LEAST32)
#	define Z_UINT_LEAST32_FIXED_FUNDAMENTAL Z_UINTN_FIXED_FUNDAMENTAL(UINT_LEAST32)
#	define Z_UINT_LEAST32_NUMBER_FORMAT	Z_TYPE_NUMBER_FORMAT	 (UINT_LEAST32)
#	define Z_UINT_LEAST32_ENDIANNESS	Z_TYPE_ENDIANNESS	 (UINT_LEAST32)
#	define Z_UINT_LEAST32_MAXIMUM		Z_TYPE_MAXIMUM		 (UINT_LEAST32)
#	define Z_UINT_LEAST32_MINIMUM		Z_TYPE_MINIMUM		 (UINT_LEAST32)

#endif

#if defined(Z_SINT32)
#	define Z_SINT_LEAST32_BITS 32

#elif defined(Z_SINT40)
#	define Z_SINT_LEAST32_BITS 40

#elif defined(Z_SINT48)
#	define Z_SINT_LEAST32_BITS 48

#elif defined(Z_SINT56)
#	define Z_SINT_LEAST32_BITS 56

#elif defined(Z_SINT64)
#	define Z_SINT_LEAST32_BITS 64

#elif defined(Z_SINT128)
#	define Z_SINT_LEAST32_BITS 128
#endif

#ifdef Z_SINT_LEAST32_BITS

	typedef zsintn(SINT_LEAST32)		zsint_least32;
#	define Z_SINT_LEAST32			Z_TYPE			 (SINT_LEAST32)
#	define Z_SINT_LEAST32_FUNDAMENTAL	Z_TYPE_FUNDAMENTAL	 (SINT_LEAST32)
#	define Z_SINT_LEAST32_FIXED_FUNDAMENTAL Z_SINTN_FIXED_FUNDAMENTAL(SINT_LEAST32)
#	define Z_SINT_LEAST32_NUMBER_FORMAT	Z_TYPE_NUMBER_FORMAT	 (SINT_LEAST32)
#	define Z_SINT_LEAST32_ENDIANNESS	Z_TYPE_ENDIANNESS	 (SINT_LEAST32)
#	define Z_SINT_LEAST32_MAXIMUM		Z_TYPE_MAXIMUM		 (SINT_LEAST32)
#	define Z_SINT_LEAST32_MINIMUM		Z_TYPE_MINIMUM		 (SINT_LEAST32)

#endif

#if defined(Z_UINT40)
#	define Z_UINT_LEAST40_BITS 40

#elif defined(Z_UINT48)
#	define Z_UINT_LEAST40_BITS 48

#elif defined(Z_UINT56)
#	define Z_UINT_LEAST40_BITS 56

#elif defined(Z_UINT64)
#	define Z_UINT_LEAST40_BITS 64

#elif defined(Z_UINT128)
#	define Z_UINT_LEAST40_BITS 128
#endif

#ifdef Z_UINT_LEAST40_BITS

	typedef zuintn(UINT_LEAST40)		zuint_least40;
#	define Z_UINT_LEAST40			Z_TYPE			 (UINT_LEAST40)
#	define Z_UINT_LEAST40_FUNDAMENTAL	Z_TYPE_FUNDAMENTAL	 (UINT_LEAST40)
#	define Z_UINT_LEAST40_FIXED_FUNDAMENTAL Z_UINTN_FIXED_FUNDAMENTAL(UINT_LEAST40)
#	define Z_UINT_LEAST40_NUMBER_FORMAT	Z_TYPE_NUMBER_FORMAT	 (UINT_LEAST40)
#	define Z_UINT_LEAST40_ENDIANNESS	Z_TYPE_ENDIANNESS	 (UINT_LEAST40)
#	define Z_UINT_LEAST40_MAXIMUM		Z_TYPE_MAXIMUM		 (UINT_LEAST40)
#	define Z_UINT_LEAST40_MINIMUM		Z_TYPE_MINIMUM		 (UINT_LEAST40)

#endif

#if defined(Z_SINT40)
#	define Z_SINT_LEAST40_BITS 40

#elif defined(Z_SINT48)
#	define Z_SINT_LEAST40_BITS 48

#elif defined(Z_SINT56)
#	define Z_SINT_LEAST40_BITS 56

#elif defined(Z_SINT64)
#	define Z_SINT_LEAST40_BITS 64

#elif defined(Z_SINT128)
#	define Z_SINT_LEAST40_BITS 128
#endif

#ifdef Z_SINT_LEAST40_BITS

	typedef zsintn(SINT_LEAST40)		zsint_least40;
#	define Z_SINT_LEAST40			Z_TYPE			 (SINT_LEAST40)
#	define Z_SINT_LEAST40_FUNDAMENTAL	Z_TYPE_FUNDAMENTAL	 (SINT_LEAST40)
#	define Z_SINT_LEAST40_FIXED_FUNDAMENTAL Z_SINTN_FIXED_FUNDAMENTAL(SINT_LEAST40)
#	define Z_SINT_LEAST40_NUMBER_FORMAT	Z_TYPE_NUMBER_FORMAT	 (SINT_LEAST40)
#	define Z_SINT_LEAST40_ENDIANNESS	Z_TYPE_ENDIANNESS	 (SINT_LEAST40)
#	define Z_SINT_LEAST40_MAXIMUM		Z_TYPE_MAXIMUM		 (SINT_LEAST40)
#	define Z_SINT_LEAST40_MINIMUM		Z_TYPE_MINIMUM		 (SINT_LEAST40)

#endif

#if defined(Z_UINT48)
#	define Z_UINT_LEAST48_BITS 48

#elif defined(Z_UINT56)
#	define Z_UINT_LEAST48_BITS 56

#elif defined(Z_UINT64)
#	define Z_UINT_LEAST48_BITS 64

#elif defined(Z_UINT128)
#	define Z_UINT_LEAST48_BITS 128
#endif

#ifdef Z_UINT_LEAST48_BITS

	typedef zuintn(UINT_LEAST48)		zuint_least48;
#	define Z_UINT_LEAST48			Z_TYPE			 (UINT_LEAST48)
#	define Z_UINT_LEAST48_FUNDAMENTAL	Z_TYPE_FUNDAMENTAL	 (UINT_LEAST48)
#	define Z_UINT_LEAST48_FIXED_FUNDAMENTAL Z_UINTN_FIXED_FUNDAMENTAL(UINT_LEAST48)
#	define Z_UINT_LEAST48_NUMBER_FORMAT	Z_TYPE_NUMBER_FORMAT	 (UINT_LEAST48)
#	define Z_UINT_LEAST48_ENDIANNESS	Z_TYPE_ENDIANNESS	 (UINT_LEAST48)
#	define Z_UINT_LEAST48_MAXIMUM		Z_TYPE_MAXIMUM		 (UINT_LEAST48)
#	define Z_UINT_LEAST48_MINIMUM		Z_TYPE_MINIMUM		 (UINT_LEAST48)

#endif

#if defined(Z_SINT48)
#	define Z_SINT_LEAST48_BITS 48

#elif defined(Z_SINT56)
#	define Z_SINT_LEAST48_BITS 56

#elif defined(Z_SINT64)
#	define Z_SINT_LEAST48_BITS 64

#elif defined(Z_SINT128)
#	define Z_SINT_LEAST48_BITS 128
#endif

#ifdef Z_SINT_LEAST48_BITS

	typedef zsintn(SINT_LEAST48)		zsint_least48;
#	define Z_SINT_LEAST48			Z_TYPE			 (SINT_LEAST48)
#	define Z_SINT_LEAST48_FUNDAMENTAL	Z_TYPE_FUNDAMENTAL	 (SINT_LEAST48)
#	define Z_SINT_LEAST48_FIXED_FUNDAMENTAL Z_SINTN_FIXED_FUNDAMENTAL(SINT_LEAST48)
#	define Z_SINT_LEAST48_NUMBER_FORMAT	Z_TYPE_NUMBER_FORMAT	 (SINT_LEAST48)
#	define Z_SINT_LEAST48_ENDIANNESS	Z_TYPE_ENDIANNESS	 (SINT_LEAST48)
#	define Z_SINT_LEAST48_MAXIMUM		Z_TYPE_MAXIMUM		 (SINT_LEAST48)
#	define Z_SINT_LEAST48_MINIMUM		Z_TYPE_MINIMUM		 (SINT_LEAST48)

#endif

#if defined(Z_UINT56)
#	define Z_UINT_LEAST56_BITS 56

#elif defined(Z_UINT64)
#	define Z_UINT_LEAST56_BITS 64

#elif defined(Z_UINT128)
#	define Z_UINT_LEAST56_BITS 128
#endif

#ifdef Z_UINT_LEAST56_BITS

	typedef zuintn(UINT_LEAST56)		zuint_least56;
#	define Z_UINT_LEAST56			Z_TYPE			 (UINT_LEAST56)
#	define Z_UINT_LEAST56_FUNDAMENTAL	Z_TYPE_FUNDAMENTAL	 (UINT_LEAST56)
#	define Z_UINT_LEAST56_FIXED_FUNDAMENTAL Z_UINTN_FIXED_FUNDAMENTAL(UINT_LEAST56)
#	define Z_UINT_LEAST56_NUMBER_FORMAT	Z_TYPE_NUMBER_FORMAT	 (UINT_LEAST56)
#	define Z_UINT_LEAST56_ENDIANNESS	Z_TYPE_ENDIANNESS	 (UINT_LEAST56)
#	define Z_UINT_LEAST56_MAXIMUM		Z_TYPE_MAXIMUM		 (UINT_LEAST56)
#	define Z_UINT_LEAST56_MINIMUM		Z_TYPE_MINIMUM		 (UINT_LEAST56)

#endif

#if defined(Z_SINT56)
#	define Z_SINT_LEAST56_BITS 56

#elif defined(Z_SINT64)
#	define Z_SINT_LEAST56_BITS 64

#elif defined(Z_SINT128)
#	define Z_SINT_LEAST56_BITS 128
#endif

#ifdef Z_SINT_LEAST56_BITS

	typedef zsintn(SINT_LEAST56)		zsint_least56;
#	define Z_SINT_LEAST56			Z_TYPE			 (SINT_LEAST56)
#	define Z_SINT_LEAST56_FUNDAMENTAL	Z_TYPE_FUNDAMENTAL	 (SINT_LEAST56)
#	define Z_SINT_LEAST56_FIXED_FUNDAMENTAL Z_SINTN_FIXED_FUNDAMENTAL(SINT_LEAST56)
#	define Z_SINT_LEAST56_NUMBER_FORMAT	Z_TYPE_NUMBER_FORMAT	 (SINT_LEAST56)
#	define Z_SINT_LEAST56_ENDIANNESS	Z_TYPE_ENDIANNESS	 (SINT_LEAST56)
#	define Z_SINT_LEAST56_MAXIMUM		Z_TYPE_MAXIMUM		 (SINT_LEAST56)
#	define Z_SINT_LEAST56_MINIMUM		Z_TYPE_MINIMUM		 (SINT_LEAST56)

#endif

#if defined(Z_UINT64)
#	define Z_UINT_LEAST64_BITS 64

#elif defined(Z_UINT128)
#	define Z_UINT_LEAST64_BITS 128
#endif

#ifdef Z_UINT_LEAST64_BITS

	typedef zuintn(UINT_LEAST64)		zuint_least64;
#	define Z_UINT_LEAST64			Z_TYPE			 (UINT_LEAST64)
#	define Z_UINT_LEAST64_FUNDAMENTAL	Z_TYPE_FUNDAMENTAL	 (UINT_LEAST64)
#	define Z_UINT_LEAST64_FIXED_FUNDAMENTAL Z_UINTN_FIXED_FUNDAMENTAL(UINT_LEAST64)
#	define Z_UINT_LEAST64_NUMBER_FORMAT	Z_TYPE_NUMBER_FORMAT	 (UINT_LEAST64)
#	define Z_UINT_LEAST64_ENDIANNESS	Z_TYPE_ENDIANNESS	 (UINT_LEAST64)
#	define Z_UINT_LEAST64_MAXIMUM		Z_TYPE_MAXIMUM		 (UINT_LEAST64)
#	define Z_UINT_LEAST64_MINIMUM		Z_TYPE_MINIMUM		 (UINT_LEAST64)

#endif

#if defined(Z_SINT64)
#	define Z_SINT_LEAST64_BITS 64

#elif defined(Z_SINT128)
#	define Z_SINT_LEAST64_BITS 128
#endif

#ifdef Z_SINT_LEAST64_BITS

	typedef zsintn(SINT_LEAST64)		zsint_least64;
#	define Z_SINT_LEAST64			Z_TYPE			 (SINT_LEAST64)
#	define Z_SINT_LEAST64_FUNDAMENTAL	Z_TYPE_FUNDAMENTAL	 (SINT_LEAST64)
#	define Z_SINT_LEAST64_FIXED_FUNDAMENTAL Z_SINTN_FIXED_FUNDAMENTAL(SINT_LEAST64)
#	define Z_SINT_LEAST64_NUMBER_FORMAT	Z_TYPE_NUMBER_FORMAT	 (SINT_LEAST64)
#	define Z_SINT_LEAST64_ENDIANNESS	Z_TYPE_ENDIANNESS	 (SINT_LEAST64)
#	define Z_SINT_LEAST64_MAXIMUM		Z_TYPE_MAXIMUM		 (SINT_LEAST64)
#	define Z_SINT_LEAST64_MINIMUM		Z_TYPE_MINIMUM		 (SINT_LEAST64)

#endif

/* MARK: - Standard base types */

#if ('\0' - 1) > 0
#	define Z_CHAR_FIXED_FUNDAMENTAL Z_UINTN_FIXED_FUNDAMENTAL(CHAR)
#	define Z_CHAR_IS_SIGNED		FALSE
#else
#	define Z_CHAR_FIXED_FUNDAMENTAL Z_SINTN_FIXED_FUNDAMENTAL(CHAR)
#	define Z_CHAR_IS_SIGNED		TRUE
#endif

typedef char			   zchar;
#define Z_CHAR			   Z_SAME
#define Z_CHAR_FUNDAMENTAL	   Z_FUNDAMENTAL_CHAR
#define Z_CHAR_NUMBER_FORMAT	   Z_TYPE_NUMBER_FORMAT(CHAR)
#define Z_CHAR_BITS		   Z_DATA_MODEL_BITS   (CHAR)
#define Z_CHAR_MAXIMUM		   Z_TYPE_MAXIMUM      (CHAR)
#define Z_CHAR_MINIMUM		   Z_TYPE_MINIMUM      (CHAR)

typedef unsigned char		   zuchar;
#define Z_UCHAR			   Z_SUFFIX_U
#define Z_UCHAR_FUNDAMENTAL	   Z_FUNDAMENTAL_UCHAR
#define Z_UCHAR_FIXED_FUNDAMENTAL  Z_UINTN_FIXED_FUNDAMENTAL(UCHAR)
#define Z_UCHAR_NUMBER_FORMAT	   Z_TYPE_NUMBER_FORMAT	    (UCHAR)
#define Z_UCHAR_BITS		   Z_DATA_MODEL_BITS	    ( CHAR)
#define Z_UCHAR_MAXIMUM		   Z_TYPE_MAXIMUM	    (UCHAR)
#define Z_UCHAR_MINIMUM		   Z_TYPE_MINIMUM	    (UCHAR)

typedef signed char		   zschar;
#define Z_SCHAR			   Z_SAME
#define Z_SCHAR_FUNDAMENTAL	   Z_FUNDAMENTAL_SCHAR
#define Z_SCHAR_FIXED_FUNDAMENTAL  Z_SINTN_FIXED_FUNDAMENTAL(SCHAR)
#define Z_SCHAR_NUMBER_FORMAT	   Z_TYPE_NUMBER_FORMAT	    (SCHAR)
#define Z_SCHAR_BITS		   Z_DATA_MODEL_BITS	    ( CHAR)
#define Z_SCHAR_MAXIMUM		   Z_TYPE_MAXIMUM	    (SCHAR)
#define Z_SCHAR_MINIMUM		   Z_TYPE_MINIMUM	    (SCHAR)

typedef unsigned short int	   zushort;
#define Z_USHORT		   Z_SUFFIX_U
#define Z_USHORT_FUNDAMENTAL	   Z_FUNDAMENTAL_USHORT
#define Z_USHORT_FIXED_FUNDAMENTAL Z_UINTN_FIXED_FUNDAMENTAL(USHORT)
#define Z_USHORT_NUMBER_FORMAT	   Z_TYPE_NUMBER_FORMAT	    (USHORT)
#define Z_USHORT_ENDIANNESS	   Z_TYPE_ENDIANNESS	    (USHORT)
#define Z_USHORT_BITS		   Z_DATA_MODEL_BITS	    ( SHORT)
#define Z_USHORT_MAXIMUM	   Z_TYPE_MAXIMUM	    (USHORT)
#define Z_USHORT_MINIMUM	   Z_TYPE_MINIMUM	    (USHORT)

typedef short int		   zsshort;
#define Z_SSHORT		   Z_SAME
#define Z_SSHORT_FUNDAMENTAL	   Z_FUNDAMENTAL_SSHORT
#define Z_SSHORT_FIXED_FUNDAMENTAL Z_UINTN_FIXED_FUNDAMENTAL(SSHORT)
#define Z_SSHORT_NUMBER_FORMAT	   Z_TYPE_NUMBER_FORMAT	    (SSHORT)
#define Z_SSHORT_ENDIANNESS	   Z_TYPE_ENDIANNESS	    (SSHORT)
#define Z_SSHORT_BITS		   Z_DATA_MODEL_BITS	    ( SHORT)
#define Z_SSHORT_MAXIMUM	   Z_TYPE_MAXIMUM	    (SSHORT)
#define Z_SSHORT_MINIMUM	   Z_TYPE_MINIMUM	    (SSHORT)

typedef unsigned int		   zuint;
#define Z_UINT			   Z_SUFFIX_U
#define Z_UINT_FUNDAMENTAL	   Z_FUNDAMENTAL_UINT
#define Z_UINT_FIXED_FUNDAMENTAL   Z_UINTN_FIXED_FUNDAMENTAL(UINT)
#define Z_UINT_NUMBER_FORMAT	   Z_TYPE_NUMBER_FORMAT	    (UINT)
#define Z_UINT_ENDIANNESS	   Z_TYPE_ENDIANNESS	    (UINT)
#define Z_UINT_BITS		   Z_DATA_MODEL_BITS	    ( INT)
#define Z_UINT_MAXIMUM		   Z_TYPE_MAXIMUM	    (UINT)
#define Z_UINT_MINIMUM		   Z_TYPE_MINIMUM	    (UINT)

typedef int			   zsint;
#define Z_SINT			   Z_SAME
#define Z_SINT_FUNDAMENTAL	   Z_FUNDAMENTAL_SINT
#define Z_SINT_FIXED_FUNDAMENTAL   Z_UINTN_FIXED_FUNDAMENTAL(SINT)
#define Z_SINT_NUMBER_FORMAT	   Z_TYPE_NUMBER_FORMAT	    (SINT)
#define Z_SINT_ENDIANNESS	   Z_TYPE_ENDIANNESS	    (SINT)
#define Z_SINT_BITS		   Z_DATA_MODEL_BITS	    ( INT)
#define Z_SINT_MAXIMUM		   Z_TYPE_MAXIMUM	    (SINT)
#define Z_SINT_MINIMUM		   Z_TYPE_MINIMUM	    (SINT)

typedef unsigned long int	   zulong;
#define Z_ULONG			   Z_SUFFIX_UL
#define Z_ULONG_FUNDAMENTAL	   Z_FUNDAMENTAL_ULONG
#define Z_ULONG_FIXED_FUNDAMENTAL  Z_UINTN_FIXED_FUNDAMENTAL(ULONG)
#define Z_ULONG_NUMBER_FORMAT	   Z_TYPE_NUMBER_FORMAT	    (ULONG)
#define Z_ULONG_ENDIANNESS	   Z_TYPE_ENDIANNESS	    (ULONG)
#define Z_ULONG_BITS		   Z_DATA_MODEL_BITS	    ( LONG)
#define Z_ULONG_MAXIMUM		   Z_TYPE_MAXIMUM	    (ULONG)
#define Z_ULONG_MINIMUM		   Z_TYPE_MINIMUM	    (ULONG)

typedef long int		   zslong;
#define Z_SLONG			   Z_SUFFIX_L
#define Z_SLONG_FUNDAMENTAL	   Z_FUNDAMENTAL_SLONG
#define Z_SLONG_FIXED_FUNDAMENTAL  Z_UINTN_FIXED_FUNDAMENTAL(SLONG)
#define Z_SLONG_NUMBER_FORMAT	   Z_TYPE_NUMBER_FORMAT	    (SLONG)
#define Z_SLONG_ENDIANNESS	   Z_TYPE_ENDIANNESS	    (SLONG)
#define Z_SLONG_BITS		   Z_DATA_MODEL_BITS	    ( LONG)
#define Z_SLONG_MAXIMUM		   Z_TYPE_MAXIMUM	    (SLONG)
#define Z_SLONG_MINIMUM		   Z_TYPE_MINIMUM	    (SLONG)

#if Z_DIALECT_HAS_TYPE(C, LONG_LONG) || Z_DIALECT_HAS_TYPE(CPP, LONG_LONG)

	typedef unsigned long long int	  zullong;
#	define Z_ULLONG			  Z_SUFFIX_LL
#	define Z_ULLONG_FUNDAMENTAL	  Z_FUNDAMENTAL_ULLONG
#	define Z_ULLONG_FIXED_FUNDAMENTAL Z_UINTN_FIXED_FUNDAMENTAL(ULLONG)
#	define Z_ULLONG_NUMBER_FORMAT	  Z_TYPE_NUMBER_FORMAT	   (ULLONG)
#	define Z_ULLONG_ENDIANNESS	  Z_TYPE_ENDIANNESS	   (ULLONG)
#	define Z_ULLONG_BITS		  Z_DATA_MODEL_BITS	   ( LLONG)
#	define Z_ULLONG_MAXIMUM		  Z_TYPE_MAXIMUM	   (ULLONG)
#	define Z_ULLONG_MINIMUM		  Z_TYPE_MINIMUM	   (ULLONG)

	typedef long long int		  zsllong;
#	define Z_SLLONG			  Z_SUFFIX_LL
#	define Z_SLLONG_FUNDAMENTAL	  Z_FUNDAMENTAL_SLLONG
#	define Z_SLLONG_FIXED_FUNDAMENTAL Z_UINTN_FIXED_FUNDAMENTAL(SLLONG)
#	define Z_SLLONG_NUMBER_FORMAT	  Z_TYPE_NUMBER_FORMAT	   (SLLONG)
#	define Z_SLLONG_ENDIANNESS	  Z_TYPE_ENDIANNESS	   (SLLONG)
#	define Z_SLLONG_BITS		  Z_DATA_MODEL_BITS	   ( LLONG)
#	define Z_SLLONG_MAXIMUM		  Z_TYPE_MAXIMUM	   (SLLONG)
#	define Z_SLLONG_MINIMUM		  Z_TYPE_MINIMUM	   (SLLONG)

#	define Z_LLONG

#endif

#if Z_DIALECT_HAS_TYPE(C, FLOAT)

	typedef float			   zfloat;
#	define Z_FLOAT			   Z_SUFFIX_F
#	define Z_FLOAT_FUNDAMENTAL	   Z_FUNDAMENTAL_FLOAT
#	define Z_FLOAT_FIXED_FUNDAMENTAL   Z_FLOATING_POINT_FIXED_FUNDAMENTAL(FLOAT)
#	define Z_FLOAT_NUMBER_FORMAT	   Z_TYPE_NUMBER_FORMAT		     (FLOAT)
#	define Z_FLOAT_BITS		   Z_TYPE_BITS			     (FLOAT)
#	define Z_FLOAT_DIGITS_10	   Z_TYPE_DIGITS_10		     (FLOAT)
#	define Z_FLOAT_MAXIMUM_DIGITS_10   Z_TYPE_MAXIMUM_DIGITS_10	     (FLOAT)
#	define Z_FLOAT_RADIX		   Z_TYPE_RADIX			     (FLOAT)
#	define Z_FLOAT_SIGNIFICAND_DIGITS  Z_TYPE_SIGNIFICAND_DIGITS	     (FLOAT)
#	define Z_FLOAT_EXPONENT_MAXIMUM	   Z_TYPE_EXPONENT_MAXIMUM	     (FLOAT)
#	define Z_FLOAT_EXPONENT_MINIMUM	   Z_TYPE_EXPONENT_MINIMUM	     (FLOAT)
#	define Z_FLOAT_EXPONENT_10_MAXIMUM Z_TYPE_EXPONENT_10_MAXIMUM	     (FLOAT)
#	define Z_FLOAT_EXPONENT_10_MINIMUM Z_TYPE_EXPONENT_10_MINIMUM	     (FLOAT)
#	define Z_FLOAT_EPSILON		   Z_TYPE_EPSILON		     (FLOAT)
#	define Z_FLOAT_MAXIMUM		   Z_TYPE_MAXIMUM		     (FLOAT)
#	define Z_FLOAT_MINIMUM		   Z_TYPE_MINIMUM		     (FLOAT)
#	define Z_FLOAT_DENORMAL_MINIMUM	   Z_TYPE_DENORMAL_MINIMUM	     (FLOAT)

#	if Z_FLOATING_POINT_HAS_INFINITY(FLOAT)
#		define Z_FLOAT_INFINITY Z_FLOATING_POINT_INFINITY(FLOAT)
#	endif

#	if Z_FLOATING_POINT_HAS_NAN(FLOAT)
#		define Z_FLOAT_NAN Z_FLOATING_POINT_NAN(FLOAT)
#	endif

#	if Z_FLOATING_POINT_HAS_QUIET_NAN(FLOAT)
#		define Z_FLOAT_QUIET_NAN Z_FLOATING_POINT_QUIET_NAN(FLOAT)
#	endif

#endif

#if Z_DIALECT_HAS_TYPE(C, DOUBLE)

	typedef double			    zdouble;
#	define Z_DOUBLE			    Z_SAME
#	define Z_DOUBLE_FUNDAMENTAL	    Z_FUNDAMENTAL_DOUBLE
#	define Z_DOUBLE_FIXED_FUNDAMENTAL   Z_FLOATING_POINT_FIXED_FUNDAMENTAL(DOUBLE)
#	define Z_DOUBLE_NUMBER_FORMAT	    Z_TYPE_NUMBER_FORMAT	      (DOUBLE)
#	define Z_DOUBLE_BITS		    Z_TYPE_BITS			      (DOUBLE)
#	define Z_DOUBLE_DIGITS_10	    Z_TYPE_DIGITS_10		      (DOUBLE)
#	define Z_DOUBLE_MAXIMUM_DIGITS_10   Z_TYPE_MAXIMUM_DIGITS_10	      (DOUBLE)
#	define Z_DOUBLE_RADIX		    Z_TYPE_RADIX		      (DOUBLE)
#	define Z_DOUBLE_SIGNIFICAND_DIGITS  Z_TYPE_SIGNIFICAND_DIGITS	      (DOUBLE)
#	define Z_DOUBLE_EXPONENT_MAXIMUM    Z_TYPE_EXPONENT_MAXIMUM	      (DOUBLE)
#	define Z_DOUBLE_EXPONENT_MINIMUM    Z_TYPE_EXPONENT_MINIMUM	      (DOUBLE)
#	define Z_DOUBLE_EXPONENT_10_MAXIMUM Z_TYPE_EXPONENT_10_MAXIMUM	      (DOUBLE)
#	define Z_DOUBLE_EXPONENT_10_MINIMUM Z_TYPE_EXPONENT_10_MINIMUM	      (DOUBLE)
#	define Z_DOUBLE_EPSILON		    Z_TYPE_EPSILON		      (DOUBLE)
#	define Z_DOUBLE_MAXIMUM		    Z_TYPE_MAXIMUM		      (DOUBLE)
#	define Z_DOUBLE_MINIMUM		    Z_TYPE_MINIMUM		      (DOUBLE)
#	define Z_DOUBLE_DENORMAL_MINIMUM    Z_TYPE_DENORMAL_MINIMUM	      (DOUBLE)
#	define Z_DOUBLE_INFINITY	    Z_TYPE_INFINITY		      (DOUBLE)
#	define Z_DOUBLE_NAN		    Z_TYPE_NAN			      (DOUBLE)

#	if Z_FLOATING_POINT_HAS_INFINITY(DOUBLE)
#		define Z_DOUBLE_INFINITY Z_FLOATING_POINT_INFINITY(DOUBLE)
#	endif

#	if Z_FLOATING_POINT_HAS_NAN(DOUBLE)
#		define Z_DOUBLE_NAN Z_FLOATING_POINT_NAN(DOUBLE)
#	endif

#	if Z_FLOATING_POINT_HAS_QUIET_NAN(DOUBLE)
#		define Z_DOUBLE_QUIET_NAN Z_FLOATING_POINT_QUIET_NAN(DOUBLE)
#	endif

#endif

#if Z_DIALECT_HAS_TYPE(C, LONG_DOUBLE) || Z_DIALECT_HAS_TYPE(CPP, LONG_DOUBLE)

	typedef long double		     zdouble;
#	define Z_LDOUBLE		     Z_SAME
#	define Z_LDOUBLE_FUNDAMENTAL	     Z_FUNDAMENTAL_DOUBLE
#	define Z_LDOUBLE_FIXED_FUNDAMENTAL   Z_FLOATING_POINT_FIXED_FUNDAMENTAL(DOUBLE)
#	define Z_LDOUBLE_NUMBER_FORMAT	     Z_TYPE_NUMBER_FORMAT	       (DOUBLE)
#	define Z_LDOUBLE_BITS		     Z_TYPE_BITS		       (DOUBLE)
#	define Z_LDOUBLE_DIGITS_10	     Z_TYPE_DIGITS_10		       (DOUBLE)
#	define Z_LDOUBLE_MAXIMUM_DIGITS_10   Z_TYPE_MAXIMUM_DIGITS_10	       (DOUBLE)
#	define Z_LDOUBLE_RADIX		     Z_TYPE_RADIX		       (DOUBLE)
#	define Z_LDOUBLE_SIGNIFICAND_DIGITS  Z_TYPE_SIGNIFICAND_DIGITS	       (DOUBLE)
#	define Z_LDOUBLE_EXPONENT_MAXIMUM    Z_TYPE_EXPONENT_MAXIMUM	       (DOUBLE)
#	define Z_LDOUBLE_EXPONENT_MINIMUM    Z_TYPE_EXPONENT_MINIMUM	       (DOUBLE)
#	define Z_LDOUBLE_EXPONENT_10_MAXIMUM Z_TYPE_EXPONENT_10_MAXIMUM	       (DOUBLE)
#	define Z_LDOUBLE_EXPONENT_10_MINIMUM Z_TYPE_EXPONENT_10_MINIMUM	       (DOUBLE)
#	define Z_LDOUBLE_EPSILON	     Z_TYPE_EPSILON		       (DOUBLE)
#	define Z_LDOUBLE_MAXIMUM	     Z_TYPE_MAXIMUM		       (DOUBLE)
#	define Z_LDOUBLE_MINIMUM	     Z_TYPE_MINIMUM		       (DOUBLE)
#	define Z_LDOUBLE_DENORMAL_MINIMUM    Z_TYPE_DENORMAL_MINIMUM	       (DOUBLE)
#	define Z_LDOUBLE_INFINITY	     Z_TYPE_INFINITY		       (DOUBLE)
#	define Z_LDOUBLE_NAN		     Z_TYPE_NAN			       (DOUBLE)

#	if Z_FLOATING_POINT_HAS_INFINITY(LDOUBLE)
#		define Z_LDOUBLE_INFINITY Z_FLOATING_POINT_INFINITY(LDOUBLE)
#	endif

#	if Z_FLOATING_POINT_HAS_NAN(LDOUBLE)
#		define Z_LDOUBLE_NAN Z_FLOATING_POINT_NAN(LDOUBLE)
#	endif

#	if Z_FLOATING_POINT_HAS_QUIET_NAN(LDOUBLE)
#		define Z_LDOUBLE_QUIET_NAN Z_FLOATING_POINT_QUIET_NAN(LDOUBLE)
#	endif

#endif

#if Z_DIALECT_HAS_TYPE(C, FLOAT16)

	typedef _Float16		     zfloat16;
#	define Z_FLOAT16		     Z_SUFFIX_F
#	define Z_FLOAT16_FUNDAMENTAL	     Z_FUNDAMENTAL_FLOAT16
#	define Z_FLOAT16_FIXED_FUNDAMENTAL   Z_FUNDAMENTAL_BFP16
#	define Z_FLOAT16_NUMBER_FORMAT	     Z_NUMBER_FORMAT_IEEE_754_BINARY16
#	define Z_FLOAT16_BITS		     16
#	define Z_FLOAT16_DIGITS_10	     Z_IEEE_754_BINARY16_DIGITS_10
#	define Z_FLOAT16_MAXIMUM_DIGITS_10   Z_IEEE_754_BINARY16_MAXIMUM_DIGITS_10
#	define Z_FLOAT16_RADIX		     Z_IEEE_754_BINARY16_RADIX
#	define Z_FLOAT16_SIGNIFICAND_DIGITS  Z_IEEE_754_BINARY16_SIGNIFICAND_DIGITS
#	define Z_FLOAT16_EXPONENT_MAXIMUM    Z_IEEE_754_BINARY16_EXPONENT_MAXIMUM
#	define Z_FLOAT16_EXPONENT_MINIMUM    Z_IEEE_754_BINARY16_EXPONENT_MINIMUM
#	define Z_FLOAT16_EXPONENT_10_MAXIMUM Z_IEEE_754_BINARY16_EXPONENT_10_MAXIMUM
#	define Z_FLOAT16_EXPONENT_10_MINIMUM Z_IEEE_754_BINARY16_EXPONENT_10_MINIMUM
#	define Z_FLOAT16_EPSILON	     Z_FLOAT16(Z_IEEE_754_BINARY16_EPSILON)
#	define Z_FLOAT16_MAXIMUM	     Z_FLOAT16(Z_IEEE_754_BINARY16_MAXIMUM)
#	define Z_FLOAT16_MINIMUM	     Z_FLOAT16(Z_IEEE_754_BINARY16_MINIMUM)
#	define Z_FLOAT16_DENORMAL_MINIMUM    Z_FLOAT16(Z_IEEE_754_BINARY16_DENORMAL_MINIMUM)

#	if Z_FLOATING_POINT_HAS_INFINITY(FLOAT16)
#		define Z_FLOAT16_INFINITY Z_FLOATING_POINT_INFINITY(FLOAT16)
#	endif

#	if Z_FLOATING_POINT_HAS_NAN(FLOAT16)
#		define Z_FLOAT16_NAN Z_FLOATING_POINT_NAN(FLOAT16)
#	endif

#	if Z_FLOATING_POINT_HAS_QUIET_NAN(FLOAT16)
#		define Z_FLOAT16_QUIET_NAN Z_FLOATING_POINT_QUIET_NAN(FLOAT16)
#	endif

#endif

#if Z_DIALECT_HAS_TYPE(C, FLOAT32)

	typedef _Float32		     zfloat32;
#	define Z_FLOAT32		     Z_SUFFIX_F
#	define Z_FLOAT32_FUNDAMENTAL	     Z_FUNDAMENTAL_FLOAT32
#	define Z_FLOAT32_FIXED_FUNDAMENTAL   Z_FUNDAMENTAL_BFP32
#	define Z_FLOAT32_NUMBER_FORMAT	     Z_NUMBER_FORMAT_IEEE_754_BINARY32
#	define Z_FLOAT32_BITS		     32
#	define Z_FLOAT32_DIGITS_10	     Z_IEEE_754_BINARY32_DIGITS_10
#	define Z_FLOAT32_MAXIMUM_DIGITS_10   Z_IEEE_754_BINARY32_MAXIMUM_DIGITS_10
#	define Z_FLOAT32_RADIX		     Z_IEEE_754_BINARY32_RADIX
#	define Z_FLOAT32_SIGNIFICAND_DIGITS  Z_IEEE_754_BINARY32_SIGNIFICAND_DIGITS
#	define Z_FLOAT32_EXPONENT_MAXIMUM    Z_IEEE_754_BINARY32_EXPONENT_MAXIMUM
#	define Z_FLOAT32_EXPONENT_MINIMUM    Z_IEEE_754_BINARY32_EXPONENT_MINIMUM
#	define Z_FLOAT32_EXPONENT_10_MAXIMUM Z_IEEE_754_BINARY32_EXPONENT_10_MAXIMUM
#	define Z_FLOAT32_EXPONENT_10_MINIMUM Z_IEEE_754_BINARY32_EXPONENT_10_MINIMUM
#	define Z_FLOAT32_EPSILON	     Z_FLOAT32(Z_IEEE_754_BINARY32_EPSILON)
#	define Z_FLOAT32_MAXIMUM	     Z_FLOAT32(Z_IEEE_754_BINARY32_MAXIMUM)
#	define Z_FLOAT32_MINIMUM	     Z_FLOAT32(Z_IEEE_754_BINARY32_MINIMUM)
#	define Z_FLOAT32_DENORMAL_MINIMUM    Z_FLOAT32(Z_IEEE_754_BINARY32_DENORMAL_MINIMUM)

#	if Z_FLOATING_POINT_HAS_INFINITY(FLOAT32)
#		define Z_FLOAT32_INFINITY Z_FLOATING_POINT_INFINITY(FLOAT32)
#	endif

#	if Z_FLOATING_POINT_HAS_NAN(FLOAT32)
#		define Z_FLOAT32_NAN Z_FLOATING_POINT_NAN(FLOAT32)
#	endif

#	if Z_FLOATING_POINT_HAS_QUIET_NAN(FLOAT32)
#		define Z_FLOAT32_QUIET_NAN Z_FLOATING_POINT_QUIET_NAN(FLOAT32)
#	endif

#endif

#if Z_DIALECT_HAS_TYPE(C, FLOAT64)

	typedef _Float64		     zfloat64;
#	define Z_FLOAT64		     Z_SUFFIX_F
#	define Z_FLOAT64_FUNDAMENTAL	     Z_FUNDAMENTAL_FLOAT64
#	define Z_FLOAT64_FIXED_FUNDAMENTAL   Z_FUNDAMENTAL_BFP64
#	define Z_FLOAT64_NUMBER_FORMAT	     Z_NUMBER_FORMAT_IEEE_754_BINARY64
#	define Z_FLOAT64_BITS		     64
#	define Z_FLOAT64_DIGITS_10	     Z_IEEE_754_BINARY64_DIGITS_10
#	define Z_FLOAT64_MAXIMUM_DIGITS_10   Z_IEEE_754_BINARY64_MAXIMUM_DIGITS_10
#	define Z_FLOAT64_RADIX		     Z_IEEE_754_BINARY64_RADIX
#	define Z_FLOAT64_SIGNIFICAND_DIGITS  Z_IEEE_754_BINARY64_SIGNIFICAND_DIGITS
#	define Z_FLOAT64_EXPONENT_MAXIMUM    Z_IEEE_754_BINARY64_EXPONENT_MAXIMUM
#	define Z_FLOAT64_EXPONENT_MINIMUM    Z_IEEE_754_BINARY64_EXPONENT_MINIMUM
#	define Z_FLOAT64_EXPONENT_10_MAXIMUM Z_IEEE_754_BINARY64_EXPONENT_10_MAXIMUM
#	define Z_FLOAT64_EXPONENT_10_MINIMUM Z_IEEE_754_BINARY64_EXPONENT_10_MINIMUM
#	define Z_FLOAT64_EPSILON	     Z_FLOAT64(Z_IEEE_754_BINARY64_EPSILON)
#	define Z_FLOAT64_MAXIMUM	     Z_FLOAT64(Z_IEEE_754_BINARY64_MAXIMUM)
#	define Z_FLOAT64_MINIMUM	     Z_FLOAT64(Z_IEEE_754_BINARY64_MINIMUM)
#	define Z_FLOAT64_DENORMAL_MINIMUM    Z_FLOAT64(Z_IEEE_754_BINARY64_DENORMAL_MINIMUM)

#	if Z_FLOATING_POINT_HAS_INFINITY(FLOAT64)
#		define Z_FLOAT64_INFINITY Z_FLOATING_POINT_INFINITY(FLOAT64)
#	endif

#	if Z_FLOATING_POINT_HAS_NAN(FLOAT64)
#		define Z_FLOAT64_NAN Z_FLOATING_POINT_NAN(FLOAT64)
#	endif

#	if Z_FLOATING_POINT_HAS_QUIET_NAN(FLOAT64)
#		define Z_FLOAT64_QUIET_NAN Z_FLOATING_POINT_QUIET_NAN(FLOAT64)
#	endif

#endif

#if Z_DIALECT_HAS_TYPE(C, FLOAT128)

	typedef _Float128		      zfloat128;
#	define Z_FLOAT128		      Z_SUFFIX_F
#	define Z_FLOAT128_FUNDAMENTAL	      Z_FUNDAMENTAL_FLOAT128
#	define Z_FLOAT128_FIXED_FUNDAMENTAL   Z_FUNDAMENTAL_BFP128
#	define Z_FLOAT128_NUMBER_FORMAT	      Z_NUMBER_FORMAT_IEEE_754_BINARY128
#	define Z_FLOAT128_BITS		      128
#	define Z_FLOAT128_DIGITS_10	      Z_IEEE_754_BINARY128_DIGITS_10
#	define Z_FLOAT128_MAXIMUM_DIGITS_10   Z_IEEE_754_BINARY128_MAXIMUM_DIGITS_10
#	define Z_FLOAT128_RADIX		      Z_IEEE_754_BINARY128_RADIX
#	define Z_FLOAT128_SIGNIFICAND_DIGITS  Z_IEEE_754_BINARY128_SIGNIFICAND_DIGITS
#	define Z_FLOAT128_EXPONENT_MAXIMUM    Z_IEEE_754_BINARY128_EXPONENT_MAXIMUM
#	define Z_FLOAT128_EXPONENT_MINIMUM    Z_IEEE_754_BINARY128_EXPONENT_MINIMUM
#	define Z_FLOAT128_EXPONENT_10_MAXIMUM Z_IEEE_754_BINARY128_EXPONENT_10_MAXIMUM
#	define Z_FLOAT128_EXPONENT_10_MINIMUM Z_IEEE_754_BINARY128_EXPONENT_10_MINIMUM
#	define Z_FLOAT128_EPSILON	      Z_FLOAT128(Z_IEEE_754_BINARY128_EPSILON)
#	define Z_FLOAT128_MAXIMUM	      Z_FLOAT128(Z_IEEE_754_BINARY128_MAXIMUM)
#	define Z_FLOAT128_MINIMUM	      Z_FLOAT128(Z_IEEE_754_BINARY128_MINIMUM)
#	define Z_FLOAT128_DENORMAL_MINIMUM    Z_FLOAT128(Z_IEEE_754_BINARY128_DENORMAL_MINIMUM)

#	if Z_FLOATING_POINT_HAS_INFINITY(FLOAT128)
#		define Z_FLOAT128_INFINITY Z_FLOATING_POINT_INFINITY(FLOAT128)
#	endif

#	if Z_FLOATING_POINT_HAS_NAN(FLOAT128)
#		define Z_FLOAT128_NAN Z_FLOATING_POINT_NAN(FLOAT128)
#	endif

#	if Z_FLOATING_POINT_HAS_QUIET_NAN(FLOAT128)
#		define Z_FLOAT128_QUIET_NAN Z_FLOATING_POINT_QUIET_NAN(FLOAT128)
#	endif

#endif

#if Z_DIALECT_HAS_TYPE(C, FLOAT32X)

	typedef _Float32x		      zfloat32x;
#	define Z_FLOAT32X		      Z_SUFFIX_F
#	define Z_FLOAT32X_FUNDAMENTAL	      Z_FUNDAMENTAL_FLOAT
#	define Z_FLOAT32X_FIXED_FUNDAMENTAL   Z_FLOATING_POINT_FIXED_FUNDAMENTAL(FLOAT32X)
#	define Z_FLOAT32X_NUMBER_FORMAT	      Z_TYPE_NUMBER_FORMAT		(FLOAT32X)
#	define Z_FLOAT32X_BITS		      Z_TYPE_BITS			(FLOAT32X)
#	define Z_FLOAT32X_DIGITS_10	      Z_TYPE_DIGITS_10			(FLOAT32X)
#	define Z_FLOAT32X_MAXIMUM_DIGITS_10   Z_TYPE_MAXIMUM_DIGITS_10		(FLOAT32X)
#	define Z_FLOAT32X_RADIX		      Z_TYPE_RADIX			(FLOAT32X)
#	define Z_FLOAT32X_SIGNIFICAND_DIGITS  Z_TYPE_SIGNIFICAND_DIGITS		(FLOAT32X)
#	define Z_FLOAT32X_EXPONENT_MAXIMUM    Z_TYPE_EXPONENT_MAXIMUM		(FLOAT32X)
#	define Z_FLOAT32X_EXPONENT_MINIMUM    Z_TYPE_EXPONENT_MINIMUM		(FLOAT32X)
#	define Z_FLOAT32X_EXPONENT_10_MAXIMUM Z_TYPE_EXPONENT_10_MAXIMUM	(FLOAT32X)
#	define Z_FLOAT32X_EXPONENT_10_MINIMUM Z_TYPE_EXPONENT_10_MINIMUM	(FLOAT32X)
#	define Z_FLOAT32X_EPSILON	      Z_TYPE_EPSILON			(FLOAT32X)
#	define Z_FLOAT32X_MAXIMUM	      Z_TYPE_MAXIMUM			(FLOAT32X)
#	define Z_FLOAT32X_MINIMUM	      Z_TYPE_MINIMUM			(FLOAT32X)
#	define Z_FLOAT32X_DENORMAL_MINIMUM    Z_TYPE_DENORMAL_MINIMUM		(FLOAT32X)

#	if Z_FLOATING_POINT_HAS_INFINITY(FLOAT32X)
#		define Z_FLOAT32X_INFINITY Z_FLOATING_POINT_INFINITY(FLOAT32X)
#	endif

#	if Z_FLOATING_POINT_HAS_NAN(FLOAT32X)
#		define Z_FLOAT32X_NAN Z_FLOATING_POINT_NAN(FLOAT32X)
#	endif

#	if Z_FLOATING_POINT_HAS_QUIET_NAN(FLOAT32X)
#		define Z_FLOAT32X_QUIET_NAN Z_FLOATING_POINT_QUIET_NAN(FLOAT32X)
#	endif

#endif

#if Z_DIALECT_HAS_TYPE(C, FLOAT64X)

	typedef _Float64x		      zfloat64x;
#	define Z_FLOAT64X		      Z_SUFFIX_F
#	define Z_FLOAT64X_FUNDAMENTAL	      Z_FUNDAMENTAL_FLOAT
#	define Z_FLOAT64X_FIXED_FUNDAMENTAL   Z_FLOATING_POINT_FIXED_FUNDAMENTAL(FLOAT64X)
#	define Z_FLOAT64X_NUMBER_FORMAT	      Z_TYPE_NUMBER_FORMAT		(FLOAT64X)
#	define Z_FLOAT64X_BITS		      Z_TYPE_BITS			(FLOAT64X)
#	define Z_FLOAT64X_DIGITS_10	      Z_TYPE_DIGITS_10			(FLOAT64X)
#	define Z_FLOAT64X_MAXIMUM_DIGITS_10   Z_TYPE_MAXIMUM_DIGITS_10		(FLOAT64X)
#	define Z_FLOAT64X_RADIX		      Z_TYPE_RADIX			(FLOAT64X)
#	define Z_FLOAT64X_SIGNIFICAND_DIGITS  Z_TYPE_SIGNIFICAND_DIGITS		(FLOAT64X)
#	define Z_FLOAT64X_EXPONENT_MAXIMUM    Z_TYPE_EXPONENT_MAXIMUM		(FLOAT64X)
#	define Z_FLOAT64X_EXPONENT_MINIMUM    Z_TYPE_EXPONENT_MINIMUM		(FLOAT64X)
#	define Z_FLOAT64X_EXPONENT_10_MAXIMUM Z_TYPE_EXPONENT_10_MAXIMUM	(FLOAT64X)
#	define Z_FLOAT64X_EXPONENT_10_MINIMUM Z_TYPE_EXPONENT_10_MINIMUM	(FLOAT64X)
#	define Z_FLOAT64X_EPSILON	      Z_TYPE_EPSILON			(FLOAT64X)
#	define Z_FLOAT64X_MAXIMUM	      Z_TYPE_MAXIMUM			(FLOAT64X)
#	define Z_FLOAT64X_MINIMUM	      Z_TYPE_MINIMUM			(FLOAT64X)
#	define Z_FLOAT64X_DENORMAL_MINIMUM    Z_TYPE_DENORMAL_MINIMUM		(FLOAT64X)

#	if Z_FLOATING_POINT_HAS_INFINITY(FLOAT64X)
#		define Z_FLOAT64X_INFINITY Z_FLOATING_POINT_INFINITY(FLOAT64X)
#	endif

#	if Z_FLOATING_POINT_HAS_NAN(FLOAT64X)
#		define Z_FLOAT64X_NAN Z_FLOATING_POINT_NAN(FLOAT64X)
#	endif

#	if Z_FLOATING_POINT_HAS_QUIET_NAN(FLOAT64X)
#		define Z_FLOAT64X_QUIET_NAN Z_FLOATING_POINT_QUIET_NAN(FLOAT64X)
#	endif

#endif

#if Z_DIALECT_HAS_TYPE(C, FLOAT128X)

	typedef _Float128x		       zfloat128x;
#	define Z_FLOAT128X		       Z_SUFFIX_F
#	define Z_FLOAT128X_FUNDAMENTAL	       Z_FUNDAMENTAL_FLOAT
#	define Z_FLOAT128X_FIXED_FUNDAMENTAL   Z_FLOATING_POINT_FIXED_FUNDAMENTAL(FLOAT128X)
#	define Z_FLOAT128X_NUMBER_FORMAT       Z_TYPE_NUMBER_FORMAT		 (FLOAT128X)
#	define Z_FLOAT128X_BITS		       Z_TYPE_BITS			 (FLOAT128X)
#	define Z_FLOAT128X_DIGITS_10	       Z_TYPE_DIGITS_10			 (FLOAT128X)
#	define Z_FLOAT128X_MAXIMUM_DIGITS_10   Z_TYPE_MAXIMUM_DIGITS_10		 (FLOAT128X)
#	define Z_FLOAT128X_RADIX	       Z_TYPE_RADIX			 (FLOAT128X)
#	define Z_FLOAT128X_SIGNIFICAND_DIGITS  Z_TYPE_SIGNIFICAND_DIGITS	 (FLOAT128X)
#	define Z_FLOAT128X_EXPONENT_MAXIMUM    Z_TYPE_EXPONENT_MAXIMUM		 (FLOAT128X)
#	define Z_FLOAT128X_EXPONENT_MINIMUM    Z_TYPE_EXPONENT_MINIMUM		 (FLOAT128X)
#	define Z_FLOAT128X_EXPONENT_10_MAXIMUM Z_TYPE_EXPONENT_10_MAXIMUM	 (FLOAT128X)
#	define Z_FLOAT128X_EXPONENT_10_MINIMUM Z_TYPE_EXPONENT_10_MINIMUM	 (FLOAT128X)
#	define Z_FLOAT128X_EPSILON	       Z_TYPE_EPSILON			 (FLOAT128X)
#	define Z_FLOAT128X_MAXIMUM	       Z_TYPE_MAXIMUM			 (FLOAT128X)
#	define Z_FLOAT128X_MINIMUM	       Z_TYPE_MINIMUM			 (FLOAT128X)
#	define Z_FLOAT128X_DENORMAL_MINIMUM    Z_TYPE_DENORMAL_MINIMUM		 (FLOAT128X)

#	if Z_FLOATING_POINT_HAS_INFINITY(FLOAT128X)
#		define Z_FLOAT128X_INFINITY Z_FLOATING_POINT_INFINITY(FLOAT128X)
#	endif

#	if Z_FLOATING_POINT_HAS_NAN(FLOAT128X)
#		define Z_FLOAT128X_NAN Z_FLOATING_POINT_NAN(FLOAT128X)
#	endif

#	if Z_FLOATING_POINT_HAS_QUIET_NAN(FLOAT128X)
#		define Z_FLOAT128X_QUIET_NAN Z_FLOATING_POINT_QUIET_NAN(FLOAT128X)
#	endif

#endif

#if Z_DIALECT_HAS_TYPE(C, DECIMAL32)

	typedef _Decimal32		       zdecimal32;
#	define Z_DECIMAL32		       Z_SUFFIX_F
#	define Z_DECIMAL32_FUNDAMENTAL	       Z_FUNDAMENTAL_DECIMAL32
#	define Z_DECIMAL32_FIXED_FUNDAMENTAL   Z_FUNDAMENTAL_DFP32
#	define Z_DECIMAL32_NUMBER_FORMAT       Z_NUMBER_FORMAT_IEEE_754_DECIMAL32
#	define Z_DECIMAL32_BITS		       32
#	define Z_DECIMAL32_DIGITS_10	       Z_IEEE_754_DECIMAL32_DIGITS_10
#	define Z_DECIMAL32_MAXIMUM_DIGITS_10   Z_IEEE_754_DECIMAL32_MAXIMUM_DIGITS_10
#	define Z_DECIMAL32_RADIX	       Z_IEEE_754_DECIMAL32_RADIX
#	define Z_DECIMAL32_SIGNIFICAND_DIGITS  Z_IEEE_754_DECIMAL32_SIGNIFICAND_DIGITS
#	define Z_DECIMAL32_EXPONENT_MAXIMUM    Z_IEEE_754_DECIMAL32_EXPONENT_MAXIMUM
#	define Z_DECIMAL32_EXPONENT_MINIMUM    Z_IEEE_754_DECIMAL32_EXPONENT_MINIMUM
#	define Z_DECIMAL32_EXPONENT_10_MAXIMUM Z_IEEE_754_DECIMAL32_EXPONENT_10_MAXIMUM
#	define Z_DECIMAL32_EXPONENT_10_MINIMUM Z_IEEE_754_DECIMAL32_EXPONENT_10_MINIMUM
#	define Z_DECIMAL32_EPSILON	       Z_DECIMAL32(Z_IEEE_754_DECIMAL32_EPSILON)
#	define Z_DECIMAL32_MAXIMUM	       Z_DECIMAL32(Z_IEEE_754_DECIMAL32_MAXIMUM)
#	define Z_DECIMAL32_MINIMUM	       Z_DECIMAL32(Z_IEEE_754_DECIMAL32_MINIMUM)
#	define Z_DECIMAL32_DENORMAL_MINIMUM    Z_DECIMAL32(Z_IEEE_754_DECIMAL32_DENORMAL_MINIMUM)

#	if Z_FLOATING_POINT_HAS_INFINITY(DECIMAL32)
#		define Z_DECIMAL32_INFINITY Z_FLOATING_POINT_INFINITY(DECIMAL32)
#	endif

#	if Z_FLOATING_POINT_HAS_NAN(DECIMAL32)
#		define Z_DECIMAL32_NAN Z_FLOATING_POINT_NAN(DECIMAL32)
#	endif

#	if Z_FLOATING_POINT_HAS_QUIET_NAN(DECIMAL32)
#		define Z_DECIMAL32_QUIET_NAN Z_FLOATING_POINT_QUIET_NAN(DECIMAL32)
#	endif

#endif

#if Z_DIALECT_HAS_TYPE(C, DECIMAL64)

	typedef _Decimal64		       zdecimal64;
#	define Z_DECIMAL64		       Z_SUFFIX_F
#	define Z_DECIMAL64_FUNDAMENTAL	       Z_FUNDAMENTAL_DECIMAL64
#	define Z_DECIMAL64_FIXED_FUNDAMENTAL   Z_FUNDAMENTAL_DFP64
#	define Z_DECIMAL64_NUMBER_FORMAT       Z_NUMBER_FORMAT_IEEE_754_DECIMAL64
#	define Z_DECIMAL64_BITS		       64
#	define Z_DECIMAL64_DIGITS_10	       Z_IEEE_754_DECIMAL64_DIGITS_10
#	define Z_DECIMAL64_MAXIMUM_DIGITS_10   Z_IEEE_754_DECIMAL64_MAXIMUM_DIGITS_10
#	define Z_DECIMAL64_RADIX	       Z_IEEE_754_DECIMAL64_RADIX
#	define Z_DECIMAL64_SIGNIFICAND_DIGITS  Z_IEEE_754_DECIMAL64_SIGNIFICAND_DIGITS
#	define Z_DECIMAL64_EXPONENT_MAXIMUM    Z_IEEE_754_DECIMAL64_EXPONENT_MAXIMUM
#	define Z_DECIMAL64_EXPONENT_MINIMUM    Z_IEEE_754_DECIMAL64_EXPONENT_MINIMUM
#	define Z_DECIMAL64_EXPONENT_10_MAXIMUM Z_IEEE_754_DECIMAL64_EXPONENT_10_MAXIMUM
#	define Z_DECIMAL64_EXPONENT_10_MINIMUM Z_IEEE_754_DECIMAL64_EXPONENT_10_MINIMUM
#	define Z_DECIMAL64_EPSILON	       Z_DECIMAL64(Z_IEEE_754_DECIMAL64_EPSILON)
#	define Z_DECIMAL64_MAXIMUM	       Z_DECIMAL64(Z_IEEE_754_DECIMAL64_MAXIMUM)
#	define Z_DECIMAL64_MINIMUM	       Z_DECIMAL64(Z_IEEE_754_DECIMAL64_MINIMUM)
#	define Z_DECIMAL64_DENORMAL_MINIMUM    Z_DECIMAL64(Z_IEEE_754_DECIMAL64_DENORMAL_MINIMUM)

#	if Z_FLOATING_POINT_HAS_INFINITY(DECIMAL64)
#		define Z_DECIMAL64_INFINITY Z_FLOATING_POINT_INFINITY(DECIMAL64)
#	endif

#	if Z_FLOATING_POINT_HAS_NAN(DECIMAL64)
#		define Z_DECIMAL64_NAN Z_FLOATING_POINT_NAN(DECIMAL64)
#	endif

#	if Z_FLOATING_POINT_HAS_QUIET_NAN(DECIMAL64)
#		define Z_DECIMAL64_QUIET_NAN Z_FLOATING_POINT_QUIET_NAN(DECIMAL64)
#	endif

#endif

#if Z_DIALECT_HAS_TYPE(C, DECIMAL128)

	typedef _Decimal128			zdecimal128;
#	define Z_DECIMAL128			Z_SUFFIX_F
#	define Z_DECIMAL128_FUNDAMENTAL		Z_FUNDAMENTAL_DECIMAL128
#	define Z_DECIMAL128_FIXED_FUNDAMENTAL	Z_FUNDAMENTAL_DFP128
#	define Z_DECIMAL128_NUMBER_FORMAT	Z_NUMBER_FORMAT_IEEE_754_DECIMAL128
#	define Z_DECIMAL128_BITS		128
#	define Z_DECIMAL128_DIGITS_10		Z_IEEE_754_DECIMAL128_DIGITS_10
#	define Z_DECIMAL128_MAXIMUM_DIGITS_10	Z_IEEE_754_DECIMAL128_MAXIMUM_DIGITS_10
#	define Z_DECIMAL128_RADIX		Z_IEEE_754_DECIMAL128_RADIX
#	define Z_DECIMAL128_SIGNIFICAND_DIGITS	Z_IEEE_754_DECIMAL128_SIGNIFICAND_DIGITS
#	define Z_DECIMAL128_EXPONENT_MAXIMUM	Z_IEEE_754_DECIMAL128_EXPONENT_MAXIMUM
#	define Z_DECIMAL128_EXPONENT_MINIMUM	Z_IEEE_754_DECIMAL128_EXPONENT_MINIMUM
#	define Z_DECIMAL128_EXPONENT_10_MAXIMUM Z_IEEE_754_DECIMAL128_EXPONENT_10_MAXIMUM
#	define Z_DECIMAL128_EXPONENT_10_MINIMUM Z_IEEE_754_DECIMAL128_EXPONENT_10_MINIMUM
#	define Z_DECIMAL128_EPSILON		Z_DECIMAL128(Z_IEEE_754_DECIMAL128_EPSILON)
#	define Z_DECIMAL128_MAXIMUM		Z_DECIMAL128(Z_IEEE_754_DECIMAL128_MAXIMUM)
#	define Z_DECIMAL128_MINIMUM		Z_DECIMAL128(Z_IEEE_754_DECIMAL128_MINIMUM)
#	define Z_DECIMAL128_DENORMAL_MINIMUM	Z_DECIMAL128(Z_IEEE_754_DECIMAL128_DENORMAL_MINIMUM)

#	if Z_FLOATING_POINT_HAS_INFINITY(DECIMAL128)
#		define Z_DECIMAL128_INFINITY Z_FLOATING_POINT_INFINITY(DECIMAL128)
#	endif

#	if Z_FLOATING_POINT_HAS_NAN(DECIMAL128)
#		define Z_DECIMAL128_NAN Z_FLOATING_POINT_NAN(DECIMAL128)
#	endif

#	if Z_FLOATING_POINT_HAS_QUIET_NAN(DECIMAL128)
#		define Z_DECIMAL128_QUIET_NAN Z_FLOATING_POINT_QUIET_NAN(DECIMAL128)
#	endif

#endif

#if Z_DIALECT_HAS_TYPE(C, DECIMAL64X)

	typedef _Decimal64x			zdecimal64x;
#	define Z_DECIMAL64X			Z_SUFFIX_F
#	define Z_DECIMAL64X_FUNDAMENTAL		Z_FUNDAMENTAL_DECIMAL
#	define Z_DECIMAL64X_FIXED_FUNDAMENTAL	Z_DECIMALING_POINT_FIXED_FUNDAMENTAL(DECIMAL64X)
#	define Z_DECIMAL64X_NUMBER_FORMAT	Z_TYPE_NUMBER_FORMAT		    (DECIMAL64X)
#	define Z_DECIMAL64X_BITS		Z_TYPE_BITS			    (DECIMAL64X)
#	define Z_DECIMAL64X_DIGITS_10		Z_TYPE_DIGITS_10		    (DECIMAL64X)
#	define Z_DECIMAL64X_MAXIMUM_DIGITS_10	Z_TYPE_MAXIMUM_DIGITS_10	    (DECIMAL64X)
#	define Z_DECIMAL64X_RADIX		Z_TYPE_RADIX			    (DECIMAL64X)
#	define Z_DECIMAL64X_SIGNIFICAND_DIGITS	Z_TYPE_SIGNIFICAND_DIGITS	    (DECIMAL64X)
#	define Z_DECIMAL64X_EXPONENT_MAXIMUM	Z_TYPE_EXPONENT_MAXIMUM		    (DECIMAL64X)
#	define Z_DECIMAL64X_EXPONENT_MINIMUM	Z_TYPE_EXPONENT_MINIMUM		    (DECIMAL64X)
#	define Z_DECIMAL64X_EXPONENT_10_MAXIMUM Z_TYPE_EXPONENT_10_MAXIMUM	    (DECIMAL64X)
#	define Z_DECIMAL64X_EXPONENT_10_MINIMUM Z_TYPE_EXPONENT_10_MINIMUM	    (DECIMAL64X)
#	define Z_DECIMAL64X_EPSILON		Z_TYPE_EPSILON			    (DECIMAL64X)
#	define Z_DECIMAL64X_MAXIMUM		Z_TYPE_MAXIMUM			    (DECIMAL64X)
#	define Z_DECIMAL64X_MINIMUM		Z_TYPE_MINIMUM			    (DECIMAL64X)
#	define Z_DECIMAL64X_DENORMAL_MINIMUM	Z_TYPE_DENORMAL_MINIMUM		    (DECIMAL64X)

#	if Z_DECIMALING_POINT_HAS_INFINITY(DECIMAL64X)
#		define Z_DECIMAL64X_INFINITY Z_DECIMALING_POINT_INFINITY(DECIMAL64X)
#	endif

#	if Z_DECIMALING_POINT_HAS_NAN(DECIMAL64X)
#		define Z_DECIMAL64X_NAN Z_DECIMALING_POINT_NAN(DECIMAL64X)
#	endif

#	if Z_DECIMALING_POINT_HAS_QUIET_NAN(DECIMAL64X)
#		define Z_DECIMAL64X_QUIET_NAN Z_DECIMALING_POINT_QUIET_NAN(DECIMAL64X)
#	endif

#endif

#if Z_DIALECT_HAS_TYPE(C, DECIMAL128X)

	typedef _Decimal128x			 zdecimal128x;
#	define Z_DECIMAL128X			 Z_SUFFIX_F
#	define Z_DECIMAL128X_FUNDAMENTAL	 Z_FUNDAMENTAL_DECIMAL
#	define Z_DECIMAL128X_FIXED_FUNDAMENTAL	 Z_DECIMALING_POINT_FIXED_FUNDAMENTAL(DECIMAL128X)
#	define Z_DECIMAL128X_NUMBER_FORMAT	 Z_TYPE_NUMBER_FORMAT		     (DECIMAL128X)
#	define Z_DECIMAL128X_BITS		 Z_TYPE_BITS			     (DECIMAL128X)
#	define Z_DECIMAL128X_DIGITS_10		 Z_TYPE_DIGITS_10		     (DECIMAL128X)
#	define Z_DECIMAL128X_MAXIMUM_DIGITS_10	 Z_TYPE_MAXIMUM_DIGITS_10	     (DECIMAL128X)
#	define Z_DECIMAL128X_RADIX		 Z_TYPE_RADIX			     (DECIMAL128X)
#	define Z_DECIMAL128X_SIGNIFICAND_DIGITS	 Z_TYPE_SIGNIFICAND_DIGITS	     (DECIMAL128X)
#	define Z_DECIMAL128X_EXPONENT_MAXIMUM	 Z_TYPE_EXPONENT_MAXIMUM	     (DECIMAL128X)
#	define Z_DECIMAL128X_EXPONENT_MINIMUM	 Z_TYPE_EXPONENT_MINIMUM	     (DECIMAL128X)
#	define Z_DECIMAL128X_EXPONENT_10_MAXIMUM Z_TYPE_EXPONENT_10_MAXIMUM	     (DECIMAL128X)
#	define Z_DECIMAL128X_EXPONENT_10_MINIMUM Z_TYPE_EXPONENT_10_MINIMUM	     (DECIMAL128X)
#	define Z_DECIMAL128X_EPSILON		 Z_TYPE_EPSILON			     (DECIMAL128X)
#	define Z_DECIMAL128X_MAXIMUM		 Z_TYPE_MAXIMUM			     (DECIMAL128X)
#	define Z_DECIMAL128X_MINIMUM		 Z_TYPE_MINIMUM			     (DECIMAL128X)
#	define Z_DECIMAL128X_DENORMAL_MINIMUM	 Z_TYPE_DENORMAL_MINIMUM	     (DECIMAL128X)

#	if Z_DECIMALING_POINT_HAS_INFINITY(DECIMAL128X)
#		define Z_DECIMAL128X_INFINITY Z_DECIMALING_POINT_INFINITY(DECIMAL128X)
#	endif

#	if Z_DECIMALING_POINT_HAS_NAN(DECIMAL128X)
#		define Z_DECIMAL128X_NAN Z_DECIMALING_POINT_NAN(DECIMAL128X)
#	endif

#	if Z_DECIMALING_POINT_HAS_QUIET_NAN(DECIMAL128X)
#		define Z_DECIMAL128X_QUIET_NAN Z_DECIMALING_POINT_QUIET_NAN(DECIMAL128X)
#	endif

#endif

#if Z_DIALECT_HAS_TYPE(C, DECIMAL128X)

	typedef _Decimal128x			 zdecimal128x;
#	define Z_DECIMAL128X			 Z_SUFFIX_F
#	define Z_DECIMAL128X_FUNDAMENTAL	 Z_FUNDAMENTAL_DECIMAL
#	define Z_DECIMAL128X_FIXED_FUNDAMENTAL	 Z_DECIMALING_POINT_FIXED_FUNDAMENTAL(DECIMAL128X)
#	define Z_DECIMAL128X_NUMBER_FORMAT	 Z_TYPE_NUMBER_FORMAT		     (DECIMAL128X)
#	define Z_DECIMAL128X_BITS		 Z_TYPE_BITS			     (DECIMAL128X)
#	define Z_DECIMAL128X_DIGITS_10		 Z_TYPE_DIGITS_10		     (DECIMAL128X)
#	define Z_DECIMAL128X_MAXIMUM_DIGITS_10	 Z_TYPE_MAXIMUM_DIGITS_10	     (DECIMAL128X)
#	define Z_DECIMAL128X_RADIX		 Z_TYPE_RADIX			     (DECIMAL128X)
#	define Z_DECIMAL128X_SIGNIFICAND_DIGITS	 Z_TYPE_SIGNIFICAND_DIGITS	     (DECIMAL128X)
#	define Z_DECIMAL128X_EXPONENT_MAXIMUM	 Z_TYPE_EXPONENT_MAXIMUM	     (DECIMAL128X)
#	define Z_DECIMAL128X_EXPONENT_MINIMUM	 Z_TYPE_EXPONENT_MINIMUM	     (DECIMAL128X)
#	define Z_DECIMAL128X_EXPONENT_10_MAXIMUM Z_TYPE_EXPONENT_10_MAXIMUM	     (DECIMAL128X)
#	define Z_DECIMAL128X_EXPONENT_10_MINIMUM Z_TYPE_EXPONENT_10_MINIMUM	     (DECIMAL128X)
#	define Z_DECIMAL128X_EPSILON		 Z_TYPE_EPSILON			     (DECIMAL128X)
#	define Z_DECIMAL128X_MAXIMUM		 Z_TYPE_MAXIMUM			     (DECIMAL128X)
#	define Z_DECIMAL128X_MINIMUM		 Z_TYPE_MINIMUM			     (DECIMAL128X)
#	define Z_DECIMAL128X_DENORMAL_MINIMUM	 Z_TYPE_DENORMAL_MINIMUM	     (DECIMAL128X)

#	if Z_DECIMALING_POINT_HAS_INFINITY(DECIMAL128X)
#		define Z_DECIMAL128X_INFINITY Z_DECIMALING_POINT_INFINITY(DECIMAL128X)
#	endif

#	if Z_DECIMALING_POINT_HAS_NAN(DECIMAL128X)
#		define Z_DECIMAL128X_NAN Z_DECIMALING_POINT_NAN(DECIMAL128X)
#	endif

#	if Z_DECIMALING_POINT_HAS_QUIET_NAN(DECIMAL128X)
#		define Z_DECIMAL128X_QUIET_NAN Z_DECIMALING_POINT_QUIET_NAN(DECIMAL128X)
#	endif

#endif

/* MARK: - Object size integral types */

#define Z_USIZE_BITS		  Z_DATA_MODEL_BITS(SIZE)

typedef zuintn(USIZE)		  zusize;
#define Z_USIZE			  Z_TYPE		   (USIZE)
#define Z_USIZE_FUNDAMENTAL	  Z_TYPE_FUNDAMENTAL	   (USIZE)
#define Z_USIZE_FIXED_FUNDAMENTAL Z_UINTN_FIXED_FUNDAMENTAL(USIZE)
#define Z_USIZE_NUMBER_FORMAT	  Z_TYPE_NUMBER_FORMAT	   (USIZE)
#define Z_USIZE_ENDIANNESS	  Z_TYPE_ENDIANNESS	   (USIZE)
#define Z_USIZE_MAXIMUM		  Z_TYPE_MAXIMUM	   (USIZE)
#define Z_USIZE_MINIMUM		  Z_TYPE_MINIMUM	   (USIZE)

#define Z_SSIZE_BITS		  Z_DATA_MODEL_BITS(SIZE)

typedef zsintn(SSIZE)		  zssize;
#define Z_SSIZE			  Z_TYPE		   (SSIZE)
#define Z_SSIZE_FUNDAMENTAL	  Z_TYPE_FUNDAMENTAL	   (SSIZE)
#define Z_SSIZE_FIXED_FUNDAMENTAL Z_SINTN_FIXED_FUNDAMENTAL(SSIZE)
#define Z_SSIZE_NUMBER_FORMAT	  Z_TYPE_NUMBER_FORMAT	   (SSIZE)
#define Z_SSIZE_ENDIANNESS	  Z_TYPE_ENDIANNESS	   (SSIZE)
#define Z_SSIZE_MAXIMUM		  Z_TYPE_MAXIMUM	   (SSIZE)
#define Z_SSIZE_MINIMUM		  Z_TYPE_MINIMUM	   (SSIZE)

/* MARK: - Maximum size integral types */

#if defined(Z_UINT128)
#	define Z_UINTMAX_BITS 128

#elif defined(Z_UINT64)
#	define Z_UINTMAX_BITS 64

#elif defined(Z_ULLONG)
#	define Z_UINTMAX_BITS Z_ULLONG_BITS

#else
#	define Z_UINTMAX_BITS Z_ULONG_BITS
#endif

typedef zuintn(UINTMAX)		    zuintmax;
#define Z_UINTMAX		    Z_TYPE		     (UINTMAX)
#define Z_UINTMAX_FUNDAMENTAL	    Z_TYPE_FUNDAMENTAL	     (UINTMAX)
#define Z_UINTMAX_FIXED_FUNDAMENTAL Z_UINTN_FIXED_FUNDAMENTAL(UINTMAX)
#define Z_UINTMAX_NUMBER_FORMAT	    Z_TYPE_NUMBER_FORMAT     (UINTMAX)
#define Z_UINTMAX_ENDIANNESS	    Z_TYPE_ENDIANNESS	     (UINTMAX)
#define Z_UINTMAX_MAXIMUM	    Z_TYPE_MAXIMUM	     (UINTMAX)
#define Z_UINTMAX_MINIMUM	    Z_TYPE_MINIMUM	     (UINTMAX)

#if defined(Z_SINT128)
#	define Z_SINTMAX_BITS 128

#elif defined(Z_SINT64)
#	define Z_SINTMAX_BITS 64

#elif defined(Z_SLLONG)
#	define Z_SINTMAX_BITS Z_SLLONG_BITS

#else
#	define Z_SINTMAX_BITS Z_SLONG_BITS
#endif

typedef zsintn(SINTMAX)		    zsintmax;
#define Z_SINTMAX		    Z_TYPE		     (SINTMAX)
#define Z_SINTMAX_FUNDAMENTAL	    Z_TYPE_FUNDAMENTAL	     (SINTMAX)
#define Z_SINTMAX_FIXED_FUNDAMENTAL Z_SINTN_FIXED_FUNDAMENTAL(SINTMAX)
#define Z_SINTMAX_NUMBER_FORMAT	    Z_TYPE_NUMBER_FORMAT     (SINTMAX)
#define Z_SINTMAX_ENDIANNESS	    Z_TYPE_ENDIANNESS	     (SINTMAX)
#define Z_SINTMAX_MAXIMUM	    Z_TYPE_MAXIMUM	     (SINTMAX)
#define Z_SINTMAX_MINIMUM	    Z_TYPE_MINIMUM	     (SINTMAX)

#if Z_UINTMAX_BITS >= Z_SINTMAX_BITS

	typedef zuintmax		  zintmax;
#	define Z_INTMAX			  Z_UINTMAX
#	define Z_INTMAX_FUNDAMENTAL	  Z_UINTMAX_FUNDAMENTAL
#	define Z_INTMAX_FIXED_FUNDAMENTAL Z_UINTMAX_FIXED_FUNDAMENTAL
#	define Z_INTMAX_NUMBER_FORMAT	  Z_UINTMAX_NUMBER_FORMAT
#	define Z_INTMAX_ENDIANNESS	  Z_UINTMAX_ENDIANNESS
#	define Z_INTMAX_BITS		  Z_UINTMAX_BITS

#else

	typedef zsintmax		  zintmax;
#	define Z_INTMAX			  Z_SINTMAX
#	define Z_INTMAX_FUNDAMENTAL	  Z_SINTMAX_FUNDAMENTAL
#	define Z_INTMAX_FIXED_FUNDAMENTAL Z_SINTMAX_FIXED_FUNDAMENTAL
#	define Z_INTMAX_NUMBER_FORMAT	  Z_SINTMAX_NUMBER_FORMAT
#	define Z_INTMAX_ENDIANNESS	  Z_SINTMAX_ENDIANNESS
#	define Z_INTMAX_BITS		  Z_SINTMAX_BITS

#endif

/* MARK: - Pointer size integral types */

#define Z_POINTER_BITS		    Z_DATA_MODEL_BITS(POINTER)

#define Z_UINTPTR_BITS		    Z_POINTER_BITS

typedef zuintn(UINTPTR)		    zuintptr;
#define Z_UINTPTR		    Z_TYPE		     (UINTPTR)
#define Z_UINTPTR_FUNDAMENTAL	    Z_TYPE_FUNDAMENTAL	     (UINTPTR)
#define Z_UINTPTR_FIXED_FUNDAMENTAL Z_UINTN_FIXED_FUNDAMENTAL(UINTPTR)
#define Z_UINTPTR_NUMBER_FORMAT	    Z_TYPE_NUMBER_FORMAT     (UINTPTR)
#define Z_UINTPTR_ENDIANNESS	    Z_TYPE_ENDIANNESS	     (UINTPTR)
#define Z_UINTPTR_MAXIMUM	    Z_TYPE_MAXIMUM	     (UINTPTR)
#define Z_UINTPTR_MINIMUM	    Z_TYPE_MINIMUM	     (UINTPTR)

#define Z_SINTPTR_BITS		    Z_POINTER_BITS

typedef zsintn(SINTPTR)		    zsintptr;
#define Z_SINTPTR		    Z_TYPE		     (SINTPTR)
#define Z_SINTPTR_FUNDAMENTAL	    Z_TYPE_FUNDAMENTAL	     (SINTPTR)
#define Z_SINTPTR_FIXED_FUNDAMENTAL Z_SINTN_FIXED_FUNDAMENTAL(SINTPTR)
#define Z_SINTPTR_NUMBER_FORMAT	    Z_TYPE_NUMBER_FORMAT     (SINTPTR)
#define Z_SINTPTR_ENDIANNESS	    Z_TYPE_ENDIANNESS	     (SINTPTR)
#define Z_SINTPTR_MAXIMUM	    Z_TYPE_MAXIMUM	     (SINTPTR)
#define Z_SINTPTR_MINIMUM	    Z_TYPE_MINIMUM	     (SINTPTR)

/* MARK: - Optimum maximum size integral types */

#if Z_CPU_BITS(TOP_INTEGRAL) >= 128 && defined(Z_UINT128)
#	define Z_UINTTOP_BITS 128

#elif Z_CPU_BITS(TOP_INTEGRAL) >= 64 && defined(Z_UINT64)
#	define Z_UINTTOP_BITS 64

#elif Z_CPU_BITS(TOP_INTEGRAL) == 32
#	define Z_UINTTOP_BITS 32

#else
#	define Z_UINTTOP_BITS 16
#endif

typedef zuintn(UINTTOP)		    zuinttop;
#define Z_UINTTOP		    Z_TYPE		     (UINTTOP)
#define Z_UINTTOP_FUNDAMENTAL	    Z_TYPE_FUNDAMENTAL	     (UINTTOP)
#define Z_UINTTOP_FIXED_FUNDAMENTAL Z_UINTN_FIXED_FUNDAMENTAL(UINTTOP)
#define Z_UINTTOP_NUMBER_FORMAT	    Z_TYPE_NUMBER_FORMAT     (UINTTOP)
#define Z_UINTTOP_ENDIANNESS	    Z_TYPE_ENDIANNESS	     (UINTTOP)
#define Z_UINTTOP_MAXIMUM	    Z_TYPE_MAXIMUM	     (UINTTOP)
#define Z_UINTTOP_MINIMUM	    Z_TYPE_MINIMUM	     (UINTTOP)

#if Z_CPU_BITS(TOP_INTEGRAL) >= 128 && defined(Z_SINT128)
#	define Z_SINTTOP_BITS 128

#elif Z_CPU_BITS(TOP_INTEGRAL) >= 64 && defined(Z_SINT64)
#	define Z_SINTTOP_BITS 64

#elif Z_CPU_BITS(TOP_INTEGRAL) == 32
#	define Z_SINTTOP_BITS 32

#else
#	define Z_SINTTOP_BITS 16
#endif

typedef zsintn(SINTTOP)		    zsinttop;
#define Z_SINTTOP		    Z_TYPE		     (SINTTOP)
#define Z_SINTTOP_FUNDAMENTAL	    Z_TYPE_FUNDAMENTAL	     (SINTTOP)
#define Z_SINTTOP_FIXED_FUNDAMENTAL Z_SINTN_FIXED_FUNDAMENTAL(SINTTOP)
#define Z_SINTTOP_NUMBER_FORMAT	    Z_TYPE_NUMBER_FORMAT     (SINTTOP)
#define Z_SINTTOP_ENDIANNESS	    Z_TYPE_ENDIANNESS	     (SINTTOP)
#define Z_SINTTOP_MAXIMUM	    Z_TYPE_MAXIMUM	     (SINTTOP)
#define Z_SINTTOP_MINIMUM	    Z_TYPE_MINIMUM	     (SINTTOP)

#if Z_UINTTOP_BITS >= Z_SINTTOP_BITS

	typedef zuinttop		  zinttop;
#	define Z_INTTOP			  Z_UINTTOP
#	define Z_INTTOP_FUNDAMENTAL	  Z_UINTTOP_FUNDAMENTAL
#	define Z_INTTOP_FIXED_FUNDAMENTAL Z_UINTTOP_FIXED_FUNDAMENTAL
#	define Z_INTTOP_NUMBER_FORMAT	  Z_UINTTOP_NUMBER_FORMAT
#	define Z_INTTOP_ENDIANNESS	  Z_UINTTOP_ENDIANNESS
#	define Z_INTTOP_BITS		  Z_UINTTOP_BITS

#else

	typedef zsinttop		  zinttop;
#	define Z_INTTOP			  Z_SINTTOP
#	define Z_INTTOP_FUNDAMENTAL	  Z_SINTTOP_FUNDAMENTAL
#	define Z_INTTOP_FIXED_FUNDAMENTAL Z_SINTTOP_FIXED_FUNDAMENTAL
#	define Z_INTTOP_NUMBER_FORMAT	  Z_SINTTOP_NUMBER_FORMAT
#	define Z_INTTOP_ENDIANNESS	  Z_SINTTOP_ENDIANNESS
#	define Z_INTTOP_BITS		  Z_SINTTOP_BITS

#endif

/* MARK: - Default types */

#ifdef Z_UINT8

	typedef zuint8			   zboolean;
#	define Z_BOOLEAN_FUNDAMENTAL	   Z_UINT8_FUNDAMENTAL
#	define Z_BOOLEAN_FIXED_FUNDAMENTAL Z_UINT8_FIXED_FUNDAMENTAL
#	define Z_BOOLEAN_NUMBER_FORMAT	   Z_UINT8_NUMBER_FORMAT
#	define Z_BOOLEAN_BITS		   Z_UINT8_BITS

#else

	typedef zuchar			   zboolean;
#	define Z_BOOLEAN_FUNDAMENTAL	   Z_UCHAR_FUNDAMENTAL
#	define Z_BOOLEAN_FIXED_FUNDAMENTAL Z_UCHAR_FIXED_FUNDAMENTAL
#	define Z_BOOLEAN_NUMBER_FORMAT	   Z_UCHAR_NUMBER_FORMAT
#	define Z_BOOLEAN_BITS		   Z_UCHAR_BITS

#endif

#ifndef Z_NATURAL_FIXED_FUNDAMENTAL
#	define Z_NATURAL_FIXED_FUNDAMENTAL Z_ULONG_FIXED_FUNDAMENTAL
#endif

typedef ztype(NATURAL)		znatural;
#define Z_NATURAL		Z_TYPE		    (NATURAL)
#define Z_NATURAL_FUNDAMENTAL	Z_TYPE_FUNDAMENTAL  (NATURAL)
#define Z_NATURAL_NUMBER_FORMAT Z_TYPE_NUMBER_FORMAT(NATURAL)
#define Z_NATURAL_BITS		Z_TYPE_BITS	    (NATURAL)
#define Z_NATURAL_ENDIANNESS	Z_TYPE_ENDIANNESS   (NATURAL)
#define Z_NATURAL_MAXIMUM	Z_TYPE_MAXIMUM	    (NATURAL)
#define Z_NATURAL_MINIMUM	Z_TYPE_MINIMUM	    (NATURAL)

#ifndef Z_INTEGER_FIXED_FUNDAMENTAL
#	define Z_INTEGER_FIXED_FUNDAMENTAL Z_SLONG_FIXED_FUNDAMENTAL
#endif

typedef ztype(INTEGER)		zinteger;
#define Z_INTEGER		Z_TYPE		    (INTEGER)
#define Z_INTEGER_FUNDAMENTAL	Z_TYPE_FUNDAMENTAL  (INTEGER)
#define Z_INTEGER_NUMBER_FORMAT Z_TYPE_NUMBER_FORMAT(INTEGER)
#define Z_INTEGER_BITS		Z_TYPE_BITS	    (INTEGER)
#define Z_INTEGER_ENDIANNESS	Z_TYPE_ENDIANNESS   (INTEGER)
#define Z_INTEGER_MAXIMUM	Z_TYPE_MAXIMUM	    (INTEGER)
#define Z_INTEGER_MINIMUM	Z_TYPE_MINIMUM	    (INTEGER)

#ifndef Z_REAL_FIXED_FUNDAMENTAL

#	if defined(Z_DOUBLE)
#		define Z_REAL_FIXED_FUNDAMENTAL Z_DOUBLE_FIXED_FUNDAMENTAL

#	elif defined(Z_FLOAT)
#		define Z_REAL_FIXED_FUNDAMENTAL Z_DOUBLE_FIXED_FUNDAMENTAL
#	endif

#endif

#ifdef Z_REAL_FIXED_FUNDAMENTAL

	typedef ztype(REAL)		  zreal;
#	define Z_REAL			  Z_TYPE		    (REAL)
#	define Z_REAL_FUNDAMENTAL	  Z_TYPE_FUNDAMENTAL	    (REAL)
#	define Z_REAL_NUMBER_FORMAT	  Z_TYPE_NUMBER_FORMAT	    (REAL)
#	define Z_REAL_BITS		  Z_TYPE_BITS		    (REAL)
#	define Z_REAL_DECIMAL_DIGITS	  Z_TYPE_DECIMAL_DIGITS	    (REAL)
#	define Z_REAL_SIGNIFICAND_DIGITS  Z_TYPE_SIGNIFICAND_DIGITS (REAL)
#	define Z_REAL_EXPONENT_RADIX	  Z_TYPE_EXPONENT_RADIX	    (REAL)
#	define Z_REAL_EXPONENT_MINIMUM	  Z_TYPE_EXPONENT_MINIMUM   (REAL)
#	define Z_REAL_EXPONENT_MAXIMUM	  Z_TYPE_EXPONENT_MAXIMUM   (REAL)
#	define Z_REAL_EXPONENT_10_MINIMUM Z_TYPE_EXPONENT_10_MINIMUM(REAL)
#	define Z_REAL_EXPONENT_10_MAXIMUM Z_TYPE_EXPONENT_10_MAXIMUM(REAL)
#	define Z_REAL_EPSILON		  Z_TYPE_EPSILON	    (REAL)
#	define Z_REAL_MAXIMUM		  Z_TYPE_MAXIMUM	    (REAL)
#	define Z_REAL_MINIMUM		  Z_TYPE_MINIMUM	    (REAL)
#	define Z_REAL_INFINITY		  Z_TYPE_INFINITY	    (REAL)
#	define Z_REAL_NAN		  Z_TYPE_NAN		    (REAL)

#endif

#endif /* Z_types_fundamental_H */
