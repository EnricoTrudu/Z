/* Z Kit - types/fundamental.h
 _____  _______________
/_   /_/  -_/_   _/  _ |
 /____/\___/ /__//___/_| Kit
Copyright (C) 2006-2019 Manuel Sainz de Baranda y Go√±i.
Released under the terms of the GNU Lesser General Public License v3. */

#ifndef Z_types_fundamental_H
#define Z_types_fundamental_H

#include <Z/inspection/CPU.h>
#include <Z/inspection/floating-point.h>
#include <Z/inspection/data model.h>
#include <Z/macros/templating.h>

/* MARK: - Fixed width numeric types */

#if Z_DATA_MODEL_HAS_TYPE(UINT8)

	typedef Z_DATA_MODEL_TYPE(UINT8)  zuint8;
#	define Z_UINT8			  Z_DATA_MODEL_LITERAL	  (UINT8)
#	define Z_UINT8_FUNDAMENTAL	  Z_DATA_MODEL_FUNDAMENTAL(UINT8)
#	define Z_UINT8_FIXED_FUNDAMENTAL  Z_FUNDAMENTAL_UINT8
#	define Z_UINT8_NUMBER_FORMAT	  Z_NUMBER_FORMAT_8BIT_NATURAL
#	define Z_UINT8_BITS		  8
#	define Z_UINT8_SIZE		  1
#	define Z_UINT8_MINIMUM		  Z_UINT8(0)
#	define Z_UINT8_MAXIMUM		  Z_UINT8(255)

#endif

#if Z_DATA_MODEL_HAS_TYPE(SINT8)

	typedef Z_DATA_MODEL_TYPE(SINT8)  zsint8;
#	define Z_SINT8			  Z_DATA_MODEL_LITERAL	  (SINT8)
#	define Z_SINT8_FUNDAMENTAL	  Z_DATA_MODEL_FUNDAMENTAL(SINT8)
#	define Z_SINT8_FIXED_FUNDAMENTAL  Z_FUNDAMENTAL_SINT8
#	define Z_SINT8_NUMBER_FORMAT	  Z_CPU_INTEGER_FORMAT(8)
#	define Z_SINT8_BITS		  8
#	define Z_SINT8_SIZE		  1
#	define Z_SINT8_MINIMUM		  Z_SINT8(-128)
#	define Z_SINT8_MAXIMUM		  Z_SINT8( 127)

#endif

#if Z_DATA_MODEL_HAS_TYPE(UINT16)

	typedef Z_DATA_MODEL_TYPE(UINT16) zuint16;
#	define Z_UINT16			  Z_DATA_MODEL_LITERAL	  (UINT16)
#	define Z_UINT16_FUNDAMENTAL	  Z_DATA_MODEL_FUNDAMENTAL(UINT16)
#	define Z_UINT16_FIXED_FUNDAMENTAL Z_FUNDAMENTAL_UINT16
#	define Z_UINT16_NUMBER_FORMAT	  Z_NUMBER_FORMAT_16BIT_NATURAL
#	define Z_UINT16_ENDIANNESS	  Z_CPU_INTEGRAL_ENDIANNESS(16)
#	define Z_UINT16_BITS		  16
#	define Z_UINT16_SIZE		  2
#	define Z_UINT16_MINIMUM		  Z_UINT16(0)
#	define Z_UINT16_MAXIMUM		  Z_UINT16(65535)

#endif

#if Z_DATA_MODEL_HAS_TYPE(SINT16)

	typedef Z_DATA_MODEL_TYPE(SINT16) zsint16;
#	define Z_SINT16			  Z_DATA_MODEL_LITERAL	  (SINT16)
#	define Z_SINT16_FUNDAMENTAL	  Z_DATA_MODEL_FUNDAMENTAL(SINT16)
#	define Z_SINT16_FIXED_FUNDAMENTAL Z_FUNDAMENTAL_SINT16
#	define Z_SINT16_NUMBER_FORMAT	  Z_CPU_INTEGER_FORMAT	   (16)
#	define Z_SINT16_ENDIANNESS	  Z_CPU_INTEGRAL_ENDIANNESS(16)
#	define Z_SINT16_BITS		  16
#	define Z_SINT16_SIZE		  2
#	define Z_SINT16_MINIMUM		  Z_SINT16(-32768)
#	define Z_SINT16_MAXIMUM		  Z_SINT16( 32767)

#endif

#if Z_DATA_MODEL_HAS_TYPE(UINT32)

	typedef Z_DATA_MODEL_TYPE(UINT32) zuint32;
#	define Z_UINT32			  Z_DATA_MODEL_LITERAL	  (UINT32)
#	define Z_UINT32_FUNDAMENTAL	  Z_DATA_MODEL_FUNDAMENTAL(UINT32)
#	define Z_UINT32_FIXED_FUNDAMENTAL Z_FUNDAMENTAL_UINT32
#	define Z_UINT32_NUMBER_FORMAT	  Z_NUMBER_FORMAT_32BIT_NATURAL
#	define Z_UINT32_ENDIANNESS	  Z_CPU_INTEGRAL_ENDIANNESS(32)
#	define Z_UINT32_BITS		  32
#	define Z_UINT32_SIZE		  4
#	define Z_UINT32_MINIMUM		  Z_UINT32(0)
#	define Z_UINT32_MAXIMUM		  Z_UINT32(4294967295)

#endif

#if Z_DATA_MODEL_HAS_TYPE(SINT32)

	typedef Z_DATA_MODEL_TYPE(SINT32) zsint32;
#	define Z_SINT32			  Z_DATA_MODEL_LITERAL	  (SINT32)
#	define Z_SINT32_FUNDAMENTAL	  Z_DATA_MODEL_FUNDAMENTAL(SINT32)
#	define Z_SINT32_FIXED_FUNDAMENTAL Z_FUNDAMENTAL_SINT32
#	define Z_SINT32_NUMBER_FORMAT	  Z_CPU_INTEGER_FORMAT	   (32)
#	define Z_SINT32_ENDIANNESS	  Z_CPU_INTEGRAL_ENDIANNESS(32)
#	define Z_SINT32_BITS		  32
#	define Z_SINT32_SIZE		  4
#	define Z_SINT32_MINIMUM		  Z_SINT32(-2147483648)
#	define Z_SINT32_MAXIMUM		  Z_SINT32( 2147483647)

#endif

#if Z_DATA_MODEL_HAS_TYPE(UINT64)

	typedef Z_DATA_MODEL_TYPE(UINT64) zuint64;
#	define Z_UINT64_FUNDAMENTAL	  Z_DATA_MODEL_FUNDAMENTAL(UINT64)
#	define Z_UINT64_FIXED_FUNDAMENTAL Z_FUNDAMENTAL_UINT64
#	define Z_UINT64_NUMBER_FORMAT	  Z_NUMBER_FORMAT_64BIT_NATURAL
#	define Z_UINT64_ENDIANNESS	  Z_CPU_INTEGRAL_ENDIANNESS(64)
#	define Z_UINT64_BITS		  64
#	define Z_UINT64_SIZE		  8
#	define Z_UINT64_MINIMUM		  0

#	if Z_DATA_MODEL_HAS_LITERAL(UINT64)
#		define Z_UINT64		Z_DATA_MODEL_LITERAL(UINT64)
#		define Z_UINT64_MAXIMUM Z_UINT64(18446744073709551615)
#	else
#		define Z_UINT64		Z_SAME
#		define Z_UINT64_MAXIMUM (((zuint64)0) - 1)
#	endif

#endif

#if Z_DATA_MODEL_HAS_TYPE(SINT64)

	typedef Z_DATA_MODEL_TYPE(SINT64) zsint64;
#	define Z_SINT64_FUNDAMENTAL	  Z_DATA_MODEL_FUNDAMENTAL(SINT64)
#	define Z_SINT64_FIXED_FUNDAMENTAL Z_FUNDAMENTAL_SINT64
#	define Z_SINT64_NUMBER_FORMAT	  Z_CPU_INTEGER_FORMAT	   (64)
#	define Z_SINT64_ENDIANNESS	  Z_CPU_INTEGRAL_ENDIANNESS(64)
#	define Z_SINT64_BITS		  64
#	define Z_SINT64_SIZE		  8

#	if Z_DATA_MODEL_HAS_LITERAL(SINT64)
#		define Z_SINT64		Z_DATA_MODEL_LITERAL(SINT64)
#		define Z_SINT64_MAXIMUM Z_SINT64(9223372036854775807)
#		define Z_SINT64_MINIMUM (-Z_SINT64_MAXIMUM - Z_SINT64(1))
#	else
#		define Z_SINT64		Z_SAME
#		define Z_SINT64_MAXIMUM 0 /* TODO */
#		define Z_SINT64_MINIMUM 0 /* TODO */
#	endif

#endif

#if Z_DATA_MODEL_HAS_TYPE(UINT128)

	typedef Z_DATA_MODEL_TYPE(UINT128) zuint128;
#	define Z_UINT128_FUNDAMENTAL	   Z_DATA_MODEL_FUNDAMENTAL(UINT128)
#	define Z_UINT128_FIXED_FUNDAMENTAL Z_FUNDAMENTAL_UINT128
#	define Z_UINT128_NUMBER_FORMAT	   Z_NUMBER_FORMAT_128BIT_NATURAL
#	define Z_UINT128_ENDIANNESS	   Z_CPU_INTEGRAL_ENDIANNESS(128)
#	define Z_UINT128_BITS		   128
#	define Z_UINT128_SIZE		   16
#	define Z_UINT128_MINIMUM	   0

#	if Z_DATA_MODEL_HAS_LITERAL(UINT128)
#		define Z_UINT128	 Z_DATA_MODEL_LITERAL(UINT128)
#		define Z_UINT128_MAXIMUM Z_UINT128(340282366920938463463374607431768211455)
#	else
#		define Z_UINT128	 Z_SAME
#		define Z_UINT128_MAXIMUM (((zuint128)0) - 1)
#	endif

#endif

#if Z_DATA_MODEL_HAS_TYPE(SINT128)

	typedef Z_DATA_MODEL_TYPE(SINT128) zsint128;
#	define Z_SINT128_FUNDAMENTAL	   Z_DATA_MODEL_FUNDAMENTAL(SINT128)
#	define Z_SINT128_FIXED_FUNDAMENTAL Z_FUNDAMENTAL_SINT128
#	define Z_SINT128_NUMBER_FORMAT	   Z_CPU_INTEGER_FORMAT	    (128)
#	define Z_SINT128_ENDIANNESS	   Z_CPU_INTEGRAL_ENDIANNESS(128)
#	define Z_SINT128_BITS		   128
#	define Z_SINT128_SIZE		   16

#	if Z_DATA_MODEL_HAS_LITERAL(SINT128)
#		define Z_SINT128	 Z_DATA_MODEL_LITERAL(SINT128)
#		define Z_SINT128_MAXIMUM Z_SINT128(170141183460469231731687303715884105727)
#		define Z_SINT128_MINIMUM (-Z_SINT128_MAXIMUM - Z_SINT128(1))
#	else
#		define Z_SINT128	 Z_SAME
#		define Z_SINT128_MAXIMUM 0 /* TODO */
#		define Z_SINT128_MINIMUM 0 /* TODO */
#	endif

#endif

#if Z_FLOATING_POINT_HAS_TYPE(FLOAT16)

	typedef Z_FLOATING_POINT_TYPE(FLOAT16) zfloat16;
#	define Z_FLOAT16		       Z_FLOATING_POINT_LITERAL		   (FLOAT16)
#	define Z_FLOAT16_FUNDAMENTAL	       Z_FLOATING_POINT_FUNDAMENTAL	   (FLOAT16)
#	define Z_FLOAT16_FIXED_FUNDAMENTAL     Z_FUNDAMENTAL_FLOAT16
#	define Z_FLOAT16_NUMBER_FORMAT	       Z_NUMBER_FORMAT_IEEE_754_BINARY16
#	define Z_FLOAT16_BITS		       16
#	define Z_FLOAT16_SIZE		       2
#	define Z_FLOAT16_BIAS		       Z_FLOATING_POINT_BIAS		   (FLOAT16)
#	define Z_FLOAT16_DECIMAL_DIGITS	       Z_FLOATING_POINT_DECIMAL_DIGITS	   (FLOAT16)
#	define Z_FLOAT16_SIGNIFICAND_OFFSET    Z_FLOATING_POINT_SIGNIFICAND_OFFSET (FLOAT16)
#	define Z_FLOAT16_SIGNIFICAND_BITS      Z_FLOATING_POINT_SIGNIFICAND_BITS   (FLOAT16)
#	define Z_FLOAT16_SIGNIFICAND_DIGITS    Z_FLOATING_POINT_SIGNIFICAND_DIGITS (FLOAT16)
#	define Z_FLOAT16_EXPONENT_OFFSET       Z_FLOATING_POINT_EXPONENT_OFFSET	   (FLOAT16)
#	define Z_FLOAT16_EXPONENT_BITS	       Z_FLOATING_POINT_EXPONENT_BITS	   (FLOAT16)
#	define Z_FLOAT16_EXPONENT_RADIX	       Z_FLOATING_POINT_EXPONENT_RADIX	   (FLOAT16)
#	define Z_FLOAT16_EXPONENT_MINIMUM      Z_FLOATING_POINT_EXPONENT_MINIMUM   (FLOAT16)
#	define Z_FLOAT16_EXPONENT_MAXIMUM      Z_FLOATING_POINT_EXPONENT_MAXIMUM   (FLOAT16)
#	define Z_FLOAT16_EXPONENT_10_MINIMUM   Z_FLOATING_POINT_EXPONENT_10_MINIMUM(FLOAT16)
#	define Z_FLOAT16_EXPONENT_10_MAXIMUM   Z_FLOATING_POINT_EXPONENT_10_MAXIMUM(FLOAT16)
#	define Z_FLOAT16_SIGN_OFFSET	       Z_FLOATING_POINT_SIGN_OFFSET	   (FLOAT16)
#	define Z_FLOAT16_SIGN_BITS	       Z_FLOATING_POINT_SIGN_BITS	   (FLOAT16)
#	define Z_FLOAT16_EPSILON	       Z_FLOATING_POINT_EPSILON		   (FLOAT16)
#	define Z_FLOAT16_MINIMUM	       Z_FLOATING_POINT_MINIMUM		   (FLOAT16)
#	define Z_FLOAT16_MAXIMUM	       Z_FLOATING_POINT_MAXIMUM		   (FLOAT16)
#	define Z_FLOAT16_INFINITY	       Z_FLOATING_POINT_INFINITY	   (FLOAT16)
#	define Z_FLOAT16_NAN		       Z_FLOATING_POINT_NAN		   (FLOAT16)

#endif

#if Z_FLOATING_POINT_HAS_TYPE(FLOAT32)

	typedef Z_FLOATING_POINT_TYPE(FLOAT32) zfloat32;
#	define Z_FLOAT32		       Z_FLOATING_POINT_LITERAL		   (FLOAT32)
#	define Z_FLOAT32_FUNDAMENTAL	       Z_FLOATING_POINT_FUNDAMENTAL	   (FLOAT32)
#	define Z_FLOAT32_FIXED_FUNDAMENTAL     Z_FUNDAMENTAL_FLOAT32
#	define Z_FLOAT32_NUMBER_FORMAT	       Z_NUMBER_FORMAT_IEEE_754_BINARY32
#	define Z_FLOAT32_BITS		       32
#	define Z_FLOAT32_SIZE		       4
#	define Z_FLOAT32_BIAS		       Z_FLOATING_POINT_BIAS		   (FLOAT32)
#	define Z_FLOAT32_DECIMAL_DIGITS	       Z_FLOATING_POINT_DECIMAL_DIGITS	   (FLOAT32)
#	define Z_FLOAT32_SIGNIFICAND_OFFSET    Z_FLOATING_POINT_SIGNIFICAND_OFFSET (FLOAT32)
#	define Z_FLOAT32_SIGNIFICAND_BITS      Z_FLOATING_POINT_SIGNIFICAND_BITS   (FLOAT32)
#	define Z_FLOAT32_SIGNIFICAND_DIGITS    Z_FLOATING_POINT_SIGNIFICAND_DIGITS (FLOAT32)
#	define Z_FLOAT32_EXPONENT_OFFSET       Z_FLOATING_POINT_EXPONENT_OFFSET	   (FLOAT32)
#	define Z_FLOAT32_EXPONENT_BITS	       Z_FLOATING_POINT_EXPONENT_BITS	   (FLOAT32)
#	define Z_FLOAT32_EXPONENT_RADIX	       Z_FLOATING_POINT_EXPONENT_RADIX	   (FLOAT32)
#	define Z_FLOAT32_EXPONENT_MINIMUM      Z_FLOATING_POINT_EXPONENT_MINIMUM   (FLOAT32)
#	define Z_FLOAT32_EXPONENT_MAXIMUM      Z_FLOATING_POINT_EXPONENT_MAXIMUM   (FLOAT32)
#	define Z_FLOAT32_EXPONENT_10_MINIMUM   Z_FLOATING_POINT_EXPONENT_10_MINIMUM(FLOAT32)
#	define Z_FLOAT32_EXPONENT_10_MAXIMUM   Z_FLOATING_POINT_EXPONENT_10_MAXIMUM(FLOAT32)
#	define Z_FLOAT32_SIGN_OFFSET	       Z_FLOATING_POINT_SIGN_OFFSET	   (FLOAT32)
#	define Z_FLOAT32_SIGN_BITS	       Z_FLOATING_POINT_SIGN_BITS	   (FLOAT32)
#	define Z_FLOAT32_EPSILON	       Z_FLOATING_POINT_EPSILON		   (FLOAT32)
#	define Z_FLOAT32_MINIMUM	       Z_FLOATING_POINT_MINIMUM		   (FLOAT32)
#	define Z_FLOAT32_MAXIMUM	       Z_FLOATING_POINT_MAXIMUM		   (FLOAT32)
#	define Z_FLOAT32_INFINITY	       Z_FLOATING_POINT_INFINITY	   (FLOAT32)
#	define Z_FLOAT32_NAN		       Z_FLOATING_POINT_NAN		   (FLOAT32)

#endif

#if Z_FLOATING_POINT_HAS_TYPE(FLOAT64)

	typedef Z_FLOATING_POINT_TYPE(FLOAT64) zfloat64;
#	define Z_FLOAT64		       Z_FLOATING_POINT_LITERAL		   (FLOAT64)
#	define Z_FLOAT64_FUNDAMENTAL	       Z_FLOATING_POINT_FUNDAMENTAL	   (FLOAT64)
#	define Z_FLOAT64_FIXED_FUNDAMENTAL     Z_FUNDAMENTAL_FLOAT64
#	define Z_FLOAT64_NUMBER_FORMAT	       Z_NUMBER_FORMAT_IEEE_754_BINARY64
#	define Z_FLOAT64_BITS		       64
#	define Z_FLOAT64_SIZE		       8
#	define Z_FLOAT64_BIAS		       Z_FLOATING_POINT_BIAS		   (FLOAT64)
#	define Z_FLOAT64_DECIMAL_DIGITS	       Z_FLOATING_POINT_DECIMAL_DIGITS	   (FLOAT64)
#	define Z_FLOAT64_SIGNIFICAND_OFFSET    Z_FLOATING_POINT_SIGNIFICAND_OFFSET (FLOAT64)
#	define Z_FLOAT64_SIGNIFICAND_BITS      Z_FLOATING_POINT_SIGNIFICAND_BITS   (FLOAT64)
#	define Z_FLOAT64_SIGNIFICAND_DIGITS    Z_FLOATING_POINT_SIGNIFICAND_DIGITS (FLOAT64)
#	define Z_FLOAT64_EXPONENT_OFFSET       Z_FLOATING_POINT_EXPONENT_OFFSET	   (FLOAT64)
#	define Z_FLOAT64_EXPONENT_BITS	       Z_FLOATING_POINT_EXPONENT_BITS	   (FLOAT64)
#	define Z_FLOAT64_EXPONENT_RADIX	       Z_FLOATING_POINT_EXPONENT_RADIX	   (FLOAT64)
#	define Z_FLOAT64_EXPONENT_MINIMUM      Z_FLOATING_POINT_EXPONENT_MINIMUM   (FLOAT64)
#	define Z_FLOAT64_EXPONENT_MAXIMUM      Z_FLOATING_POINT_EXPONENT_MAXIMUM   (FLOAT64)
#	define Z_FLOAT64_EXPONENT_10_MINIMUM   Z_FLOATING_POINT_EXPONENT_10_MINIMUM(FLOAT64)
#	define Z_FLOAT64_EXPONENT_10_MAXIMUM   Z_FLOATING_POINT_EXPONENT_10_MAXIMUM(FLOAT64)
#	define Z_FLOAT64_SIGN_OFFSET	       Z_FLOATING_POINT_SIGN_OFFSET	   (FLOAT64)
#	define Z_FLOAT64_SIGN_BITS	       Z_FLOATING_POINT_SIGN_BITS	   (FLOAT64)
#	define Z_FLOAT64_EPSILON	       Z_FLOATING_POINT_EPSILON		   (FLOAT64)
#	define Z_FLOAT64_MINIMUM	       Z_FLOATING_POINT_MINIMUM		   (FLOAT64)
#	define Z_FLOAT64_MAXIMUM	       Z_FLOATING_POINT_MAXIMUM		   (FLOAT64)
#	define Z_FLOAT64_INFINITY	       Z_FLOATING_POINT_INFINITY	   (FLOAT64)
#	define Z_FLOAT64_NAN		       Z_FLOATING_POINT_NAN		   (FLOAT64)

#endif

#if Z_FLOATING_POINT_HAS_TYPE(FLOAT128)

	typedef Z_FLOATING_POINT_TYPE(FLOAT128)	zfloat128;
#	define Z_FLOAT128			Z_FLOATING_POINT_LITERAL	    (FLOAT128)
#	define Z_FLOAT128_FUNDAMENTAL		Z_FLOATING_POINT_FUNDAMENTAL	    (FLOAT128)
#	define Z_FLOAT128_FIXED_FUNDAMENTAL	Z_FUNDAMENTAL_FLOAT128
#	define Z_FLOAT128_NUMBER_FORMAT		Z_NUMBER_FORMAT_IEEE_754_BINARY128
#	define Z_FLOAT128_BITS			128
#	define Z_FLOAT128_SIZE			16
#	define Z_FLOAT128_BIAS			Z_FLOATING_POINT_BIAS		    (FLOAT128)
#	define Z_FLOAT128_DECIMAL_DIGITS	Z_FLOATING_POINT_DECIMAL_DIGITS	    (FLOAT128)
#	define Z_FLOAT128_SIGNIFICAND_OFFSET	Z_FLOATING_POINT_SIGNIFICAND_OFFSET (FLOAT128)
#	define Z_FLOAT128_SIGNIFICAND_BITS	Z_FLOATING_POINT_SIGNIFICAND_BITS   (FLOAT128)
#	define Z_FLOAT128_SIGNIFICAND_DIGITS	Z_FLOATING_POINT_SIGNIFICAND_DIGITS (FLOAT128)
#	define Z_FLOAT128_EXPONENT_OFFSET	Z_FLOATING_POINT_EXPONENT_OFFSET    (FLOAT128)
#	define Z_FLOAT128_EXPONENT_BITS		Z_FLOATING_POINT_EXPONENT_BITS	    (FLOAT128)
#	define Z_FLOAT128_EXPONENT_RADIX	Z_FLOATING_POINT_EXPONENT_RADIX	    (FLOAT128)
#	define Z_FLOAT128_EXPONENT_MINIMUM	Z_FLOATING_POINT_EXPONENT_MINIMUM   (FLOAT128)
#	define Z_FLOAT128_EXPONENT_MAXIMUM	Z_FLOATING_POINT_EXPONENT_MAXIMUM   (FLOAT128)
#	define Z_FLOAT128_EXPONENT_10_MINIMUM	Z_FLOATING_POINT_EXPONENT_10_MINIMUM(FLOAT128)
#	define Z_FLOAT128_EXPONENT_10_MAXIMUM	Z_FLOATING_POINT_EXPONENT_10_MAXIMUM(FLOAT128)
#	define Z_FLOAT128_SIGN_OFFSET		Z_FLOATING_POINT_SIGN_OFFSET	    (FLOAT128)
#	define Z_FLOAT128_SIGN_BITS		Z_FLOATING_POINT_SIGN_BITS	    (FLOAT128)
#	define Z_FLOAT128_EPSILON		Z_FLOATING_POINT_EPSILON	    (FLOAT128)
#	define Z_FLOAT128_MINIMUM		Z_FLOATING_POINT_MINIMUM	    (FLOAT128)
#	define Z_FLOAT128_MAXIMUM		Z_FLOATING_POINT_MAXIMUM	    (FLOAT128)
#	define Z_FLOAT128_INFINITY		Z_FLOATING_POINT_INFINITY	    (FLOAT128)
#	define Z_FLOAT128_NAN			Z_FLOATING_POINT_NAN		    (FLOAT128)

#endif

#if Z_FLOATING_POINT_HAS_TYPE(FLOAT80_X87)

	typedef Z_FLOATING_POINT_TYPE(FLOAT80_X87) zfloat80_x87;
#	define Z_FLOAT80_X87			   Z_FLOATING_POINT_LITERAL	       (FLOAT80_X87)
#	define Z_FLOAT80_X87_FUNDAMENTAL	   Z_FLOATING_POINT_FUNDAMENTAL	       (FLOAT80_X87)
#	define Z_FLOAT80_X87_FIXED_FUNDAMENTAL	   Z_FUNDAMENTAL_FLOAT80_X87
#	define Z_FLOAT80_X87_NUMBER_FORMAT	   Z_NUMBER_FORMAT_X87_BINARY80
#	define Z_FLOAT80_X87_BITS		   80
#	define Z_FLOAT80_X87_SIZE		   10
#	define Z_FLOAT80_X87_BIAS		   Z_FLOATING_POINT_BIAS	       (FLOAT80_X87)
#	define Z_FLOAT80_X87_DECIMAL_DIGITS	   Z_FLOATING_POINT_DECIMAL_DIGITS     (FLOAT80_X87)
#	define Z_FLOAT80_X87_SIGNIFICAND_OFFSET	   Z_FLOATING_POINT_SIGNIFICAND_OFFSET (FLOAT80_X87)
#	define Z_FLOAT80_X87_SIGNIFICAND_BITS	   Z_FLOATING_POINT_SIGNIFICAND_BITS   (FLOAT80_X87)
#	define Z_FLOAT80_X87_SIGNIFICAND_DIGITS	   Z_FLOATING_POINT_SIGNIFICAND_DIGITS (FLOAT80_X87)
#	define Z_FLOAT80_X87_EXPONENT_OFFSET	   Z_FLOATING_POINT_EXPONENT_OFFSET    (FLOAT80_X87)
#	define Z_FLOAT80_X87_EXPONENT_BITS	   Z_FLOATING_POINT_EXPONENT_BITS      (FLOAT80_X87)
#	define Z_FLOAT80_X87_EXPONENT_RADIX	   Z_FLOATING_POINT_EXPONENT_RADIX     (FLOAT80_X87)
#	define Z_FLOAT80_X87_EXPONENT_MINIMUM	   Z_FLOATING_POINT_EXPONENT_MINIMUM   (FLOAT80_X87)
#	define Z_FLOAT80_X87_EXPONENT_MAXIMUM	   Z_FLOATING_POINT_EXPONENT_MAXIMUM   (FLOAT80_X87)
#	define Z_FLOAT80_X87_EXPONENT_10_MINIMUM   Z_FLOATING_POINT_EXPONENT_10_MINIMUM(FLOAT80_X87)
#	define Z_FLOAT80_X87_EXPONENT_10_MAXIMUM   Z_FLOATING_POINT_EXPONENT_10_MAXIMUM(FLOAT80_X87)
#	define Z_FLOAT80_X87_SIGN_OFFSET	   Z_FLOATING_POINT_SIGN_OFFSET	       (FLOAT80_X87)
#	define Z_FLOAT80_X87_SIGN_BITS		   Z_FLOATING_POINT_SIGN_BITS	       (FLOAT80_X87)
#	define Z_FLOAT80_X87_EPSILON		   Z_FLOATING_POINT_EPSILON	       (FLOAT80_X87)
#	define Z_FLOAT80_X87_MINIMUM		   Z_FLOATING_POINT_MINIMUM	       (FLOAT80_X87)
#	define Z_FLOAT80_X87_MAXIMUM		   Z_FLOATING_POINT_MAXIMUM	       (FLOAT80_X87)
#	define Z_FLOAT80_X87_INFINITY		   Z_FLOATING_POINT_INFINITY	       (FLOAT80_X87)
#	define Z_FLOAT80_X87_NAN		   Z_FLOATING_POINT_NAN		       (FLOAT80_X87)

#endif

#if Z_FLOATING_POINT_HAS_TYPE(FLOAT96_X87)

	typedef Z_FLOATING_POINT_TYPE(FLOAT96_X87) zfloat96_x87;
#	define Z_FLOAT96_X87			   Z_FLOATING_POINT_LITERAL	       (FLOAT96_X87)
#	define Z_FLOAT96_X87_FUNDAMENTAL	   Z_FLOATING_POINT_FUNDAMENTAL	       (FLOAT96_X87)
#	define Z_FLOAT96_X87_FIXED_FUNDAMENTAL	   Z_FUNDAMENTAL_FLOAT96_X87
#	define Z_FLOAT96_X87_NUMBER_FORMAT	   Z_NUMBER_FORMAT_X87_BINARY96
#	define Z_FLOAT96_X87_BITS		   96
#	define Z_FLOAT96_X87_SIZE		   12
#	define Z_FLOAT96_X87_BIAS		   Z_FLOATING_POINT_BIAS	       (FLOAT96_X87)
#	define Z_FLOAT96_X87_DECIMAL_DIGITS	   Z_FLOATING_POINT_DECIMAL_DIGITS     (FLOAT96_X87)
#	define Z_FLOAT96_X87_SIGNIFICAND_OFFSET	   Z_FLOATING_POINT_SIGNIFICAND_OFFSET (FLOAT96_X87)
#	define Z_FLOAT96_X87_SIGNIFICAND_BITS	   Z_FLOATING_POINT_SIGNIFICAND_BITS   (FLOAT96_X87)
#	define Z_FLOAT96_X87_SIGNIFICAND_DIGITS	   Z_FLOATING_POINT_SIGNIFICAND_DIGITS (FLOAT96_X87)
#	define Z_FLOAT96_X87_EXPONENT_OFFSET	   Z_FLOATING_POINT_EXPONENT_OFFSET    (FLOAT96_X87)
#	define Z_FLOAT96_X87_EXPONENT_BITS	   Z_FLOATING_POINT_EXPONENT_BITS      (FLOAT96_X87)
#	define Z_FLOAT96_X87_EXPONENT_RADIX	   Z_FLOATING_POINT_EXPONENT_RADIX     (FLOAT96_X87)
#	define Z_FLOAT96_X87_EXPONENT_MINIMUM	   Z_FLOATING_POINT_EXPONENT_MINIMUM   (FLOAT96_X87)
#	define Z_FLOAT96_X87_EXPONENT_MAXIMUM	   Z_FLOATING_POINT_EXPONENT_MAXIMUM   (FLOAT96_X87)
#	define Z_FLOAT96_X87_EXPONENT_10_MINIMUM   Z_FLOATING_POINT_EXPONENT_10_MINIMUM(FLOAT96_X87)
#	define Z_FLOAT96_X87_EXPONENT_10_MAXIMUM   Z_FLOATING_POINT_EXPONENT_10_MAXIMUM(FLOAT96_X87)
#	define Z_FLOAT96_X87_SIGN_OFFSET	   Z_FLOATING_POINT_SIGN_OFFSET	       (FLOAT96_X87)
#	define Z_FLOAT96_X87_SIGN_BITS		   Z_FLOATING_POINT_SIGN_BITS	       (FLOAT96_X87)
#	define Z_FLOAT96_X87_EPSILON		   Z_FLOATING_POINT_EPSILON	       (FLOAT96_X87)
#	define Z_FLOAT96_X87_MINIMUM		   Z_FLOATING_POINT_MINIMUM	       (FLOAT96_X87)
#	define Z_FLOAT96_X87_MAXIMUM		   Z_FLOATING_POINT_MAXIMUM	       (FLOAT96_X87)
#	define Z_FLOAT96_X87_INFINITY		   Z_FLOATING_POINT_INFINITY	       (FLOAT96_X87)
#	define Z_FLOAT96_X87_NAN		   Z_FLOATING_POINT_NAN		       (FLOAT96_X87)

#endif

#if Z_FLOATING_POINT_HAS_TYPE(FLOAT128_X87)

	typedef Z_FLOATING_POINT_TYPE(FLOAT128_X87) zfloat128_x87;
#	define Z_FLOAT128_X87			    Z_FLOATING_POINT_LITERAL		(FLOAT128_X87)
#	define Z_FLOAT128_X87_FUNDAMENTAL	    Z_FLOATING_POINT_FUNDAMENTAL	(FLOAT128_X87)
#	define Z_FLOAT128_X87_FIXED_FUNDAMENTAL	    Z_FUNDAMENTAL_FLOAT128_X87
#	define Z_FLOAT128_X87_NUMBER_FORMAT	    Z_NUMBER_FORMAT_X87_BINARY128
#	define Z_FLOAT128_X87_BITS		    128
#	define Z_FLOAT128_X87_SIZE		    16
#	define Z_FLOAT128_X87_BIAS		    Z_FLOATING_POINT_BIAS		(FLOAT128_X87)
#	define Z_FLOAT128_X87_DECIMAL_DIGITS	    Z_FLOATING_POINT_DECIMAL_DIGITS	(FLOAT128_X87)
#	define Z_FLOAT128_X87_SIGNIFICAND_OFFSET    Z_FLOATING_POINT_SIGNIFICAND_OFFSET (FLOAT128_X87)
#	define Z_FLOAT128_X87_SIGNIFICAND_BITS	    Z_FLOATING_POINT_SIGNIFICAND_BITS	(FLOAT128_X87)
#	define Z_FLOAT128_X87_SIGNIFICAND_DIGITS    Z_FLOATING_POINT_SIGNIFICAND_DIGITS (FLOAT128_X87)
#	define Z_FLOAT128_X87_EXPONENT_OFFSET	    Z_FLOATING_POINT_EXPONENT_OFFSET	(FLOAT128_X87)
#	define Z_FLOAT128_X87_EXPONENT_BITS	    Z_FLOATING_POINT_EXPONENT_BITS	(FLOAT128_X87)
#	define Z_FLOAT128_X87_EXPONENT_RADIX	    Z_FLOATING_POINT_EXPONENT_RADIX	(FLOAT128_X87)
#	define Z_FLOAT128_X87_EXPONENT_MINIMUM	    Z_FLOATING_POINT_EXPONENT_MINIMUM	(FLOAT128_X87)
#	define Z_FLOAT128_X87_EXPONENT_MAXIMUM	    Z_FLOATING_POINT_EXPONENT_MAXIMUM	(FLOAT128_X87)
#	define Z_FLOAT128_X87_EXPONENT_10_MINIMUM   Z_FLOATING_POINT_EXPONENT_10_MINIMUM(FLOAT128_X87)
#	define Z_FLOAT128_X87_EXPONENT_10_MAXIMUM   Z_FLOATING_POINT_EXPONENT_10_MAXIMUM(FLOAT128_X87)
#	define Z_FLOAT128_X87_SIGN_OFFSET	    Z_FLOATING_POINT_SIGN_OFFSET	(FLOAT128_X87)
#	define Z_FLOAT128_X87_SIGN_BITS		    Z_FLOATING_POINT_SIGN_BITS		(FLOAT128_X87)
#	define Z_FLOAT128_X87_EPSILON		    Z_FLOATING_POINT_EPSILON		(FLOAT128_X87)
#	define Z_FLOAT128_X87_MINIMUM		    Z_FLOATING_POINT_MINIMUM		(FLOAT128_X87)
#	define Z_FLOAT128_X87_MAXIMUM		    Z_FLOATING_POINT_MAXIMUM		(FLOAT128_X87)
#	define Z_FLOAT128_X87_INFINITY		    Z_FLOATING_POINT_INFINITY		(FLOAT128_X87)
#	define Z_FLOAT128_X87_NAN		    Z_FLOATING_POINT_NAN		(FLOAT128_X87)

#endif

#define ztype(			   TYPE) Z_APPEND_##TYPE##_fixed_type(z	)
#define Z_TYPE(			   TYPE) Z_APPEND_##TYPE##_FIXED_TYPE(Z_)
#define Z_TYPE_FUNDAMENTAL(	   TYPE) Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _FUNDAMENTAL	      )
#define Z_TYPE_FIXED_FUNDAMENTAL(  TYPE) Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _FIXED_FUNDAMENTAL  )
#define Z_TYPE_NUMBER_FORMAT(	   TYPE) Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _NUMBER_FORMAT      )
#define Z_TYPE_ENDIANNESS(	   TYPE) Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _ENDIANNESS	      )
#define Z_TYPE_BITS(		   TYPE) Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _BITS		      )
#define Z_TYPE_SIZE(		   TYPE) Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _SIZE		      )
#define Z_TYPE_BIAS(		   TYPE) Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _BIAS		      )
#define Z_TYPE_DECIMAL_DIGITS(	   TYPE) Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _DECIMAL_DIGITS     )
#define Z_TYPE_SIGNIFICAND_OFFSET( TYPE) Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _SIGNIFICAND_OFFSET )
#define Z_TYPE_SIGNIFICAND_BITS(   TYPE) Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _SIGNIFICAND_BITS   )
#define Z_TYPE_SIGNIFICAND_DIGITS( TYPE) Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _SIGNIFICAND_DIGITS )
#define Z_TYPE_EXPONENT_OFFSET(	   TYPE) Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _EXPONENT_OFFSET    )
#define Z_TYPE_EXPONENT_BITS(	   TYPE) Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _EXPONENT_BITS      )
#define Z_TYPE_EXPONENT_RADIX(	   TYPE) Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _EXPONENT_RADIX     )
#define Z_TYPE_EXPONENT_MINIMUM(   TYPE) Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _EXPONENT_MINIMUM   )
#define Z_TYPE_EXPONENT_MAXIMUM(   TYPE) Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _EXPONENT_MAXIMUM   )
#define Z_TYPE_EXPONENT_10_MINIMUM(TYPE) Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _EXPONENT_10_MINIMUM)
#define Z_TYPE_EXPONENT_10_MAXIMUM(TYPE) Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _EXPONENT_10_MAXIMUM)
#define Z_TYPE_SIGN_OFFSET(	   TYPE) Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _SIGN_OFFSET	      )
#define Z_TYPE_SIGN_BITS(	   TYPE) Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _SIGN_BITS	      )
#define Z_TYPE_EPSILON(		   TYPE) Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _EPSILON	      )
#define Z_TYPE_MINIMUM(		   TYPE) Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _MINIMUM	      )
#define Z_TYPE_MAXIMUM(		   TYPE) Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _MAXIMUM	      )
#define Z_TYPE_INFINITY(	   TYPE) Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _INFINITY	      )
#define Z_TYPE_NAN(		   TYPE) Z_INSERT_##TYPE##_FIXED_TYPE(Z_, _NAN		      )

/* MARK: - Standard numeric types */

#if ('\0' - 1) > 0
#	define Z_CHAR_IS_UNSIGNED TRUE
#	define Z_CHAR_IS_SIGNED	  FALSE
#else
#	define Z_CHAR_IS_UNSIGNED FALSE
#	define Z_CHAR_IS_SIGNED	  TRUE
#endif

typedef char			   zchar;
#define Z_CHAR			   Z_SAME
#define Z_CHAR_FUNDAMENTAL	   Z_FUNDAMENTAL_CHAR
#define Z_CHAR_FIXED_FUNDAMENTAL   Z_TYPE_FIXED_FUNDAMENTAL(CHAR)
#define Z_CHAR_NUMBER_FORMAT	   Z_TYPE_NUMBER_FORMAT	   (CHAR)
#define Z_CHAR_BITS		   Z_DATA_MODEL_BITS	   (CHAR)
#define Z_CHAR_SIZE		   Z_TYPE_SIZE		   (CHAR)
#define Z_CHAR_MINIMUM		   Z_TYPE_MINIMUM	   (CHAR)
#define Z_CHAR_MAXIMUM		   Z_TYPE_MAXIMUM	   (CHAR)

typedef unsigned char		   zuchar;
#define Z_UCHAR			   Z_SUFFIX_U
#define Z_UCHAR_FUNDAMENTAL	   Z_FUNDAMENTAL_UCHAR
#define Z_UCHAR_FIXED_FUNDAMENTAL  Z_TYPE_FIXED_FUNDAMENTAL(UCHAR)
#define Z_UCHAR_NUMBER_FORMAT	   Z_TYPE_NUMBER_FORMAT	   (UCHAR)
#define Z_UCHAR_BITS		   Z_DATA_MODEL_BITS	   ( CHAR)
#define Z_UCHAR_SIZE		   Z_TYPE_SIZE		   (UCHAR)
#define Z_UCHAR_MINIMUM		   Z_TYPE_MINIMUM	   (UCHAR)
#define Z_UCHAR_MAXIMUM		   Z_TYPE_MAXIMUM	   (UCHAR)

typedef signed char		   zschar;
#define Z_SCHAR			   Z_SAME
#define Z_SCHAR_FUNDAMENTAL	   Z_FUNDAMENTAL_SCHAR
#define Z_SCHAR_FIXED_FUNDAMENTAL  Z_TYPE_FIXED_FUNDAMENTAL(SCHAR)
#define Z_SCHAR_NUMBER_FORMAT	   Z_TYPE_NUMBER_FORMAT	   (SCHAR)
#define Z_SCHAR_BITS		   Z_DATA_MODEL_BITS	   ( CHAR)
#define Z_SCHAR_SIZE		   Z_TYPE_SIZE		   (SCHAR)
#define Z_SCHAR_MINIMUM		   Z_TYPE_MINIMUM	   (SCHAR)
#define Z_SCHAR_MAXIMUM		   Z_TYPE_MAXIMUM	   (SCHAR)

typedef unsigned short int	   zushort;
#define Z_USHORT		   Z_SUFFIX_U
#define Z_USHORT_FUNDAMENTAL	   Z_FUNDAMENTAL_USHORT
#define Z_USHORT_FIXED_FUNDAMENTAL Z_TYPE_FIXED_FUNDAMENTAL(USHORT)
#define Z_USHORT_NUMBER_FORMAT	   Z_TYPE_NUMBER_FORMAT	   (USHORT)
#define Z_USHORT_ENDIANNESS	   Z_TYPE_ENDIANNESS	   (USHORT)
#define Z_USHORT_BITS		   Z_DATA_MODEL_BITS	   ( SHORT)
#define Z_USHORT_SIZE		   Z_TYPE_SIZE		   (USHORT)
#define Z_USHORT_MINIMUM	   Z_TYPE_MINIMUM	   (USHORT)
#define Z_USHORT_MAXIMUM	   Z_TYPE_MAXIMUM	   (USHORT)

typedef signed short int	   zsshort;
#define Z_SSHORT		   Z_SAME
#define Z_SSHORT_FUNDAMENTAL	   Z_FUNDAMENTAL_SSHORT
#define Z_SSHORT_FIXED_FUNDAMENTAL Z_TYPE_FIXED_FUNDAMENTAL(SSHORT)
#define Z_SSHORT_NUMBER_FORMAT	   Z_TYPE_NUMBER_FORMAT	   (SSHORT)
#define Z_SSHORT_ENDIANNESS	   Z_TYPE_ENDIANNESS	   (SSHORT)
#define Z_SSHORT_BITS		   Z_DATA_MODEL_BITS	   ( SHORT)
#define Z_SSHORT_SIZE		   Z_TYPE_SIZE		   (SSHORT)
#define Z_SSHORT_MINIMUM	   Z_TYPE_MINIMUM	   (SSHORT)
#define Z_SSHORT_MAXIMUM	   Z_TYPE_MAXIMUM	   (SSHORT)

typedef unsigned int		   zuint;
#define Z_UINT			   Z_SUFFIX_U
#define Z_UINT_FUNDAMENTAL	   Z_FUNDAMENTAL_UINT
#define Z_UINT_FIXED_FUNDAMENTAL   Z_TYPE_FIXED_FUNDAMENTAL(UINT)
#define Z_UINT_NUMBER_FORMAT	   Z_TYPE_NUMBER_FORMAT	   (UINT)
#define Z_UINT_ENDIANNESS	   Z_TYPE_ENDIANNESS	   (UINT)
#define Z_UINT_BITS		   Z_DATA_MODEL_BITS	   ( INT)
#define Z_UINT_SIZE		   Z_TYPE_SIZE		   (UINT)
#define Z_UINT_MINIMUM		   Z_TYPE_MINIMUM	   (UINT)
#define Z_UINT_MAXIMUM		   Z_TYPE_MAXIMUM	   (UINT)

typedef signed int		   zsint;
#define Z_SINT			   Z_SAME
#define Z_SINT_FUNDAMENTAL	   Z_FUNDAMENTAL_SINT
#define Z_SINT_FIXED_FUNDAMENTAL   Z_TYPE_FIXED_FUNDAMENTAL(SINT)
#define Z_SINT_NUMBER_FORMAT	   Z_TYPE_NUMBER_FORMAT	   (SINT)
#define Z_SINT_ENDIANNESS	   Z_TYPE_ENDIANNESS	   (SINT)
#define Z_SINT_BITS		   Z_DATA_MODEL_BITS	   ( INT)
#define Z_SINT_SIZE		   Z_TYPE_SIZE		   (SINT)
#define Z_SINT_MINIMUM		   Z_TYPE_MINIMUM	   (SINT)
#define Z_SINT_MAXIMUM		   Z_TYPE_MAXIMUM	   (SINT)

typedef unsigned long int	   zulong;
#define Z_ULONG			   Z_SUFFIX_UL
#define Z_ULONG_FUNDAMENTAL	   Z_FUNDAMENTAL_ULONG
#define Z_ULONG_FIXED_FUNDAMENTAL  Z_TYPE_FIXED_FUNDAMENTAL(ULONG)
#define Z_ULONG_NUMBER_FORMAT	   Z_TYPE_NUMBER_FORMAT	   (ULONG)
#define Z_ULONG_ENDIANNESS	   Z_TYPE_ENDIANNESS	   (ULONG)
#define Z_ULONG_BITS		   Z_DATA_MODEL_BITS	   ( LONG)
#define Z_ULONG_SIZE		   Z_TYPE_SIZE		   (ULONG)
#define Z_ULONG_MINIMUM		   Z_TYPE_MINIMUM	   (ULONG)
#define Z_ULONG_MAXIMUM		   Z_TYPE_MAXIMUM	   (ULONG)

typedef signed long int		   zslong;
#define Z_SLONG			   Z_SUFFIX_L
#define Z_SLONG_FUNDAMENTAL	   Z_FUNDAMENTAL_SLONG
#define Z_SLONG_FIXED_FUNDAMENTAL  Z_TYPE_FIXED_FUNDAMENTAL(SLONG)
#define Z_SLONG_NUMBER_FORMAT	   Z_TYPE_NUMBER_FORMAT	   (SLONG)
#define Z_SLONG_ENDIANNESS	   Z_TYPE_ENDIANNESS	   (SLONG)
#define Z_SLONG_BITS		   Z_DATA_MODEL_BITS	   ( LONG)
#define Z_SLONG_SIZE		   Z_TYPE_SIZE		   (SLONG)
#define Z_SLONG_MINIMUM		   Z_TYPE_MINIMUM	   (SLONG)
#define Z_SLONG_MAXIMUM		   Z_TYPE_MAXIMUM	   (SLONG)

#if Z_DIALECT_HAS_TYPE(C, LONG_LONG) || Z_DIALECT_HAS_TYPE(CPP, LONG_LONG)

	typedef unsigned long long int	  zullong;
#	define Z_ULLONG			  Z_SUFFIX_LL
#	define Z_ULLONG_FUNDAMENTAL	  Z_FUNDAMENTAL_ULLONG
#	define Z_ULLONG_FIXED_FUNDAMENTAL Z_TYPE_FIXED_FUNDAMENTAL(ULLONG)
#	define Z_ULLONG_NUMBER_FORMAT	  Z_TYPE_NUMBER_FORMAT	  (ULLONG)
#	define Z_ULLONG_ENDIANNESS	  Z_TYPE_ENDIANNESS	  (ULLONG)
#	define Z_ULLONG_BITS		  Z_DATA_MODEL_BITS	  ( LLONG)
#	define Z_ULLONG_SIZE		  Z_TYPE_SIZE		  (ULLONG)
#	define Z_ULLONG_MINIMUM		  Z_TYPE_MINIMUM	  (ULLONG)
#	define Z_ULLONG_MAXIMUM		  Z_TYPE_MAXIMUM	  (ULLONG)

	typedef signed long long int	  zsllong;
#	define Z_SLLONG			  Z_SUFFIX_LL
#	define Z_SLLONG_FUNDAMENTAL	  Z_FUNDAMENTAL_SLLONG
#	define Z_SLLONG_FIXED_FUNDAMENTAL Z_TYPE_FIXED_FUNDAMENTAL(SLLONG)
#	define Z_SLLONG_NUMBER_FORMAT	  Z_TYPE_NUMBER_FORMAT	  (SLLONG)
#	define Z_SLLONG_ENDIANNESS	  Z_TYPE_ENDIANNESS	  (SLLONG)
#	define Z_SLLONG_BITS		  Z_DATA_MODEL_BITS	  ( LLONG)
#	define Z_SLLONG_SIZE		  Z_TYPE_SIZE		  (SLLONG)
#	define Z_SLLONG_MINIMUM		  Z_TYPE_MINIMUM	  (SLLONG)
#	define Z_SLLONG_MAXIMUM		  Z_TYPE_MAXIMUM	  (SLLONG)

#	define Z_LLONG

#endif

#if Z_DIALECT_HAS_TYPE(C, FLOAT)

	typedef float			   zfloat;
#	define Z_FLOAT			   Z_SUFFIX_F
#	define Z_FLOAT_FUNDAMENTAL	   Z_FUNDAMENTAL_FLOAT
#	define Z_FLOAT_FIXED_FUNDAMENTAL   Z_FLOATING_POINT_FIXED_FUNDAMENTAL(FLOAT)
#	define Z_FLOAT_NUMBER_FORMAT	   Z_TYPE_NUMBER_FORMAT		     (FLOAT)
#	define Z_FLOAT_BITS		   Z_TYPE_BITS			     (FLOAT)
#	define Z_FLOAT_SIZE		   Z_TYPE_SIZE			     (FLOAT)
#	define Z_FLOAT_BIAS		   Z_TYPE_BIAS			     (FLOAT)
#	define Z_FLOAT_DECIMAL_DIGITS	   Z_TYPE_DECIMAL_DIGITS	     (FLOAT)
#	define Z_FLOAT_SIGNIFICAND_OFFSET  Z_TYPE_SIGNIFICAND_OFFSET	     (FLOAT)
#	define Z_FLOAT_SIGNIFICAND_BITS	   Z_TYPE_SIGNIFICAND_BITS	     (FLOAT)
#	define Z_FLOAT_SIGNIFICAND_DIGITS  Z_TYPE_SIGNIFICAND_DIGITS	     (FLOAT)
#	define Z_FLOAT_EXPONENT_OFFSET	   Z_TYPE_EXPONENT_OFFSET	     (FLOAT)
#	define Z_FLOAT_EXPONENT_BITS	   Z_TYPE_EXPONENT_BITS		     (FLOAT)
#	define Z_FLOAT_EXPONENT_RADIX	   Z_TYPE_EXPONENT_RADIX	     (FLOAT)
#	define Z_FLOAT_EXPONENT_MINIMUM	   Z_TYPE_EXPONENT_MINIMUM	     (FLOAT)
#	define Z_FLOAT_EXPONENT_MAXIMUM	   Z_TYPE_EXPONENT_MAXIMUM	     (FLOAT)
#	define Z_FLOAT_EXPONENT_10_MINIMUM Z_TYPE_EXPONENT_10_MINIMUM	     (FLOAT)
#	define Z_FLOAT_EXPONENT_10_MAXIMUM Z_TYPE_EXPONENT_10_MAXIMUM	     (FLOAT)
#	define Z_FLOAT_SIGN_OFFSET	   Z_TYPE_SIGN_OFFSET		     (FLOAT)
#	define Z_FLOAT_SIGN_BITS	   Z_TYPE_SIGN_BITS		     (FLOAT)
#	define Z_FLOAT_EPSILON		   Z_TYPE_EPSILON		     (FLOAT)
#	define Z_FLOAT_MINIMUM		   Z_TYPE_MINIMUM		     (FLOAT)
#	define Z_FLOAT_MAXIMUM		   Z_TYPE_MAXIMUM		     (FLOAT)
#	define Z_FLOAT_INFINITY		   Z_TYPE_INFINITY		     (FLOAT)
#	define Z_FLOAT_NAN		   Z_TYPE_NAN			     (FLOAT)

#endif

#if Z_DIALECT_HAS_TYPE(C, DOUBLE)

	typedef double			    zdouble;
#	define Z_DOUBLE			    Z_SAME
#	define Z_DOUBLE_FUNDAMENTAL	    Z_FUNDAMENTAL_DOUBLE
#	define Z_DOUBLE_FIXED_FUNDAMENTAL   Z_FLOATING_POINT_FIXED_FUNDAMENTAL(DOUBLE)
#	define Z_DOUBLE_NUMBER_FORMAT	    Z_TYPE_NUMBER_FORMAT	      (DOUBLE)
#	define Z_DOUBLE_BITS		    Z_TYPE_BITS			      (DOUBLE)
#	define Z_DOUBLE_SIZE		    Z_TYPE_SIZE			      (DOUBLE)
#	define Z_DOUBLE_BIAS		    Z_TYPE_BIAS			      (DOUBLE)
#	define Z_DOUBLE_DECIMAL_DIGITS	    Z_TYPE_DECIMAL_DIGITS	      (DOUBLE)
#	define Z_DOUBLE_SIGNIFICAND_OFFSET  Z_TYPE_SIGNIFICAND_OFFSET	      (DOUBLE)
#	define Z_DOUBLE_SIGNIFICAND_BITS    Z_TYPE_SIGNIFICAND_BITS	      (DOUBLE)
#	define Z_DOUBLE_SIGNIFICAND_DIGITS  Z_TYPE_SIGNIFICAND_DIGITS	      (DOUBLE)
#	define Z_DOUBLE_EXPONENT_OFFSET	    Z_TYPE_EXPONENT_OFFSET	      (DOUBLE)
#	define Z_DOUBLE_EXPONENT_BITS	    Z_TYPE_EXPONENT_BITS	      (DOUBLE)
#	define Z_DOUBLE_EXPONENT_RADIX	    Z_TYPE_EXPONENT_RADIX	      (DOUBLE)
#	define Z_DOUBLE_EXPONENT_MINIMUM    Z_TYPE_EXPONENT_MINIMUM	      (DOUBLE)
#	define Z_DOUBLE_EXPONENT_MAXIMUM    Z_TYPE_EXPONENT_MAXIMUM	      (DOUBLE)
#	define Z_DOUBLE_EXPONENT_10_MINIMUM Z_TYPE_EXPONENT_10_MINIMUM	      (DOUBLE)
#	define Z_DOUBLE_EXPONENT_10_MAXIMUM Z_TYPE_EXPONENT_10_MAXIMUM	      (DOUBLE)
#	define Z_DOUBLE_SIGN_OFFSET	    Z_TYPE_SIGN_OFFSET		      (DOUBLE)
#	define Z_DOUBLE_SIGN_BITS	    Z_TYPE_SIGN_BITS		      (DOUBLE)
#	define Z_DOUBLE_EPSILON		    Z_TYPE_EPSILON		      (DOUBLE)
#	define Z_DOUBLE_MINIMUM		    Z_TYPE_MINIMUM		      (DOUBLE)
#	define Z_DOUBLE_MAXIMUM		    Z_TYPE_MAXIMUM		      (DOUBLE)
#	define Z_DOUBLE_INFINITY	    Z_TYPE_INFINITY		      (DOUBLE)
#	define Z_DOUBLE_NAN		    Z_TYPE_NAN			      (DOUBLE)

#endif

#if Z_DIALECT_HAS_TYPE(C, LONG_DOUBLE) || Z_DIALECT_HAS_TYPE(CPP, LONG_DOUBLE)

	typedef long double		     zldouble;
#	define Z_LDOUBLE		     Z_SUFFIX_L
#	define Z_LDOUBLE_FUNDAMENTAL	     Z_FUNDAMENTAL_LDOUBLE
#	define Z_LDOUBLE_FIXED_FUNDAMENTAL   Z_FLOATING_POINT_FIXED_FUNDAMENTAL(LDOUBLE)
#	define Z_LDOUBLE_NUMBER_FORMAT	     Z_TYPE_NUMBER_FORMAT	       (LDOUBLE)
#	define Z_LDOUBLE_BITS		     Z_TYPE_BITS		       (LDOUBLE)
#	define Z_LDOUBLE_SIZE		     Z_TYPE_SIZE		       (LDOUBLE)
#	define Z_LDOUBLE_BIAS		     Z_TYPE_BIAS		       (LDOUBLE)
#	define Z_LDOUBLE_DECIMAL_DIGITS	     Z_TYPE_DECIMAL_DIGITS	       (LDOUBLE)
#	define Z_LDOUBLE_SIGNIFICAND_OFFSET  Z_TYPE_SIGNIFICAND_OFFSET	       (LDOUBLE)
#	define Z_LDOUBLE_SIGNIFICAND_BITS    Z_TYPE_SIGNIFICAND_BITS	       (LDOUBLE)
#	define Z_LDOUBLE_SIGNIFICAND_DIGITS  Z_TYPE_SIGNIFICAND_DIGITS	       (LDOUBLE)
#	define Z_LDOUBLE_EXPONENT_OFFSET     Z_TYPE_EXPONENT_OFFSET	       (LDOUBLE)
#	define Z_LDOUBLE_EXPONENT_BITS	     Z_TYPE_EXPONENT_BITS	       (LDOUBLE)
#	define Z_LDOUBLE_EXPONENT_RADIX	     Z_TYPE_EXPONENT_RADIX	       (LDOUBLE)
#	define Z_LDOUBLE_EXPONENT_MINIMUM    Z_TYPE_EXPONENT_MINIMUM	       (LDOUBLE)
#	define Z_LDOUBLE_EXPONENT_MAXIMUM    Z_TYPE_EXPONENT_MAXIMUM	       (LDOUBLE)
#	define Z_LDOUBLE_EXPONENT_10_MINIMUM Z_TYPE_EXPONENT_10_MINIMUM	       (LDOUBLE)
#	define Z_LDOUBLE_EXPONENT_10_MAXIMUM Z_TYPE_EXPONENT_10_MAXIMUM	       (LDOUBLE)
#	define Z_LDOUBLE_SIGN_OFFSET	     Z_TYPE_SIGN_OFFSET		       (LDOUBLE)
#	define Z_LDOUBLE_SIGN_BITS	     Z_TYPE_SIGN_BITS		       (LDOUBLE)
#	define Z_LDOUBLE_EPSILON	     Z_TYPE_EPSILON		       (LDOUBLE)
#	define Z_LDOUBLE_MINIMUM	     Z_TYPE_MINIMUM		       (LDOUBLE)
#	define Z_LDOUBLE_MAXIMUM	     Z_TYPE_MAXIMUM		       (LDOUBLE)
#	define Z_LDOUBLE_INFINITY	     Z_TYPE_INFINITY		       (LDOUBLE)
#	define Z_LDOUBLE_NAN		     Z_TYPE_NAN			       (LDOUBLE)

#endif

/* MARK: - Object size integral types */

#define Z_USIZE_BITS		  Z_DATA_MODEL_BITS(SIZE)

typedef ztype(USIZE)		  zusize;
#define Z_USIZE			  Z_TYPE		  (USIZE)
#define Z_USIZE_FUNDAMENTAL	  Z_TYPE_FUNDAMENTAL	  (USIZE)
#define Z_USIZE_FIXED_FUNDAMENTAL Z_TYPE_FIXED_FUNDAMENTAL(USIZE)
#define Z_USIZE_NUMBER_FORMAT	  Z_TYPE_NUMBER_FORMAT	  (USIZE)
#define Z_USIZE_ENDIANNESS	  Z_TYPE_ENDIANNESS	  (USIZE)
#define Z_USIZE_SIZE		  Z_TYPE_SIZE		  (USIZE)
#define Z_USIZE_MINIMUM		  Z_TYPE_MINIMUM	  (USIZE)
#define Z_USIZE_MAXIMUM		  Z_TYPE_MAXIMUM	  (USIZE)

#define Z_SSIZE_BITS		  Z_DATA_MODEL_BITS(SIZE)

typedef ztype(SSIZE)		  zssize;
#define Z_SSIZE			  Z_TYPE		  (SSIZE)
#define Z_SSIZE_FUNDAMENTAL	  Z_TYPE_FUNDAMENTAL	  (SSIZE)
#define Z_SSIZE_FIXED_FUNDAMENTAL Z_TYPE_FIXED_FUNDAMENTAL(SSIZE)
#define Z_SSIZE_NUMBER_FORMAT	  Z_TYPE_NUMBER_FORMAT	  (SSIZE)
#define Z_SSIZE_ENDIANNESS	  Z_TYPE_ENDIANNESS	  (SSIZE)
#define Z_SSIZE_SIZE		  Z_TYPE_SIZE		  (SSIZE)
#define Z_SSIZE_MINIMUM		  Z_TYPE_MINIMUM	  (SSIZE)
#define Z_SSIZE_MAXIMUM		  Z_TYPE_MAXIMUM	  (SSIZE)

/* MARK: - Maximum size integral types */

#if defined(Z_UINT128)
#	define Z_UINTMAX_BITS 128

#elif defined(Z_UINT64)
#	define Z_UINTMAX_BITS 64

#elif defined(Z_ULLONG)
#	define Z_UINTMAX_BITS Z_ULLONG_BITS

#else
#	define Z_UINTMAX_BITS Z_ULONG_BITS
#endif

typedef ztype(UINTMAX)		    zuintmax;
#define Z_UINTMAX		    Z_TYPE		    (UINTMAX)
#define Z_UINTMAX_FUNDAMENTAL	    Z_TYPE_FUNDAMENTAL	    (UINTMAX)
#define Z_UINTMAX_FIXED_FUNDAMENTAL Z_TYPE_FIXED_FUNDAMENTAL(UINTMAX)
#define Z_UINTMAX_NUMBER_FORMAT	    Z_TYPE_NUMBER_FORMAT    (UINTMAX)
#define Z_UINTMAX_ENDIANNESS	    Z_TYPE_ENDIANNESS	    (UINTMAX)
#define Z_UINTMAX_SIZE		    Z_TYPE_SIZE		    (UINTMAX)
#define Z_UINTMAX_MINIMUM	    Z_TYPE_MINIMUM	    (UINTMAX)
#define Z_UINTMAX_MAXIMUM	    Z_TYPE_MAXIMUM	    (UINTMAX)

#if defined(Z_SINT128)
#	define Z_SINTMAX_BITS 128

#elif defined(Z_SINT64)
#	define Z_SINTMAX_BITS 64

#elif defined(Z_SLLONG)
#	define Z_SINTMAX_BITS Z_SLLONG_BITS

#else
#	define Z_SINTMAX_BITS Z_SLONG_BITS
#endif

typedef ztype(SINTMAX)		    zsintmax;
#define Z_SINTMAX		    Z_TYPE		    (SINTMAX)
#define Z_SINTMAX_FUNDAMENTAL	    Z_TYPE_FUNDAMENTAL	    (SINTMAX)
#define Z_SINTMAX_FIXED_FUNDAMENTAL Z_TYPE_FIXED_FUNDAMENTAL(SINTMAX)
#define Z_SINTMAX_NUMBER_FORMAT	    Z_TYPE_NUMBER_FORMAT    (SINTMAX)
#define Z_SINTMAX_ENDIANNESS	    Z_TYPE_ENDIANNESS	    (SINTMAX)
#define Z_SINTMAX_SIZE		    Z_TYPE_SIZE		    (SINTMAX)
#define Z_SINTMAX_MINIMUM	    Z_TYPE_MINIMUM	    (SINTMAX)
#define Z_SINTMAX_MAXIMUM	    Z_TYPE_MAXIMUM	    (SINTMAX)

#if Z_UINTMAX_BITS >= Z_SINTMAX_BITS

	typedef zuintmax		  zintmax;
#	define Z_INTMAX			  Z_UINTMAX
#	define Z_INTMAX_FUNDAMENTAL	  Z_UINTMAX_FUNDAMENTAL
#	define Z_INTMAX_FIXED_FUNDAMENTAL Z_UINTMAX_FIXED_FUNDAMENTAL
#	define Z_INTMAX_NUMBER_FORMAT	  Z_UINTMAX_NUMBER_FORMAT
#	define Z_INTMAX_ENDIANNESS	  Z_UINTMAX_ENDIANNESS
#	define Z_INTMAX_BITS		  Z_UINTMAX_BITS
#	define Z_INTMAX_SIZE		  Z_UINTMAX_SIZE

#else

	typedef zsintmax		  zintmax;
#	define Z_INTMAX			  Z_SINTMAX
#	define Z_INTMAX_FUNDAMENTAL	  Z_SINTMAX_FUNDAMENTAL
#	define Z_INTMAX_FIXED_FUNDAMENTAL Z_SINTMAX_FIXED_FUNDAMENTAL
#	define Z_INTMAX_NUMBER_FORMAT	  Z_SINTMAX_NUMBER_FORMAT
#	define Z_INTMAX_ENDIANNESS	  Z_SINTMAX_ENDIANNESS
#	define Z_INTMAX_BITS		  Z_SINTMAX_BITS
#	define Z_INTMAX_SIZE		  Z_SINTMAX_SIZE

#endif

/* MARK: - Pointer size integral types */

#define Z_POINTER_BITS		    Z_DATA_MODEL_BITS(POINTER)
#define Z_POINTER_SIZE		    (Z_POINTER_BITS / Z_CHAR_BITS)

#define Z_UINTPTR_BITS		    Z_POINTER_BITS

typedef ztype(UINTPTR)		    zuintptr;
#define Z_UINTPTR		    Z_TYPE		    (UINTPTR)
#define Z_UINTPTR_FUNDAMENTAL	    Z_TYPE_FUNDAMENTAL	    (UINTPTR)
#define Z_UINTPTR_FIXED_FUNDAMENTAL Z_TYPE_FIXED_FUNDAMENTAL(UINTPTR)
#define Z_UINTPTR_NUMBER_FORMAT	    Z_TYPE_NUMBER_FORMAT    (UINTPTR)
#define Z_UINTPTR_ENDIANNESS	    Z_TYPE_ENDIANNESS	    (UINTPTR)
#define Z_UINTPTR_SIZE		    Z_TYPE_SIZE		    (UINTPTR)
#define Z_UINTPTR_MINIMUM	    Z_TYPE_MINIMUM	    (UINTPTR)
#define Z_UINTPTR_MAXIMUM	    Z_TYPE_MAXIMUM	    (UINTPTR)

#define Z_SINTPTR_BITS		    Z_POINTER_BITS

typedef ztype(SINTPTR)		    zsintptr;
#define Z_SINTPTR		    Z_TYPE		    (SINTPTR)
#define Z_SINTPTR_FUNDAMENTAL	    Z_TYPE_FUNDAMENTAL	    (SINTPTR)
#define Z_SINTPTR_FIXED_FUNDAMENTAL Z_TYPE_FIXED_FUNDAMENTAL(SINTPTR)
#define Z_SINTPTR_NUMBER_FORMAT	    Z_TYPE_NUMBER_FORMAT    (SINTPTR)
#define Z_SINTPTR_ENDIANNESS	    Z_TYPE_ENDIANNESS	    (SINTPTR)
#define Z_SINTPTR_SIZE		    Z_TYPE_SIZE		    (SINTPTR)
#define Z_SINTPTR_MINIMUM	    Z_TYPE_MINIMUM	    (SINTPTR)
#define Z_SINTPTR_MAXIMUM	    Z_TYPE_MAXIMUM	    (SINTPTR)

/* MARK: - Optimum maximum size integral types */

#if Z_CPU_BITS(TOP_INTEGRAL) >= 128 && defined(Z_UINT128)
#	define Z_UINTTOP_BITS 128

#elif Z_CPU_BITS(TOP_INTEGRAL) >= 64 && defined(Z_UINT64)
#	define Z_UINTTOP_BITS 64

#elif Z_CPU_BITS(TOP_INTEGRAL) == 32
#	define Z_UINTTOP_BITS 32

#else
#	define Z_UINTTOP_BITS 16
#endif

typedef ztype(UINTTOP)		    zuinttop;
#define Z_UINTTOP		    Z_TYPE		    (UINTTOP)
#define Z_UINTTOP_FUNDAMENTAL	    Z_TYPE_FUNDAMENTAL	    (UINTTOP)
#define Z_UINTTOP_FIXED_FUNDAMENTAL Z_TYPE_FIXED_FUNDAMENTAL(UINTTOP)
#define Z_UINTTOP_NUMBER_FORMAT	    Z_TYPE_NUMBER_FORMAT    (UINTTOP)
#define Z_UINTTOP_ENDIANNESS	    Z_TYPE_ENDIANNESS	    (UINTTOP)
#define Z_UINTTOP_SIZE		    Z_TYPE_SIZE		    (UINTTOP)
#define Z_UINTTOP_MINIMUM	    Z_TYPE_MINIMUM	    (UINTTOP)
#define Z_UINTTOP_MAXIMUM	    Z_TYPE_MAXIMUM	    (UINTTOP)

#if Z_CPU_BITS(TOP_INTEGRAL) >= 128 && defined(Z_SINT128)
#	define Z_SINTTOP_BITS 128

#elif Z_CPU_BITS(TOP_INTEGRAL) >= 64 && defined(Z_SINT64)
#	define Z_SINTTOP_BITS 64

#elif Z_CPU_BITS(TOP_INTEGRAL) == 32
#	define Z_SINTTOP_BITS 32

#else
#	define Z_SINTTOP_BITS 16
#endif

typedef ztype(SINTTOP)		    zsinttop;
#define Z_SINTTOP		    Z_TYPE		    (SINTTOP)
#define Z_SINTTOP_FUNDAMENTAL	    Z_TYPE_FUNDAMENTAL	    (SINTTOP)
#define Z_SINTTOP_FIXED_FUNDAMENTAL Z_TYPE_FIXED_FUNDAMENTAL(SINTTOP)
#define Z_SINTTOP_NUMBER_FORMAT	    Z_TYPE_NUMBER_FORMAT    (SINTTOP)
#define Z_SINTTOP_ENDIANNESS	    Z_TYPE_ENDIANNESS	    (SINTTOP)
#define Z_SINTTOP_SIZE		    Z_TYPE_SIZE		    (SINTTOP)
#define Z_SINTTOP_MINIMUM	    Z_TYPE_MINIMUM	    (SINTTOP)
#define Z_SINTTOP_MAXIMUM	    Z_TYPE_MAXIMUM	    (SINTTOP)

#if Z_UINTTOP_BITS >= Z_SINTTOP_BITS

	typedef zuinttop		  zinttop;
#	define Z_INTTOP			  Z_UINTTOP
#	define Z_INTTOP_FUNDAMENTAL	  Z_UINTTOP_FUNDAMENTAL
#	define Z_INTTOP_FIXED_FUNDAMENTAL Z_UINTTOP_FIXED_FUNDAMENTAL
#	define Z_INTTOP_NUMBER_FORMAT	  Z_UINTTOP_NUMBER_FORMAT
#	define Z_INTTOP_ENDIANNESS	  Z_UINTTOP_ENDIANNESS
#	define Z_INTTOP_BITS		  Z_UINTTOP_BITS
#	define Z_INTTOP_SIZE		  Z_UINTTOP_SIZE

#else

	typedef zsinttop		  zinttop;
#	define Z_INTTOP			  Z_SINTTOP
#	define Z_INTTOP_FUNDAMENTAL	  Z_SINTTOP_FUNDAMENTAL
#	define Z_INTTOP_FIXED_FUNDAMENTAL Z_SINTTOP_FIXED_FUNDAMENTAL
#	define Z_INTTOP_NUMBER_FORMAT	  Z_SINTTOP_NUMBER_FORMAT
#	define Z_INTTOP_ENDIANNESS	  Z_SINTTOP_ENDIANNESS
#	define Z_INTTOP_BITS		  Z_SINTTOP_BITS
#	define Z_INTTOP_SIZE		  Z_SINTTOP_SIZE

#endif

/* MARK: - Default types */

#ifdef Z_UINT8

	typedef zuint8			   zboolean;
#	define Z_BOOLEAN_FUNDAMENTAL	   Z_UINT8_FUNDAMENTAL
#	define Z_BOOLEAN_FIXED_FUNDAMENTAL Z_UINT8_FIXED_FUNDAMENTAL
#	define Z_BOOLEAN_NUMBER_FORMAT	   Z_UINT8_NUMBER_FORMAT
#	define Z_BOOLEAN_BITS		   Z_UINT8_BITS
#	define Z_BOOLEAN_SIZE		   Z_UINT8_SIZE

#else

	typedef zuchar			   zboolean;
#	define Z_BOOLEAN_FUNDAMENTAL	   Z_UCHAR_FUNDAMENTAL
#	define Z_BOOLEAN_FIXED_FUNDAMENTAL Z_UCHAR_FIXED_FUNDAMENTAL
#	define Z_BOOLEAN_NUMBER_FORMAT	   Z_UCHAR_NUMBER_FORMAT
#	define Z_BOOLEAN_BITS		   Z_UCHAR_BITS
#	define Z_BOOLEAN_SIZE		   Z_UCHAR_SIZE

#endif

#ifndef Z_NATURAL_BITS
#	define Z_NATURAL_BITS Z_ULONG_BITS
#endif

typedef ztype(NATURAL)		    znatural;
#define Z_NATURAL		    Z_TYPE		    (NATURAL)
#define Z_NATURAL_FUNDAMENTAL	    Z_TYPE_FUNDAMENTAL	    (NATURAL)
#define Z_NATURAL_FIXED_FUNDAMENTAL Z_TYPE_FIXED_FUNDAMENTAL(NATURAL)
#define Z_NATURAL_NUMBER_FORMAT	    Z_TYPE_NUMBER_FORMAT    (NATURAL)
#define Z_NATURAL_ENDIANNESS	    Z_TYPE_ENDIANNESS	    (NATURAL)
#define Z_NATURAL_SIZE		    Z_TYPE_SIZE		    (NATURAL)
#define Z_NATURAL_MINIMUM	    Z_TYPE_MINIMUM	    (NATURAL)
#define Z_NATURAL_MAXIMUM	    Z_TYPE_MAXIMUM	    (NATURAL)

#ifndef Z_INTEGER_BITS
#	define Z_INTEGER_BITS Z_SLONG_BITS
#endif

typedef ztype(INTEGER)		    zinteger;
#define Z_INTEGER		    Z_TYPE		    (INTEGER)
#define Z_INTEGER_FUNDAMENTAL	    Z_TYPE_FUNDAMENTAL	    (INTEGER)
#define Z_INTEGER_FIXED_FUNDAMENTAL Z_TYPE_FIXED_FUNDAMENTAL(INTEGER)
#define Z_INTEGER_NUMBER_FORMAT	    Z_TYPE_NUMBER_FORMAT    (INTEGER)
#define Z_INTEGER_ENDIANNESS	    Z_TYPE_ENDIANNESS	    (INTEGER)
#define Z_INTEGER_SIZE		    Z_TYPE_SIZE		    (INTEGER)
#define Z_INTEGER_MINIMUM	    Z_TYPE_MINIMUM	    (INTEGER)
#define Z_INTEGER_MAXIMUM	    Z_TYPE_MAXIMUM	    (INTEGER)

#ifndef Z_REAL_FIXED_FUNDAMENTAL

#	if defined(Z_DOUBLE)
#		define Z_REAL_FIXED_FUNDAMENTAL Z_DOUBLE_FIXED_FUNDAMENTAL

#	elif defined(Z_FLOAT)
#		define Z_REAL_FIXED_FUNDAMENTAL Z_DOUBLE_FIXED_FUNDAMENTAL
#	endif

#endif

#ifdef Z_REAL_FIXED_FUNDAMENTAL

	typedef ztype(REAL)		  zreal;
#	define Z_REAL			  Z_TYPE		    (REAL)
#	define Z_REAL_FUNDAMENTAL	  Z_TYPE_FUNDAMENTAL	    (REAL)
#	define Z_REAL_NUMBER_FORMAT	  Z_TYPE_NUMBER_FORMAT	    (REAL)
#	define Z_REAL_BITS		  Z_TYPE_BITS		    (REAL)
#	define Z_REAL_SIZE		  Z_TYPE_SIZE		    (REAL)
#	define Z_REAL_BIAS		  Z_TYPE_BIAS		    (REAL)
#	define Z_REAL_DECIMAL_DIGITS	  Z_TYPE_DECIMAL_DIGITS	    (REAL)
#	define Z_REAL_SIGNIFICAND_OFFSET  Z_TYPE_SIGNIFICAND_OFFSET (REAL)
#	define Z_REAL_SIGNIFICAND_BITS	  Z_TYPE_SIGNIFICAND_BITS   (REAL)
#	define Z_REAL_SIGNIFICAND_DIGITS  Z_TYPE_SIGNIFICAND_DIGITS (REAL)
#	define Z_REAL_EXPONENT_OFFSET	  Z_TYPE_EXPONENT_OFFSET    (REAL)
#	define Z_REAL_EXPONENT_BITS	  Z_TYPE_EXPONENT_BITS	    (REAL)
#	define Z_REAL_EXPONENT_RADIX	  Z_TYPE_EXPONENT_RADIX	    (REAL)
#	define Z_REAL_EXPONENT_MINIMUM	  Z_TYPE_EXPONENT_MINIMUM   (REAL)
#	define Z_REAL_EXPONENT_MAXIMUM	  Z_TYPE_EXPONENT_MAXIMUM   (REAL)
#	define Z_REAL_EXPONENT_10_MINIMUM Z_TYPE_EXPONENT_10_MINIMUM(REAL)
#	define Z_REAL_EXPONENT_10_MAXIMUM Z_TYPE_EXPONENT_10_MAXIMUM(REAL)
#	define Z_REAL_SIGN_OFFSET	  Z_TYPE_SIGN_OFFSET	    (REAL)
#	define Z_REAL_SIGN_BITS		  Z_TYPE_SIGN_BITS	    (REAL)
#	define Z_REAL_EPSILON		  Z_TYPE_EPSILON	    (REAL)
#	define Z_REAL_MINIMUM		  Z_TYPE_MINIMUM	    (REAL)
#	define Z_REAL_MAXIMUM		  Z_TYPE_MAXIMUM	    (REAL)
#	define Z_REAL_INFINITY		  Z_TYPE_INFINITY	    (REAL)
#	define Z_REAL_NAN		  Z_TYPE_NAN		    (REAL)

#endif

#endif /* Z_types_fundamental_H */
