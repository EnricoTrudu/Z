/* Z Kit - inspection/data model.h
 _____  _______________
/_   /_/  -_/_   _/  _ |
 /____/\___/ /__//___/_| Kit
Copyright (C) 2006-2019 Manuel Sainz de Baranda y Go√±i.
Released under the terms of the GNU Lesser General Public License v3. */

#ifndef Z_inspection_data_model_H
#define Z_inspection_data_model_H

#include <Z/keys/data model.h>
#include <Z/keys/type.h>
#include <Z/inspection/language.h>
#include <Z/macros/pasting.h>

#ifndef Z_DATA_MODEL

#	ifdef Z_COMPILER_DATA_MODEL
#		define Z_DATA_MODEL Z_COMPILER_DATA_MODEL
#	else
#		include <Z/inspection/data model/detection.h>

#		ifndef Z_DATA_MODEL
#			include <Z/inspection/data model/deduction.h>

#			ifndef Z_DATA_MODEL
#				error "Z_DATA_MODEL not defined."
#			endif
#		endif
#	endif

#endif

#if Z_DATA_MODEL == Z_DATA_MODEL_IP16L32

#	include <Z/formats/data model/IP16L32.h>

#	define Z_DATA_MODEL_NAME		Z_DATA_MODEL_NAME_IP16L32
#	define Z_INSERT_DATA_MODEL(left, right) left##IP16L32##right

#elif Z_DATA_MODEL == Z_DATA_MODEL_I16LP32

#	include <Z/formats/data model/I16LP32.h>

#	define Z_DATA_MODEL_NAME		Z_DATA_MODEL_NAME_I16LP32
#	define Z_INSERT_DATA_MODEL(left, right) left##I16LP32##right

#elif Z_DATA_MODEL == Z_DATA_MODEL_ILP32

#	include <Z/formats/data model/ILP32.h>

#	define Z_DATA_MODEL_NAME		Z_DATA_MODEL_NAME_ILP32
#	define Z_INSERT_DATA_MODEL(left, right) left##ILP32##right

#elif Z_DATA_MODEL == Z_DATA_MODEL_ILP64

#	include <Z/formats/data model/ILP64.h>

#	define Z_DATA_MODEL_NAME		Z_DATA_MODEL_NAME_ILP64
#	define Z_INSERT_DATA_MODEL(left, right) left##ILP64##right

#elif Z_DATA_MODEL == Z_DATA_MODEL_LLP64

#	include <Z/formats/data model/LLP64.h>

#	define Z_DATA_MODEL_NAME		Z_DATA_MODEL_NAME_LLP64
#	define Z_INSERT_DATA_MODEL(left, right) left##LLP64##right

#elif Z_DATA_MODEL == Z_DATA_MODEL_LP32

#	include <Z/formats/data model/LP32.h>

#	define Z_DATA_MODEL_NAME		Z_DATA_MODEL_NAME_LP32
#	define Z_INSERT_DATA_MODEL(left, right) left##LP32##right

#elif Z_DATA_MODEL == Z_DATA_MODEL_LP64

#	include <Z/formats/data model/LP64.h>

#	define Z_DATA_MODEL_NAME		Z_DATA_MODEL_NAME_LP64
#	define Z_INSERT_DATA_MODEL(left, right) left##LP64##right

#elif Z_DATA_MODEL == Z_DATA_MODEL_SILP64

#	include <Z/formats/data model/SILP64.h>

#	define Z_DATA_MODEL_NAME		Z_DATA_MODEL_NAME_SILP64
#	define Z_INSERT_DATA_MODEL(left, right) left##SILP64##right

#else
#	error "Invalid Z_DATA_MODEL key."
#endif

#define Z_DATA_MODEL_HAS_LITERAL(TYPE) Z_DATA_MODEL_HAS_LITERAL_##TYPE
#define Z_DATA_MODEL_HAS_TYPE(	 TYPE) Z_DATA_MODEL_HAS_TYPE_##TYPE
#define Z_DATA_MODEL_BITS(	 TYPE) Z_INSERT_DATA_MODEL(Z_, _BITS_##TYPE)
#define Z_DATA_MODEL_FUNDAMENTAL(TYPE) Z_DATA_MODEL_FUNDAMENTAL_##TYPE
#define Z_DATA_MODEL_LITERAL(	 TYPE) Z_DATA_MODEL_LITERAL_##TYPE
#define Z_DATA_MODEL_TYPE(	 TYPE) Z_DATA_MODEL_TYPE_##TYPE

/* MARK: - 8-bit */

#if Z_DATA_MODEL_BITS(CHAR) == 8

#	define Z_DATA_MODEL_TYPE_UINT8	      unsigned char
#	define Z_DATA_MODEL_FUNDAMENTAL_UINT8 Z_FUNDAMENTAL_UCHAR
#	define Z_DATA_MODEL_LITERAL_UINT8     Z_SUFFIX_U

#	define Z_DATA_MODEL_TYPE_SINT8	      signed char
#	define Z_DATA_MODEL_FUNDAMENTAL_SINT8 Z_FUNDAMENTAL_SCHAR
#	define Z_DATA_MODEL_LITERAL_SINT8     Z_SAME

#else

#	if Z_COMPILER_HAS_TYPE(UINT8)
#		define Z_DATA_MODEL_TYPE_UINT8	      Z_COMPILER_TYPE(UINT8)
#		define Z_DATA_MODEL_FUNDAMENTAL_UINT8 Z_FUNDAMENTAL_UINT8
#	endif

#	if Z_COMPILER_HAS_LITERAL(UINT8)
#		define Z_DATA_MODEL_LITERAL_UINT8 Z_COMPILER_LITERAL(UINT8)
#	else
#		define Z_DATA_MODEL_LITERAL_UINT8 Z_SUFFIX_U
#	endif

#	if Z_COMPILER_HAS_TYPE(SINT8)
#		define Z_DATA_MODEL_TYPE_SINT8	      Z_COMPILER_TYPE(SINT8)
#		define Z_DATA_MODEL_FUNDAMENTAL_SINT8 Z_FUNDAMENTAL_SINT8
#	endif

#	if Z_COMPILER_HAS_LITERAL(SINT8)
#		define Z_DATA_MODEL_LITERAL_SINT8 Z_COMPILER_LITERAL(SINT8)
#	else
#		define Z_DATA_MODEL_LITERAL_SINT8 Z_SAME
#	endif

#endif

/* MARK: - 16-bit */

#if Z_DATA_MODEL_BITS(CHAR) == 16

#	define Z_DATA_MODEL_TYPE_UINT16	       unsigned char
#	define Z_DATA_MODEL_FUNDAMENTAL_UINT16 Z_FUNDAMENTAL_UCHAR
#	define Z_DATA_MODEL_LITERAL_UINT16     Z_SUFFIX_U

#	define Z_DATA_MODEL_TYPE_SINT16	       signed char
#	define Z_DATA_MODEL_FUNDAMENTAL_SINT16 Z_FUNDAMENTAL_SCHAR
#	define Z_DATA_MODEL_LITERAL_SINT16     Z_SAME

#elif Z_DATA_MODEL_BITS(INT) == 16

#	define Z_DATA_MODEL_TYPE_UINT16	       unsigned int
#	define Z_DATA_MODEL_FUNDAMENTAL_UINT16 Z_FUNDAMENTAL_UINT
#	define Z_DATA_MODEL_LITERAL_UINT16     Z_SUFFIX_U

#	define Z_DATA_MODEL_TYPE_SINT16	       signed int
#	define Z_DATA_MODEL_FUNDAMENTAL_SINT16 Z_FUNDAMENTAL_SINT
#	define Z_DATA_MODEL_LITERAL_SINT16     Z_SAME

#elif Z_DATA_MODEL_BITS(SHORT) == 16

#	define Z_DATA_MODEL_TYPE_UINT16	       unsigned short int
#	define Z_DATA_MODEL_FUNDAMENTAL_UINT16 Z_FUNDAMENTAL_USHORT
#	define Z_DATA_MODEL_LITERAL_UINT16     Z_SUFFIX_U

#	define Z_DATA_MODEL_TYPE_SINT16	       signed short int
#	define Z_DATA_MODEL_FUNDAMENTAL_SINT16 Z_FUNDAMENTAL_SSHORT
#	define Z_DATA_MODEL_LITERAL_SINT16     Z_SAME

#else

#	if Z_COMPILER_HAS_TYPE(UINT16)
#		define Z_DATA_MODEL_TYPE_UINT16	       Z_COMPILER_TYPE(UINT16)
#		define Z_DATA_MODEL_FUNDAMENTAL_UINT16 Z_FUNDAMENTAL_UINT16
#	endif

#	if Z_COMPILER_HAS_LITERAL(UINT16)
#		define Z_DATA_MODEL_LITERAL_UINT16 Z_COMPILER_LITERAL(UINT16)
#	else
#		define Z_DATA_MODEL_LITERAL_UINT16 Z_SUFFIX_U
#	endif

#	if Z_COMPILER_HAS_TYPE(SINT16)
#		define Z_DATA_MODEL_TYPE_SINT16	       Z_COMPILER_TYPE(SINT16)
#		define Z_DATA_MODEL_FUNDAMENTAL_SINT16 Z_FUNDAMENTAL_SINT16
#	endif

#	if Z_COMPILER_HAS_LITERAL(SINT16)
#		define Z_DATA_MODEL_LITERAL_SINT16 Z_COMPILER_LITERAL(SINT16)
#	else
#		define Z_DATA_MODEL_LITERAL_SINT16 Z_SAME
#	endif

#endif

/* MARK: - 32-bit */

#if Z_DATA_MODEL_BITS(INT) == 32

#	define Z_DATA_MODEL_TYPE_UINT32	       unsigned int
#	define Z_DATA_MODEL_FUNDAMENTAL_UINT32 Z_FUNDAMENTAL_UINT
#	define Z_DATA_MODEL_LITERAL_UINT32     Z_SUFFIX_U

#	define Z_DATA_MODEL_TYPE_SINT32	       signed int
#	define Z_DATA_MODEL_FUNDAMENTAL_SINT32 Z_FUNDAMENTAL_SINT
#	define Z_DATA_MODEL_LITERAL_SINT32     Z_SAME

#elif Z_DATA_MODEL_BITS(SHORT) == 32

#	define Z_DATA_MODEL_TYPE_UINT32	       unsigned short int
#	define Z_DATA_MODEL_FUNDAMENTAL_UINT32 Z_FUNDAMENTAL_USHORT
#	define Z_DATA_MODEL_LITERAL_UINT32     Z_SUFFIX_U

#	define Z_DATA_MODEL_TYPE_SINT32	       signed short int
#	define Z_DATA_MODEL_FUNDAMENTAL_SINT32 Z_FUNDAMENTAL_SSHORT
#	define Z_DATA_MODEL_LITERAL_SINT32     Z_SAME

#elif Z_DATA_MODEL_BITS(LONG) == 32

#	define Z_DATA_MODEL_TYPE_UINT32	       unsigned long int
#	define Z_DATA_MODEL_FUNDAMENTAL_UINT32 Z_FUNDAMENTAL_ULONG
#	define Z_DATA_MODEL_LITERAL_UINT32     Z_SUFFIX_UL

#	define Z_DATA_MODEL_TYPE_SINT32	       signed long int
#	define Z_DATA_MODEL_FUNDAMENTAL_SINT32 Z_FUNDAMENTAL_SLONG
#	define Z_DATA_MODEL_LITERAL_SINT32     Z_SUFFIX_L

#else

#	if Z_COMPILER_HAS_TYPE(UINT32)
#		define Z_DATA_MODEL_TYPE_UINT32	       Z_COMPILER_TYPE(UINT32)
#		define Z_DATA_MODEL_FUNDAMENTAL_UINT32 Z_FUNDAMENTAL_UINT32
#	endif

#	if Z_COMPILER_HAS_LITERAL(UINT32)
#		define Z_DATA_MODEL_LITERAL_UINT32 Z_COMPILER_LITERAL(UINT32)
#	else
#		define Z_DATA_MODEL_LITERAL_UINT32 Z_SUFFIX_U
#	endif

#	if Z_COMPILER_HAS_TYPE(SINT32)
#		define Z_DATA_MODEL_TYPE_SINT32	       Z_COMPILER_TYPE(SINT32)
#		define Z_DATA_MODEL_FUNDAMENTAL_SINT32 Z_FUNDAMENTAL_SINT32
#	endif

#	if Z_COMPILER_HAS_LITERAL(SINT32)
#		define Z_DATA_MODEL_LITERAL_SINT32 Z_COMPILER_LITERAL(SINT32)
#	else
#		define Z_DATA_MODEL_LITERAL_SINT32 Z_SAME
#	endif

#endif

/* MARK: - 64-bit */

#if Z_DATA_MODEL_BITS(INT) == 64

#	define Z_DATA_MODEL_TYPE_UINT64	       unsigned int
#	define Z_DATA_MODEL_FUNDAMENTAL_UINT64 Z_FUNDAMENTAL_UINT
#	define Z_DATA_MODEL_LITERAL_UINT64     Z_SUFFIX_U

#	define Z_DATA_MODEL_TYPE_SINT64	       signed int
#	define Z_DATA_MODEL_FUNDAMENTAL_SINT64 Z_FUNDAMENTAL_SINT
#	define Z_DATA_MODEL_LITERAL_SINT64     Z_SAME

#elif Z_DATA_MODEL_BITS(LONG) == 64

#	define Z_DATA_MODEL_TYPE_UINT64	       unsigned long int
#	define Z_DATA_MODEL_FUNDAMENTAL_UINT64 Z_FUNDAMENTAL_ULONG
#	define Z_DATA_MODEL_LITERAL_UINT64     Z_SUFFIX_UL

#	define Z_DATA_MODEL_TYPE_SINT64	       signed long int
#	define Z_DATA_MODEL_FUNDAMENTAL_SINT64 Z_FUNDAMENTAL_SLONG
#	define Z_DATA_MODEL_LITERAL_SINT64     Z_SUFFIX_L

#elif Z_DATA_MODEL_BITS(LLONG) == 64 && (Z_DIALECT_HAS_TYPE(C, LLONG) || Z_DIALECT_HAS_TYPE(CPP, LLONG))

#	define Z_DATA_MODEL_TYPE_UINT64	       unsigned long long int
#	define Z_DATA_MODEL_FUNDAMENTAL_UINT64 Z_FUNDAMENTAL_ULLONG
#	define Z_DATA_MODEL_LITERAL_UINT64     Z_SUFFIX_ULL

#	define Z_DATA_MODEL_TYPE_SINT64	       signed long long int
#	define Z_DATA_MODEL_FUNDAMENTAL_SINT64 Z_FUNDAMENTAL_SLLONG
#	define Z_DATA_MODEL_LITERAL_SINT64     Z_SUFFIX_LL

#else

#	if Z_COMPILER_HAS_TYPE(UINT64)
#		define Z_DATA_MODEL_TYPE_UINT64	       Z_COMPILER_TYPE(UINT64)
#		define Z_DATA_MODEL_FUNDAMENTAL_UINT64 Z_FUNDAMENTAL_UINT64
#	endif

#	if Z_COMPILER_HAS_LITERAL(UINT64)
#		define Z_DATA_MODEL_LITERAL_UINT64 Z_COMPILER_LITERAL(UINT64)
#	endif

#	if Z_COMPILER_HAS_TYPE(SINT64)
#		define Z_DATA_MODEL_TYPE_SINT64	       Z_COMPILER_TYPE(SINT64)
#		define Z_DATA_MODEL_FUNDAMENTAL_SINT64 Z_FUNDAMENTAL_SINT64
#	endif

#	if Z_COMPILER_HAS_LITERAL(SINT64)
#		define Z_DATA_MODEL_LITERAL_SINT64 Z_COMPILER_LITERAL(SINT64)
#	endif

#endif

/* MARK: - 128-bit */

#if Z_DATA_MODEL_BITS(LLONG) == 128 && (Z_DIALECT_HAS_TYPE(C, LLONG) || Z_DIALECT_HAS_TYPE(CPP, LLONG))

#	define Z_DATA_MODEL_TYPE_UINT128	unsigned long long int
#	define Z_DATA_MODEL_FUNDAMENTAL_UINT128 Z_FUNDAMENTAL_ULLONG
#	define Z_DATA_MODEL_LITERAL_UINT128	Z_SUFFIX_ULL

#	define Z_DATA_MODEL_TYPE_SINT128	signed long long int
#	define Z_DATA_MODEL_FUNDAMENTAL_SINT128 Z_FUNDAMENTAL_SLLONG
#	define Z_DATA_MODEL_LITERAL_SINT128	Z_SUFFIX_LL

#else

#	if Z_COMPILER_HAS_TYPE(UINT128)
#		define Z_DATA_MODEL_TYPE_UINT128	Z_COMPILER_TYPE(UINT128)
#		define Z_DATA_MODEL_FUNDAMENTAL_UINT128 Z_FUNDAMENTAL_UINT128
#	endif

#	if Z_COMPILER_HAS_LITERAL(UINT128)
#		define Z_DATA_MODEL_LITERAL_UINT128 Z_COMPILER_LITERAL(UINT128)
#	endif

#	if Z_COMPILER_HAS_TYPE(SINT128)
#		define Z_DATA_MODEL_TYPE_SINT128	Z_COMPILER_TYPE(SINT128)
#		define Z_DATA_MODEL_FUNDAMENTAL_SINT128 Z_FUNDAMENTAL_SINT128
#	endif

#	if Z_COMPILER_HAS_LITERAL(SINT128)
#		define Z_DATA_MODEL_LITERAL_SINT128 Z_COMPILER_LITERAL(SINT128)
#	endif

#endif

#include <Z/inspection/data model/completion.h>

#endif /* Z_inspection_data_model_H */
