/* Z Kit - inspection/compiler/modules/MCC.h
 _____  _______________
/_   /_/  -_/_   _/  _ |
 /____/\___/ /__//___/_| Kit
Copyright (C) 2006-2019 Manuel Sainz de Baranda y GoÃ±i.
Released under the terms of the GNU Lesser General Public License v3. */

#ifndef Z_inspection_compiler_modules_MCC_H
#define Z_inspection_compiler_modules_MCC_H

/* MARK: - Identification */

#define Z_COMPILER_NAME		  Z_COMPILER_NAME_MCC
#define Z_COMPILER_VERSION	  Z_VERSION(__MCC_MAJOR__, __MCC_MINOR__, __MCC_MICRO__)
#define Z_COMPILER_VERSION_STRING __MCC_VERSION__

/* MARK: - ISA */

#if defined(__x86_32__)
#	define Z_COMPILER_ISA Z_ISA_X86_32

#elif defined(__x86_64__)
#	define Z_COMPILER_ISA Z_ISA_X86_64
#endif

/* MARK: - ISA: Integral endianness / Bit field order */

#if defined(__BIG_ENDIAN__)
#	define Z_COMPILER_ISA_INTEGRAL_ENDIANNESS_ALL Z_ENDIANNESS_BIG

#elif defined(__LITTLE_ENDIAN__)
#	define Z_COMPILER_ISA_INTEGRAL_ENDIANNESS_ALL Z_ENDIANNESS_LITTLE
#endif

/* MARK: - OS / Platform */

#if defined(__Linux__)
#	define Z_COMPILER_OS Z_OS_LINUX

#elif defined(__macOS__)
#	define Z_COMPILER_OS Z_OS_MAC_OS_X

#elif defined(__Windows__)
#	define Z_COMPILER_OS Z_OS_WINDOWS
#endif

/* MARK: - Data model */

#if defined(__ILP32__)
#	define Z_COMPILER_DATA_MODEL Z_DATA_MODEL_ILP32

#elif defined(__LLP64__)
#	define Z_COMPILER_DATA_MODEL Z_DATA_MODEL_LLP64

#elif defined(__LP64__)
#	define Z_COMPILER_DATA_MODEL Z_DATA_MODEL_LP64
#endif

/* MARK: - K&R C */

#define Z_COMPILER_C_HAS_OLD_STYLE_FUNCTION	TRUE
#define Z_COMPILER_C_HAS_OPERATOR_SIZEOF	TRUE
#define Z_COMPILER_C_HAS_STORAGE_CLASS_AUTO	TRUE
#define Z_COMPILER_C_HAS_STORAGE_CLASS_EXTERN	TRUE
#define Z_COMPILER_C_HAS_STORAGE_CLASS_REGISTER TRUE
#define Z_COMPILER_C_HAS_STORAGE_CLASS_STATIC	TRUE

#if __has_type(double)
#	define Z_COMPILER_C_HAS_TYPE_DOUBLE TRUE
#endif

#if __has_type(float)
#	define Z_COMPILER_C_HAS_TYPE_FLOAT TRUE
#endif

/* MARK: - C89 */

#define Z_COMPILER_C_HAS_C89_RULES_ON_TYPE_CONVERSION		TRUE
#define Z_COMPILER_C_HAS_CONSTRUCT_AS_FUNCTION_ARGUMENT		TRUE
#define Z_COMPILER_C_HAS_CONSTRUCT_AS_RETURN_TYPE		TRUE
#define Z_COMPILER_C_HAS_CONSTRUCT_ASSIGNMENT			TRUE
#define Z_COMPILER_C_HAS_CONSTRUCT_NAMESPACE			TRUE
#define Z_COMPILER_C_HAS_ENUMERATION				TRUE
#define Z_COMPILER_C_HAS_FUNCTION_POINTER_AUTODEREFERENCING	TRUE
#define Z_COMPILER_C_HAS_FUNCTION_PROTOTYPE			TRUE
#define Z_COMPILER_C_HAS_INTEGRAL_SWITCH			TRUE
#define Z_COMPILER_C_HAS_LOCAL_AGGREGATE_CONSTANT_INITIALZATION TRUE
#define Z_COMPILER_C_HAS_PREPROCESSOR_INDENTATION		TRUE
#define Z_COMPILER_C_HAS_REMOVAL_OF_ENTRY_AS_KEYWORD		TRUE
#define Z_COMPILER_C_HAS_REMOVAL_OF_LONG_FLOAT_AS_TYPE		TRUE
#define Z_COMPILER_C_HAS_STRING_LITERAL_CONCATENATION		TRUE
#define Z_COMPILER_C_HAS_TRIGRAPHS				TRUE
#define Z_COMPILER_C_HAS_UNION_CONSTANT_INITIALIZATION		TRUE
#define Z_COMPILER_C_HAS_ESCAPE_SEQUENCE_ALERT			TRUE
#define Z_COMPILER_C_HAS_ESCAPE_SEQUENCE_HEXADECIMAL		TRUE
#define Z_COMPILER_C_HAS_ESCAPE_SEQUENCE_VERTICAL_TAB		TRUE
#define Z_COMPILER_C_HAS_LITERAL_FLOAT				TRUE
#define Z_COMPILER_C_HAS_LITERAL_LONG_DOUBLE			TRUE
#define Z_COMPILER_C_HAS_LITERAL_UNSIGNED			TRUE
#define Z_COMPILER_C_HAS_OPERATOR_UNARY_PLUS			TRUE
#define Z_COMPILER_C_HAS_PREPROCESSOR_DIRECTIVE_NULL		TRUE
#define Z_COMPILER_C_HAS_PREPROCESSOR_DIRECTIVE_ELIF		TRUE
#define Z_COMPILER_C_HAS_PREPROCESSOR_DIRECTIVE_ERROR		TRUE
#define Z_COMPILER_C_HAS_PREPROCESSOR_DIRECTIVE_LINE		TRUE
#define Z_COMPILER_C_HAS_PREPROCESSOR_DIRECTIVE_PRAGMA		TRUE
#define Z_COMPILER_C_HAS_PREPROCESSOR_OPERATOR_DEFINED		TRUE
#define Z_COMPILER_C_HAS_PREPROCESSOR_OPERATOR_PASTING		TRUE
#define Z_COMPILER_C_HAS_PREPROCESSOR_OPERATOR_STRINGIZING	TRUE
#define Z_COMPILER_C_HAS_TYPE_UNSIGNED_CHAR			TRUE
#define Z_COMPILER_C_HAS_TYPE_UNSIGNED_LONG			TRUE
#define Z_COMPILER_C_HAS_TYPE_UNSIGNED_SHORT			TRUE
#define Z_COMPILER_C_HAS_TYPE_VOID				TRUE
#define Z_COMPILER_C_HAS_TYPE_VOID_POINTER			TRUE
#define Z_COMPILER_C_HAS_TYPE_MODIFIER_SIGNED			TRUE
#define Z_COMPILER_C_HAS_TYPE_QUALIFIER_CONST			TRUE
#define Z_COMPILER_C_HAS_TYPE_QUALIFIER_VOLATILE		TRUE

#if __has_type(long double)
#	define Z_COMPILER_C_HAS_TYPE_LONG_DOUBLE TRUE
#endif

/* MARK: - C95 */

#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199409L
#	define Z_COMPILER_C_HAS_DIGRAPHS TRUE
#endif

#endif /* Z_inspection_compiler_modules_Clang_H */
