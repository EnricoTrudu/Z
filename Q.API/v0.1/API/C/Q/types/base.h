/* Q API - types/base.h
	      __	   __
  _______ ___/ /______ ___/ /__
 / __/ -_) _  / __/ _ \ _  / -_)
/_/  \__/\_,_/\__/\___/_,_/\__/
Copyright © 2006-2014 Manuel Sainz de Baranda y Goñi.
Released under the terms of the GNU Lesser General Public License v3. */

#ifndef __Q_types_base_H__
#define __Q_types_base_H__

#include <Q/inspection/data model.h>
#include <Q/inspection/floating point.h>
#include <Q/macros/inspection.h>
#include <Q/macros/structure.h>
#include <Q/constants/base.h>

/* MARK: - Fixed width natural types */

typedef Q_DATA_MODEL_TYPE(UINT8)		quint8;
typedef struct {quint8 x, y;}			Q2DUInt8;
typedef struct {quint8 x, y, z;}		Q3DUInt8;
typedef struct {quint8 x, y, z, w;}		Q4DUInt8;
#define Q_UINT8					Q_DATA_MODEL_LITERAL  (UINT8)
#define Q_UINT8_SUFFIX				Q_DATA_MODEL_SUFFIX   (UINT8)
#define Q_UINT8_BASE_TYPE			Q_DATA_MODEL_BASE_TYPE(UINT8)
#define Q_UINT8_FIXED_TYPE			Q_VALUE_TYPE_UINT8
#define Q_UINT8_TYPE				Q_VALUE_TYPE_UINT8
#define Q_UINT8_FORMAT				Q_VALUE_FORMAT_8BIT_NATURAL
#define Q_UINT8_BITS				8
#define Q_UINT8_SIZE				1
#define Q_UINT8_MINIMUM				0
#define Q_UINT8_MAXIMUM				255
#define Q_UINT8_NAME				UINT8
#define Q_UINT8_Name				UInt8
#define Q_UINT8_name				uint8

typedef Q_DATA_MODEL_TYPE(UINT16)		quint16;
typedef struct {quint16 x, y;}			Q2DUInt16;
typedef struct {quint16 x, y, z;}		Q3DUInt16;
typedef struct {quint16 x, y, z, w;}		Q4DUInt16;
#define Q_UINT16				Q_DATA_MODEL_LITERAL  (UINT16)
#define Q_UINT16_SUFFIX				Q_DATA_MODEL_SUFFIX   (UINT16)
#define Q_UINT16_BASE_TYPE			Q_DATA_MODEL_BASE_TYPE(UINT16)
#define Q_UINT16_FIXED_TYPE			Q_VALUE_TYPE_UINT16
#define Q_UINT16_TYPE				Q_VALUE_TYPE_UINT16
#define Q_UINT16_FORMAT				Q_VALUE_FORMAT_16BIT_NATURAL
#define Q_UINT16_ENDIANNESS			Q_CPU_INTEGER_ENDIANNESS(16BIT)
#define Q_UINT16_BITS				16
#define Q_UINT16_SIZE				2
#define Q_UINT16_MINIMUM			0
#define Q_UINT16_MAXIMUM			65535
#define Q_UINT16_NAME				UINT16
#define Q_UINT16_Name				UInt16
#define Q_UINT16_name				uint16

typedef Q_DATA_MODEL_TYPE(UINT32)		quint32;
typedef struct {quint32 x, y;}			Q2DUInt32;
typedef struct {quint32 x, y, z;}		Q3DUInt32;
typedef struct {quint32 x, y, z, w;}		Q4DUInt32;
#define Q_UINT32				Q_DATA_MODEL_LITERAL  (UINT32)
#define Q_UINT32_SUFFIX				Q_DATA_MODEL_SUFFIX   (UINT32)
#define Q_UINT32_BASE_TYPE			Q_DATA_MODEL_BASE_TYPE(UINT32)
#define Q_UINT32_FIXED_TYPE			Q_VALUE_TYPE_UINT32
#define Q_UINT32_TYPE				Q_VALUE_TYPE_UINT32
#define Q_UINT32_FORMAT				Q_VALUE_FORMAT_32BIT_NATURAL
#define Q_UINT32_ENDIANNESS			Q_CPU_INTEGER_ENDIANNESS(32BIT)
#define Q_UINT32_BITS				32
#define Q_UINT32_SIZE				4
#define Q_UINT32_MINIMUM			0
#define Q_UINT32_MAXIMUM			Q_UINT32(4294967295)
#define Q_UINT32_NAME				UINT32
#define Q_UINT32_Name				UInt32
#define Q_UINT32_name				uint32

typedef Q_DATA_MODEL_TYPE(UINT64)		quint64;
typedef struct {quint64 x, y;}			Q2DUInt64;
typedef struct {quint64 x, y, z;}		Q3DUInt64;
typedef struct {quint64 x, y, z, w;}		Q4DUInt64;
#define Q_UINT64				Q_DATA_MODEL_LITERAL  (UINT64)
#define Q_UINT64_SUFFIX				Q_DATA_MODEL_SUFFIX   (UINT64)
#define Q_UINT64_BASE_TYPE			Q_DATA_MODEL_BASE_TYPE(UINT64)
#define Q_UINT64_FIXED_TYPE			Q_VALUE_TYPE_UINT64
#define Q_UINT64_TYPE				Q_VALUE_TYPE_UINT64
#define Q_UINT64_FORMAT				Q_VALUE_FORMAT_64BIT_NATURAL
#define Q_UINT64_ENDIANNESS			Q_CPU_INTEGER_ENDIANNESS(64BIT)
#define Q_UINT64_BITS				64
#define Q_UINT64_SIZE				8
#define Q_UINT64_MINIMUM			0
#define Q_UINT64_MAXIMUM			Q_UINT64(18446744073709551615)
#define Q_UINT64_NAME				UINT64
#define Q_UINT64_Name				UInt64
#define Q_UINT64_name				uint64

#if Q_CPU_HAS(128BIT_ARITHMETIC) && Q_COMPILER_HAS_TYPE(INT128)

	typedef Q_COMPILER_TYPE(INT128)		qint128;
	typedef struct {qint128 x, y;}		Q2DInt128;
	typedef struct {qint128 x, y, z;}	Q3DInt128;
	typedef struct {qint128 x, y, z, w;}	Q4DInt128;
#	define Q_INT128_BASE_TYPE		Q_VALUE_TYPE_INT128
#	define Q_INT128_FIXED_TYPE		Q_VALUE_TYPE_INT128
#	define Q_INT128_TYPE			Q_VALUE_TYPE_INT128
#	define Q_INT128_FORMAT			Q_VALUE_FORMAT_128BIT_INTEGER
#	define Q_INT128_ENDIANNESS		Q_CPU_INTEGER_ENDIANNESS(128BIT)
#	define Q_INT128_BITS			128
#	define Q_INT128_SIZE			16
#	define Q_INT128_NAME			INT128
#	define Q_INT128_Name			Int128
#	define Q_INT128_name			int128
#	define Q_AVAILABLE_INT128

#	if Q_COMPILER_HAS(INT128_LITERAL)
#		define Q_INT128			Q_COMPILER_LITERAL(INT128)
#		define Q_INT128_SUFFIX		Q_COMPILER_SUFFIX (INT128)
#		define Q_INT128_MAXIMUM		Q_INT128(170141183460469231731687303715884105727)
#		define Q_INT128_MINIMUM		(-Q_INT128_MAXIMUM - Q_INT128(1))
#	else
#		define Q_INT128			Q_SAME
#		define Q_INT128_SUFFIX
#		define Q_INT128_MAXIMUM		0 /* TO BE IMPLEMENTED */
#		define Q_INT128_MINIMUM		0 /* TO BE IMPLEMENTED */
#	endif

#endif

#define Q_UINTX_LITERAL(   BITS)		Q_PREFIX_Q_UINT(BITS)
#define Q_UINTX_SUFFIX(	   BITS)		Q_PREFIX_Q_UINT(Q_JOIN_2(BITS, _SUFFIX	  ))
#define Q_UINTX_BASE_TYPE( BITS)		Q_PREFIX_Q_UINT(Q_JOIN_2(BITS, _BASE_TYPE ))
#define Q_UINTX_TYPE(	   BITS)		Q_PREFIX_Q_UINT(Q_JOIN_2(BITS, _TYPE	  ))
#define Q_UINTX_FORMAT(    BITS)		Q_PREFIX_Q_UINT(Q_JOIN_2(BITS, _FORMAT    ))
#define Q_UINTX_ENDIANNESS(BITS)		Q_PREFIX_Q_UINT(Q_JOIN_2(BITS, _ENDIANNESS))
#define Q_UINTX_SIZE(	   BITS)		Q_PREFIX_Q_UINT(Q_JOIN_2(BITS, _SIZE	  ))
#define Q_UINTX_MINIMUM(   BITS)		Q_PREFIX_Q_UINT(Q_JOIN_2(BITS, _MINIMUM   ))
#define Q_UINTX_MAXIMUM(   BITS)		Q_PREFIX_Q_UINT(Q_JOIN_2(BITS, _MAXIMUM   ))
#define Q_UINTX_NAME(	   BITS)		Q_PREFIX_Q_UINT(Q_JOIN_2(BITS, _NAME	  ))
#define Q_UINTX_Name(	   BITS)		Q_PREFIX_Q_UINT(Q_JOIN_2(BITS, _Name	  ))
#define Q_UINTX_name(	   BITS)		Q_PREFIX_Q_UINT(Q_JOIN_2(BITS, _name	  ))

/* MARK: - Fixed width integer types */

typedef Q_DATA_MODEL_TYPE(INT8)			qint8;
typedef struct {qint8 x, y;}			Q2DInt8;
typedef struct {qint8 x, y, z;}			Q3DInt8;
typedef struct {qint8 x, y, z, w;}		Q4DInt8;
#define Q_INT8					Q_DATA_MODEL_LITERAL  (INT8)
#define Q_INT8_SUFFIX				Q_DATA_MODEL_SUFFIX   (INT8)
#define Q_INT8_BASE_TYPE			Q_DATA_MODEL_BASE_TYPE(INT8)
#define Q_INT8_FIXED_TYPE			Q_VALUE_TYPE_INT8
#define Q_INT8_TYPE				Q_VALUE_TYPE_INT8
#define Q_INT8_FORMAT				Q_VALUE_FORMAT_8BIT_INTEGER
#define Q_INT8_BITS				8
#define Q_INT8_SIZE				1
#define Q_INT8_MINIMUM				(-128)
#define Q_INT8_MAXIMUM				127
#define Q_INT8_NAME				INT8
#define Q_INT8_Name				Int8
#define Q_INT8_name				int8

typedef Q_DATA_MODEL_TYPE(INT16)		qint16;
typedef struct {qint16 x, y;}			Q2DInt16;
typedef struct {qint16 x, y, z;}		Q3DInt16;
typedef struct {qint16 x, y, z, w;}		Q4DInt16;
#define Q_INT16					Q_DATA_MODEL_LITERAL  (INT16)
#define Q_INT16_SUFFIX				Q_DATA_MODEL_SUFFIX   (INT16)
#define Q_INT16_BASE_TYPE			Q_DATA_MODEL_BASE_TYPE(INT16)
#define Q_INT16_FIXED_TYPE			Q_VALUE_TYPE_INT16
#define Q_INT16_TYPE				Q_VALUE_TYPE_INT16
#define Q_INT16_FORMAT				Q_VALUE_FORMAT_16BIT_INTEGER
#define Q_INT16_ENDIANNESS			Q_CPU_INTEGER_ENDIANNESS(16BIT)
#define Q_INT16_BITS				16
#define Q_INT16_SIZE				2
#define Q_INT16_MINIMUM				(-32768)
#define Q_INT16_MAXIMUM				32767
#define Q_INT16_NAME				INT16
#define Q_INT16_Name				Int16
#define Q_INT16_name				int16

typedef Q_DATA_MODEL_TYPE(INT32)		qint32;
typedef struct {qint32 x, y;}			Q2DInt32;
typedef struct {qint32 x, y, z;}		Q3DInt32;
typedef struct {qint32 x, y, z, w;}		Q4DInt32;
#define Q_INT32					Q_DATA_MODEL_LITERAL  (INT32)
#define Q_INT32_SUFFIX				Q_DATA_MODEL_SUFFIX   (INT32)
#define Q_INT32_BASE_TYPE			Q_DATA_MODEL_BASE_TYPE(INT32)
#define Q_INT32_FIXED_TYPE			Q_VALUE_TYPE_INT32
#define Q_INT32_TYPE				Q_VALUE_TYPE_INT32
#define Q_INT32_FORMAT				Q_VALUE_FORMAT_32BIT_INTEGER
#define Q_INT32_ENDIANNESS			Q_CPU_INTEGER_ENDIANNESS(32BIT)
#define Q_INT32_BITS				32
#define Q_INT32_SIZE				4
#define Q_INT32_MINIMUM				Q_INT32(-2147483648)
#define	Q_INT32_MAXIMUM				Q_INT32( 2147483647)
#define Q_INT32_NAME				INT32
#define Q_INT32_Name				Int32
#define Q_INT32_name				int32

typedef Q_DATA_MODEL_TYPE(INT64)		qint64;
typedef struct {qint64 x, y;}			Q2DInt64;
typedef struct {qint64 x, y, z;}		Q3DInt64;
typedef struct {qint64 x, y, z, w;}		Q4DInt64;
#define Q_INT64					Q_DATA_MODEL_LITERAL  (INT64)
#define Q_INT64_SUFFIX				Q_DATA_MODEL_SUFFIX   (INT64)
#define Q_INT64_BASE_TYPE			Q_DATA_MODEL_BASE_TYPE(INT64)
#define Q_INT64_TYPE				Q_VALUE_TYPE_INT64
#define Q_INT64_FIXED_TYPE			Q_VALUE_TYPE_INT64
#define Q_INT64_FORMAT				Q_VALUE_FORMAT_64BIT_INTEGER
#define Q_INT64_ENDIANNESS			Q_CPU_INTEGER_ENDIANNESS(64BIT)
#define Q_INT64_BITS				64
#define Q_INT64_SIZE				8
#define Q_INT64_MAXIMUM				Q_INT64(9223372036854775807)
#define Q_INT64_MINIMUM				(-Q_INT64_MAXIMUM - Q_INT64(1))
#define Q_INT64_NAME				INT64
#define Q_INT64_Name				Int64
#define Q_INT64_name				int64

#if Q_CPU_HAS(128BIT_ARITHMETIC) && Q_COMPILER_HAS_TYPE(UINT128)

	typedef Q_COMPILER_TYPE(UINT128)	quint128;
	typedef struct {quint128 x, y;}		Q2DUInt128;
	typedef struct {quint128 x, y, z;}	Q3DUInt128;
	typedef struct {quint128 x, y, z, w;}	Q4DUInt128;
#	define Q_UINT128_BASE_TYPE		Q_VALUE_TYPE_UINT128
#	define Q_UINT128_FIXED_TYPE		Q_VALUE_TYPE_UINT128
#	define Q_UINT128_TYPE			Q_VALUE_TYPE_UINT128
#	define Q_UINT128_FORMAT			Q_VALUE_FORMAT_128BIT_NATURAL
#	define Q_UINT128_ENDIANNESS		Q_CPU_INTEGER_ENDIANNESS(128BIT)
#	define Q_UINT128_BITS			128
#	define Q_UINT128_SIZE			16
#	define Q_UINT128_MINIMUM		0
#	define Q_UINT128_NAME			UINT128
#	define Q_UINT128_Name			UInt128
#	define Q_UINT128_name			uint128
#	define Q_AVAILABLE_UINT128

#	if Q_COMPILER_HAS(UINT128_LITERAL)
#		define Q_UINT128		Q_COMPILER_LITERAL(UINT128)
#		define Q_UINT128_SUFFIX		Q_COMPILER_SUFFIX (UINT128)
#		define Q_UINT128_MAXIMUM	Q_UINT128(340282366920938463463374607431768211455)
#	else
#		define Q_UINT128		Q_SAME
#		define Q_UINT128_SUFFIX
#		define Q_UINT128_MAXIMUM	(((quint128)0) - 1)
#	endif

#endif

#define Q_INTX_LITERAL(   BITS)			Q_PREFIX_Q_INT(BITS)
#define Q_INTX_SUFFIX(	  BITS)			Q_PREFIX_Q_INT(Q_JOIN_2(BITS, _SUFFIX	 ))
#define Q_INTX_BASE_TYPE( BITS)			Q_PREFIX_Q_INT(Q_JOIN_2(BITS, _BASE_TYPE ))
#define Q_INTX_TYPE(	  BITS)			Q_PREFIX_Q_INT(Q_JOIN_2(BITS, _FIXED_TYPE))
#define Q_INTX_FORMAT(	  BITS)			Q_PREFIX_Q_INT(Q_JOIN_2(BITS, _FORMAT	 ))
#define Q_INTX_ENDIANNESS(BITS)			Q_PREFIX_Q_INT(Q_JOIN_2(BITS, _ENDIANNESS))
#define Q_INTX_SIZE(	  BITS)			Q_PREFIX_Q_INT(Q_JOIN_2(BITS, _SIZE	 ))
#define Q_INTX_MINIMUM(   BITS)			Q_PREFIX_Q_INT(Q_JOIN_2(BITS, _MINIMUM	 ))
#define Q_INTX_MAXIMUM(   BITS)			Q_PREFIX_Q_INT(Q_JOIN_2(BITS, _MAXIMUM	 ))
#define Q_INTX_NAME(	  BITS)			Q_PREFIX_Q_INT(Q_JOIN_2(BITS, _NAME	 ))
#define Q_INTX_Name(	  BITS)			Q_PREFIX_Q_INT(Q_JOIN_2(BITS, _Name	 ))
#define Q_INTX_name(	  BITS)			Q_PREFIX_Q_INT(Q_JOIN_2(BITS, _name	 ))

/* MARK: - Base natural types */

#define Q_UCHAR_BITS				Q_DATA_MODEL_BITS(CHAR)

typedef unsigned char				quchar;
typedef Q_JOIN_2(Q2DUInt, Q_UCHAR_BITS)		Q2DUChar;
typedef Q_JOIN_2(Q3DUInt, Q_UCHAR_BITS)		Q3DUChar;
typedef Q_JOIN_2(Q4DUInt, Q_UCHAR_BITS)		Q4DUChar;
#define Q_UCHAR					Q_SAME
#define Q_UCHAR_SUFFIX
#define Q_UCHAR_BASE_TYPE			Q_VALUE_TYPE_UCHAR
#define Q_UCHAR_FIXED_TYPE			Q_UINTX_TYPE   (Q_UCHAR_BITS)
#define Q_UCHAR_TYPE				Q_VALUE_TYPE_UCHAR
#define Q_UCHAR_FORMAT				Q_UINTX_FORMAT (Q_UCHAR_BITS)
#define Q_UCHAR_SIZE				Q_UINTX_SIZE   (Q_UCHAR_BITS)
#define Q_UCHAR_MINIMUM				0
#define Q_UCHAR_MAXIMUM				Q_UINTX_MAXIMUM(Q_UCHAR_BITS)
#define Q_UCHAR_FIXED_TYPE_NAME			Q_UINTX_NAME   (Q_UCHAR_BITS)
#define Q_UCHAR_FIXED_TYPE_Name			Q_UINTX_Name   (Q_UCHAR_BITS)
#define Q_UCHAR_FIXED_TYPE_name			Q_UINTX_name   (Q_UCHAR_BITS)
#define Q_UCHAR_NAME				UCHAR
#define Q_UCHAR_Name				UChar
#define Q_UCHAR_name				uchar

#define Q_USHORT_BITS				Q_DATA_MODEL_BITS(SHORT)

typedef unsigned short int			qushort;
typedef Q_JOIN_2(Q2DUInt, Q_USHORT_BITS)	Q2DUShort;
typedef Q_JOIN_2(Q3DUInt, Q_USHORT_BITS)	Q3DUShort;
typedef Q_JOIN_2(Q4DUInt, Q_USHORT_BITS)	Q4DUShort;
#define Q_USHORT				Q_SAME
#define Q_USHORT_SUFFIX
#define Q_USHORT_BASE_TYPE			Q_VALUE_TYPE_USHORT
#define Q_USHORT_FIXED_TYPE			Q_UINTX_TYPE	  (Q_USHORT_BITS)
#define Q_USHORT_TYPE				Q_VALUE_TYPE_USHORT
#define Q_USHORT_FORMAT				Q_UINTX_FORMAT	  (Q_USHORT_BITS)
#define Q_USHORT_ENDIANNESS			Q_UINTX_ENDIANNESS(Q_USHORT_BITS)
#define Q_USHORT_SIZE				Q_UINTX_SIZE	  (Q_USHORT_BITS)
#define Q_USHORT_MINIMUM			0
#define Q_USHORT_MAXIMUM			Q_UINTX_MAXIMUM   (Q_USHORT_BITS)
#define Q_USHORT_FIXED_TYPE_NAME		Q_UINTX_NAME	  (Q_USHORT_BITS)
#define Q_USHORT_FIXED_TYPE_Name		Q_UINTX_Name	  (Q_USHORT_BITS)
#define Q_USHORT_FIXED_TYPE_name		Q_UINTX_name	  (Q_USHORT_BITS)
#define Q_USHORT_NAME				USHORT
#define Q_USHORT_Name				UShort
#define Q_USHORT_name				ushort

#define Q_UINT_BITS				Q_DATA_MODEL_BITS(INT)

typedef unsigned int				quint;
typedef Q_JOIN_2(Q2DUInt, Q_UINT_BITS)		Q2DUInt;
typedef Q_JOIN_2(Q3DUInt, Q_UINT_BITS)		Q3DUInt;
typedef Q_JOIN_2(Q4DUInt, Q_UINT_BITS)		Q4DUInt;
#define Q_UINT					Q_SAME
#define Q_UINT_SUFFIX
#define Q_UINT_BASE_TYPE			Q_VALUE_TYPE_UINT
#define Q_UINT_FIXED_TYPE			Q_UINTX_TYPE	  (Q_UINT_BITS)
#define Q_UINT_TYPE				Q_VALUE_TYPE_UINT
#define Q_UINT_FORMAT				Q_UINTX_FORMAT	  (Q_UINT_BITS)
#define Q_UINT_ENDIANNESS			Q_UINTX_ENDIANNESS(Q_UINT_BITS)
#define Q_UINT_SIZE				Q_UINTX_SIZE	  (Q_UINT_BITS)
#define Q_UINT_MINIMUM				0
#define Q_UINT_MAXIMUM				Q_UINTX_MAXIMUM   (Q_UINT_BITS)
#define Q_UINT_FIXED_TYPE_NAME			Q_UINTX_NAME	  (Q_UINT_BITS)
#define Q_UINT_FIXED_TYPE_Name			Q_UINTX_Name	  (Q_UINT_BITS)
#define Q_UINT_FIXED_TYPE_name			Q_UINTX_name	  (Q_UINT_BITS)
#define Q_UINT_NAME				UINT
#define Q_UINT_Name				UInt
#define Q_UINT_name				uint

#define Q_ULONG_BITS				Q_DATA_MODEL_BITS(LONG)

typedef unsigned long int			qulong;
typedef Q_JOIN_2(Q2DUInt, Q_ULONG_BITS)		Q2DULong;
typedef Q_JOIN_2(Q3DUInt, Q_ULONG_BITS)		Q3DULong;
typedef Q_JOIN_2(Q4DUInt, Q_ULONG_BITS)		Q4DULong;
#define Q_ULONG					Q_SUFFIX_UL
#define Q_ULONG_SUFFIX				UL
#define Q_ULONG_BASE_TYPE			Q_VALUE_TYPE_ULONG
#define Q_ULONG_FIXED_TYPE			Q_UINTX_TYPE	  (Q_ULONG_BITS)
#define Q_ULONG_TYPE				Q_VALUE_TYPE_ULONG
#define Q_ULONG_FORMAT				Q_UINTX_FORMAT	  (Q_ULONG_BITS)
#define Q_ULONG_ENDIANNESS			Q_UINTX_ENDIANNESS(Q_ULONG_BITS)
#define Q_ULONG_SIZE				Q_UINTX_SIZE	  (Q_ULONG_BITS)
#define Q_ULONG_MINIMUM				0
#define Q_ULONG_MAXIMUM				Q_UINTX_MAXIMUM   (Q_ULONG_BITS)
#define Q_ULONG_FIXED_TYPE_NAME			Q_UINTX_NAME	  (Q_ULONG_BITS)
#define Q_ULONG_FIXED_TYPE_Name			Q_UINTX_Name	  (Q_ULONG_BITS)
#define Q_ULONG_FIXED_TYPE_name			Q_UINTX_name	  (Q_ULONG_BITS)
#define Q_ULONG_NAME				ULONG
#define Q_ULONG_Name				ULong
#define Q_ULONG_name				ulong

#define Q_ULLONG_BITS				Q_DATA_MODEL_BITS(LLONG)

typedef unsigned long long int			qullong;
typedef Q_JOIN_2(Q2DUInt, Q_ULLONG_BITS)	Q2DULLong;
typedef Q_JOIN_2(Q3DUInt, Q_ULLONG_BITS)	Q3DULLong;
typedef Q_JOIN_2(Q4DUInt, Q_ULLONG_BITS)	Q4DULLong;
#define Q_ULLONG				Q_SUFFIX_ULL
#define Q_ULLONG_SUFFIX				ULL
#define Q_ULLONG_BASE_TYPE			Q_VALUE_TYPE_ULLONG
#define Q_ULLONG_FIXED_TYPE			Q_UINTX_TYPE	  (Q_ULLONG_BITS)
#define Q_ULLONG_TYPE				Q_VALUE_TYPE_ULLONG
#define Q_ULLONG_FORMAT				Q_UINTX_FORMAT	  (Q_ULLONG_BITS)
#define Q_ULLONG_ENDIANNESS			Q_UINTX_ENDIANNESS(Q_ULLONG_BITS)
#define Q_ULLONG_SIZE				Q_UINTX_SIZE	  (Q_ULLONG_BITS)
#define Q_ULLONG_MINIMUM			0
#define Q_ULLONG_MAXIMUM			Q_UINTX_MAXIMUM   (Q_ULLONG_BITS)
#define Q_ULLONG_FIXED_TYPE_NAME		Q_UINTX_NAME	  (Q_ULLONG_BITS)
#define Q_ULLONG_FIXED_TYPE_Name		Q_UINTX_Name	  (Q_ULLONG_BITS)
#define Q_ULLONG_FIXED_TYPE_name		Q_UINTX_name	  (Q_ULLONG_BITS)
#define Q_ULLONG_NAME				ULLONG
#define Q_ULLONG_Name				ULLong
#define Q_ULLONG_name				ullong

/* MARK: - Base integer types */

#define Q_CHAR_BITS				Q_DATA_MODEL_BITS(CHAR)

typedef signed char				qchar;
typedef Q_JOIN_2(Q2DInt, Q_CHAR_BITS)		Q2DChar;
typedef Q_JOIN_2(Q3DInt, Q_CHAR_BITS)		Q3DChar;
typedef Q_JOIN_2(Q4DInt, Q_CHAR_BITS)		Q4DChar;
#define Q_CHAR					Q_SAME
#define Q_CHAR_SUFFIX
#define Q_CHAR_BASE_TYPE			Q_VALUE_TYPE_CHAR
#define Q_CHAR_FIXED_TYPE			Q_INTX_TYPE   (Q_CHAR_BITS)
#define Q_CHAR_TYPE				Q_VALUE_TYPE_CHAR
#define Q_CHAR_FORMAT				Q_INTX_FORMAT (Q_CHAR_BITS)
#define Q_CHAR_SIZE				Q_INTX_SIZE   (Q_CHAR_BITS)
#define Q_CHAR_MINIMUM				Q_INTX_MINIMUM(Q_CHAR_BITS)
#define Q_CHAR_MAXIMUM				Q_INTX_MAXIMUM(Q_CHAR_BITS)
#define Q_CHAR_FIXED_TYPE_NAME			Q_INTX_NAME   (Q_CHAR_BITS)
#define Q_CHAR_FIXED_TYPE_Name			Q_INTX_Name   (Q_CHAR_BITS)
#define Q_CHAR_FIXED_TYPE_name			Q_INTX_name   (Q_CHAR_BITS)
#define Q_CHAR_NAME				UCHAR
#define Q_CHAR_Name				UChar
#define Q_CHAR_name				uchar

#define Q_SHORT_BITS				Q_DATA_MODEL_BITS(SHORT)

typedef signed short int			qshort;
typedef Q_JOIN_2(Q2DInt, Q_SHORT_BITS)		Q2DShort;
typedef Q_JOIN_2(Q3DInt, Q_SHORT_BITS)		Q3DShort;
typedef Q_JOIN_2(Q4DInt, Q_SHORT_BITS)		Q4DShort;
#define Q_SHORT					Q_SAME
#define Q_SHORT_SUFFIX
#define Q_SHORT_BASE_TYPE			Q_VALUE_TYPE_SHORT
#define Q_SHORT_FIXED_TYPE			Q_INTX_TYPE	 (Q_SHORT_BITS)
#define Q_SHORT_TYPE				Q_VALUE_TYPE_SHORT
#define Q_SHORT_FORMAT				Q_INTX_FORMAT	 (Q_SHORT_BITS)
#define Q_SHORT_ENDIANNESS			Q_INTX_ENDIANNESS(Q_SHORT_BITS)
#define Q_SHORT_SIZE				Q_INTX_SIZE	 (Q_SHORT_BITS)
#define Q_SHORT_MINIMUM				Q_INTX_MINIMUM	 (Q_SHORT_BITS)
#define Q_SHORT_MAXIMUM				Q_INTX_MAXIMUM	 (Q_SHORT_BITS)
#define Q_SHORT_FIXED_TYPE_NAME			Q_INTX_NAME	 (Q_SHORT_BITS)
#define Q_SHORT_FIXED_TYPE_Name			Q_INTX_Name	 (Q_SHORT_BITS)
#define Q_SHORT_FIXED_TYPE_name			Q_INTX_name	 (Q_SHORT_BITS)
#define Q_SHORT_NAME				USHORT
#define Q_SHORT_Name				UShort
#define Q_SHORT_name				ushort

#define Q_INT_BITS				Q_DATA_MODEL_BITS(INT)

typedef signed int				qint;
typedef Q_JOIN_2(Q2DInt, Q_INT_BITS)		Q2DInt;
typedef Q_JOIN_2(Q3DInt, Q_INT_BITS)		Q3DInt;
typedef Q_JOIN_2(Q4DInt, Q_INT_BITS)		Q4DInt;
#define Q_INT					Q_SAME
#define Q_INT_SUFFIX
#define Q_INT_BASE_TYPE				Q_VALUE_TYPE_INT
#define Q_INT_FIXED_TYPE			Q_INTX_TYPE	 (Q_INT_BITS)
#define Q_INT_TYPE				Q_VALUE_TYPE_INT
#define Q_INT_FORMAT				Q_INTX_FORMAT	 (Q_INT_BITS)
#define Q_INT_ENDIANNESS			Q_INTX_ENDIANNESS(Q_INT_BITS)
#define Q_INT_SIZE				Q_INTX_SIZE	 (Q_INT_BITS)
#define Q_INT_MINIMUM				Q_INTX_MINIMUM	 (Q_INT_BITS)
#define Q_INT_MAXIMUM				Q_INTX_MAXIMUM	 (Q_INT_BITS)
#define Q_INT_FIXED_TYPE_NAME			Q_INTX_NAME	 (Q_INT_BITS)
#define Q_INT_FIXED_TYPE_Name			Q_INTX_Name	 (Q_INT_BITS)
#define Q_INT_FIXED_TYPE_name			Q_INTX_name	 (Q_INT_BITS)
#define Q_INT_NAME				UINT
#define Q_INT_Name				UInt
#define Q_INT_name				uint

#define Q_LONG_BITS				Q_DATA_MODEL_BITS(LONG)

typedef signed long int				qlong;
typedef Q_JOIN_2(Q2DInt, Q_LONG_BITS)		Q2DLong;
typedef Q_JOIN_2(Q3DInt, Q_LONG_BITS)		Q3DLong;
typedef Q_JOIN_2(Q4DInt, Q_LONG_BITS)		Q4DLong;
#define Q_LONG					Q_SUFFIX_L
#define Q_LONG_SUFFIX				L
#define Q_LONG_BASE_TYPE			Q_VALUE_TYPE_LONG
#define Q_LONG_FIXED_TYPE			Q_INTX_TYPE	 (Q_LONG_BITS)
#define Q_LONG_TYPE				Q_VALUE_TYPE_LONG
#define Q_LONG_FORMAT				Q_INTX_FORMAT	 (Q_LONG_BITS)
#define Q_LONG_ENDIANNESS			Q_INTX_ENDIANNESS(Q_LONG_BITS)
#define Q_LONG_SIZE				Q_INTX_SIZE	 (Q_LONG_BITS)
#define Q_LONG_MINIMUM				Q_INTX_MINIMUM	 (Q_LONG_BITS)
#define Q_LONG_MAXIMUM				Q_INTX_MAXIMUM	 (Q_LONG_BITS)
#define Q_LONG_FIXED_TYPE_NAME			Q_INTX_NAME	 (Q_LONG_BITS)
#define Q_LONG_FIXED_TYPE_Name			Q_INTX_Name	 (Q_LONG_BITS)
#define Q_LONG_FIXED_TYPE_name			Q_INTX_name	 (Q_LONG_BITS)
#define Q_LONG_NAME				ULONG
#define Q_LONG_Name				ULong
#define Q_LONG_name				ulong

#define Q_LLONG_BITS				Q_DATA_MODEL_BITS(LLONG)

typedef signed long long int			qllong;
typedef Q_JOIN_2(Q2DInt, Q_LLONG_BITS)		Q2DLLong;
typedef Q_JOIN_2(Q3DInt, Q_LLONG_BITS)		Q3DLLong;
typedef Q_JOIN_2(Q4DInt, Q_LLONG_BITS)		Q4DLLong;
#define Q_LLONG					Q_SUFFIX_LL
#define Q_LLONG_SUFFIX				LL
#define Q_LLONG_BASE_TYPE			Q_VALUE_TYPE_LLONG
#define Q_LLONG_FIXED_TYPE			Q_INTX_TYPE	 (Q_LLONG_BITS)
#define Q_LLONG_TYPE				Q_VALUE_TYPE_LLONG
#define Q_LLONG_FORMAT				Q_INTX_FORMAT	 (Q_LLONG_BITS)
#define Q_LLONG_ENDIANNESS			Q_INTX_ENDIANNESS(Q_LLONG_BITS)
#define Q_LLONG_SIZE				Q_INTX_SIZE	 (Q_LLONG_BITS)
#define Q_LLONG_MINIMUM				Q_INTX_MINIMUM	 (Q_LLONG_BITS)
#define Q_LLONG_MAXIMUM				Q_INTX_MAXIMUM	 (Q_LLONG_BITS)
#define Q_LLONG_FIXED_TYPE_NAME			Q_INTX_NAME	 (Q_LLONG_BITS)
#define Q_LLONG_FIXED_TYPE_Name			Q_INTX_Name	 (Q_LLONG_BITS)
#define Q_LLONG_FIXED_TYPE_name			Q_INTX_name	 (Q_LLONG_BITS)
#define Q_LLONG_NAME				ULLONG
#define Q_LLONG_Name				ULLong
#define Q_LLONG_name				ullong

/* MARK: - Base real types */

typedef float					qfloat;
typedef struct {qfloat x, y;}			Q2DFloat;
typedef struct {qfloat x, y, z;}		Q3DFloat;
typedef struct {qfloat x, y, z, w;}		Q4DFloat;
#define Q_FLOAT					Q_SUFFIX_F
#define Q_FLOAT_SUFFIX				F
#define Q_FLOAT_BASE_TYPE			Q_VALUE_TYPE_FLOAT
#define Q_FLOAT_FIXED_TYPE			Q_VALUE_TYPE_FLOAT
#define Q_FLOAT_TYPE				Q_VALUE_TYPE_FLOAT
#define Q_FLOAT_FORMAT				Q_FLOATING_POINT_FORMAT		    (FLOAT)
#define Q_FLOAT_BITS				Q_FLOATING_POINT_BITS		    (FLOAT)
#define Q_FLOAT_SIZE				(Q_FLOAT_BITS / 8)
#define Q_FLOAT_BIAS				Q_FLOATING_POINT_BIAS		    (FLOAT)
#define Q_FLOAT_EPSILON				Q_FLOAT(Q_FLOATING_POINT_EPSILON    (FLOAT))
#define Q_FLOAT_MINIMUM				Q_FLOAT(Q_FLOATING_POINT_MINIMUM    (FLOAT))
#define Q_FLOAT_MAXIMUM				Q_FLOAT(Q_FLOATING_POINT_MAXIMUM    (FLOAT))
#define Q_FLOAT_DECIMAL_DIGITS			Q_FLOATING_POINT_DECIMAL_DIGITS     (FLOAT)
#define Q_FLOAT_MANTISSA_OFFSET			Q_FLOATING_POINT_MANTISSA_OFFSET    (FLOAT)
#define Q_FLOAT_MANTISSA_BITS			Q_FLOATING_POINT_MANTISSA_BITS	    (FLOAT)
#define Q_FLOAT_MANTISSA_DIGITS			Q_FLOATING_POINT_MANTISSA_DIGITS    (FLOAT)
#define Q_FLOAT_EXPONENT_OFFSET			Q_FLOATING_POINT_EXPONENT_OFFSET    (FLOAT)
#define Q_FLOAT_EXPONENT_BITS			Q_FLOATING_POINT_EXPONENT_BITS	    (FLOAT)
#define Q_FLOAT_EXPONENT_RADIX			Q_FLOATING_POINT_EXPONENT_RADIX     (FLOAT)
#define Q_FLOAT_EXPONENT_MINIMUM		Q_FLOATING_POINT_EXPONENT_MINIMUM   (FLOAT)
#define Q_FLOAT_EXPONENT_MAXIMUM		Q_FLOATING_POINT_EXPONENT_MAXIMUM   (FLOAT)
#define Q_FLOAT_EXPONENT_10_MINIMUM		Q_FLOATING_POINT_EXPONENT_10_MINIMUM(FLOAT)
#define Q_FLOAT_EXPONENT_10_MAXIMUM		Q_FLOATING_POINT_EXPONENT_10_MAXIMUM(FLOAT)
#define Q_FLOAT_SIGN_OFFSET			Q_FLOATING_POINT_SIGN_OFFSET	    (FLOAT)
#define Q_FLOAT_SIGN_BITS			Q_FLOATING_POINT_SIGN_BITS	    (FLOAT)
#define Q_FLOAT_INFINITY			Q_FLOATING_POINT_INFINITY	    (FLOAT, Q_FLOAT)
#define Q_FLOAT_NAN				Q_FLOATING_POINT_NAN		    (FLOAT, Q_FLOAT)
#define Q_FLOAT_NAME				FLOAT
#define Q_FLOAT_Name				Float
#define Q_FLOAT_name				float

typedef double					qdouble;
typedef struct {qdouble x, y;}			Q2DDouble;
typedef struct {qdouble x, y, z;}		Q3DDouble;
typedef struct {qdouble x, y, z, w;}		Q4DDouble;
#define Q_DOUBLE				Q_SAME
#define Q_DOUBLE_SUFFIX
#define Q_DOUBLE_BASE_TYPE			Q_VALUE_TYPE_DOUBLE
#define Q_DOUBLE_FIXED_TYPE			Q_VALUE_TYPE_DOUBLE
#define Q_DOUBLE_TYPE				Q_VALUE_TYPE_DOUBLE
#define Q_DOUBLE_FORMAT				Q_FLOATING_POINT_FORMAT		    (DOUBLE)
#define Q_DOUBLE_BITS				Q_FLOATING_POINT_BITS		    (DOUBLE)
#define Q_DOUBLE_SIZE				(Q_DOUBLE_BITS / 8)
#define Q_DOUBLE_BIAS				Q_FLOATING_POINT_BIAS		    (DOUBLE)
#define Q_DOUBLE_EPSILON			Q_FLOATING_POINT_EPSILON	    (DOUBLE)
#define Q_DOUBLE_MINIMUM			Q_FLOATING_POINT_MINIMUM	    (DOUBLE)
#define Q_DOUBLE_MAXIMUM			Q_FLOATING_POINT_MAXIMUM	    (DOUBLE)
#define Q_DOUBLE_DECIMAL_DIGITS			Q_FLOATING_POINT_DECIMAL_DIGITS     (DOUBLE)
#define Q_DOUBLE_MANTISSA_OFFSET		Q_FLOATING_POINT_MANTISSA_OFFSET    (DOUBLE)
#define Q_DOUBLE_MANTISSA_BITS			Q_FLOATING_POINT_MANTISSA_BITS	    (DOUBLE)
#define Q_DOUBLE_MANTISSA_DIGITS		Q_FLOATING_POINT_MANTISSA_DIGITS    (DOUBLE)
#define Q_DOUBLE_EXPONENT_OFFSET		Q_FLOATING_POINT_EXPONENT_OFFSET    (DOUBLE)
#define Q_DOUBLE_EXPONENT_BITS			Q_FLOATING_POINT_EXPONENT_BITS	    (DOUBLE)
#define Q_DOUBLE_EXPONENT_RADIX			Q_FLOATING_POINT_EXPONENT_RADIX     (DOUBLE)
#define Q_DOUBLE_EXPONENT_MINIMUM		Q_FLOATING_POINT_EXPONENT_MINIMUM   (DOUBLE)
#define Q_DOUBLE_EXPONENT_MAXIMUM		Q_FLOATING_POINT_EXPONENT_MAXIMUM   (DOUBLE)
#define Q_DOUBLE_EXPONENT_10_MINIMUM		Q_FLOATING_POINT_EXPONENT_10_MINIMUM(DOUBLE)
#define Q_DOUBLE_EXPONENT_10_MAXIMUM		Q_FLOATING_POINT_EXPONENT_10_MAXIMUM(DOUBLE)
#define Q_DOUBLE_SIGN_OFFSET			Q_FLOATING_POINT_SIGN_OFFSET	    (DOUBLE)
#define Q_DOUBLE_SIGN_BITS			Q_FLOATING_POINT_SIGN_BITS	    (DOUBLE)
#define Q_DOUBLE_INFINITY			Q_FLOATING_POINT_INFINITY	    (DOUBLE, Q_DOUBLE)
#define Q_DOUBLE_NAN				Q_FLOATING_POINT_NAN		    (DOUBLE, Q_DOUBLE)
#define Q_DOUBLE_NAME				DOUBLE
#define Q_DOUBLE_Name				Double
#define Q_DOUBLE_name				double

#define Q_LDOUBLE_NAME				LDOUBLE
#define Q_LDOUBLE_Name				LDouble
#define Q_LDOUBLE_name				ldouble

#if Q_C_HAS(LDOUBLE) && Q_FLOATING_POINT_BITS(LDOUBLE) != Q_DOUBLE_BITS

	typedef long double			qldouble;
	typedef struct {qldouble x, y;}		Q2DLDouble;
	typedef struct {qldouble x, y, z;}	Q3DLDouble;
	typedef struct {qldouble x, y, z, w;}	Q4DLDouble;
#	define Q_LDOUBLE			Q_SUFFIX_L
#	define Q_LDOUBLE_SUFFIX			L
#	define Q_LDOUBLE_BASE_TYPE		Q_VALUE_TYPE_LDOUBLE
#	define Q_LDOUBLE_FIXED_TYPE		Q_VALUE_TYPE_LDOUBLE
#	define Q_LDOUBLE_TYPE			Q_VALUE_TYPE_LDOUBLE
#	define Q_LDOUBLE_FORMAT			Q_FLOATING_POINT_FORMAT		    (LDOUBLE)
#	define Q_LDOUBLE_BITS			Q_FLOATING_POINT_BITS		    (LDOUBLE)
#	define Q_LDOUBLE_SIZE			(Q_LDOUBLE_BITS / 8)
#	define Q_LDOUBLE_BIAS			Q_FLOATING_POINT_BIAS		    (LDOUBLE)
#	define Q_LDOUBLE_EPSILON		Q_LDOUBLE(Q_FLOATING_POINT_EPSILON  (LDOUBLE))
#	define Q_LDOUBLE_MINIMUM		Q_LDOUBLE(Q_FLOATING_POINT_MINIMUM  (LDOUBLE))
#	define Q_LDOUBLE_MAXIMUM		Q_LDOUBLE(Q_FLOATING_POINT_MAXIMUM  (LDOUBLE))
#	define Q_LDOUBLE_DECIMAL_DIGITS		Q_FLOATING_POINT_DECIMAL_DIGITS     (LDOUBLE)
#	define Q_LDOUBLE_MANTISSA_OFFSET	Q_FLOATING_POINT_MANTISSA_OFFSET    (LDOUBLE)
#	define Q_LDOUBLE_MANTISSA_BITS		Q_FLOATING_POINT_MANTISSA_BITS	    (LDOUBLE)
#	define Q_LDOUBLE_MANTISSA_DIGITS	Q_FLOATING_POINT_MANTISSA_DIGITS    (LDOUBLE)
#	define Q_LDOUBLE_EXPONENT_OFFSET	Q_FLOATING_POINT_EXPONENT_OFFSET    (LDOUBLE)
#	define Q_LDOUBLE_EXPONENT_BITS		Q_FLOATING_POINT_EXPONENT_BITS	    (LDOUBLE)
#	define Q_LDOUBLE_EXPONENT_RADIX		Q_FLOATING_POINT_EXPONENT_RADIX     (LDOUBLE)
#	define Q_LDOUBLE_EXPONENT_MINIMUM	Q_FLOATING_POINT_EXPONENT_MINIMUM   (LDOUBLE)
#	define Q_LDOUBLE_EXPONENT_MAXIMUM	Q_FLOATING_POINT_EXPONENT_MAXIMUM   (LDOUBLE)
#	define Q_LDOUBLE_EXPONENT_10_MINIMUM	Q_FLOATING_POINT_EXPONENT_10_MINIMUM(LDOUBLE)
#	define Q_LDOUBLE_EXPONENT_10_MAXIMUM	Q_FLOATING_POINT_EXPONENT_10_MAXIMUM(LDOUBLE)
#	define Q_LDOUBLE_SIGN_OFFSET		Q_FLOATING_POINT_SIGN_OFFSET	    (LDOUBLE)
#	define Q_LDOUBLE_SIGN_BITS		Q_FLOATING_POINT_SIGN_BITS	    (LDOUBLE)
#	define Q_LDOUBLE_INFINITY		Q_FLOATING_POINT_INFINITY	    (LDOUBLE, Q_LDOUBLE)
#	define Q_LDOUBLE_NAN			Q_FLOATING_POINT_NAN		    (LDOUBLE, Q_LDOUBLE)
#	define Q_LDOUBLE_FIXED_TYPE_NAME	LDOUBLE
#	define Q_LDOUBLE_FIXED_TYPE_Name	LDouble
#	define Q_LDOUBLE_FIXED_TYPE_name	ldouble

#else

	typedef qdouble				qldouble;
	typedef Q2DDouble			Q2DLDouble;
	typedef Q3DDouble			Q3DLDouble;
	typedef Q4DDouble			Q4DLDouble;
#	define Q_LDOUBLE			Q_DOUBLE
#	define Q_LDOUBLE_SUFFIX			Q_DOUBLE_SUFFIX
#	define Q_LDOUBLE_BASE_TYPE		Q_DOUBLE_BASE_TYPE
#	define Q_LDOUBLE_FIXED_TYPE		Q_DOUBLE_FIXED_TYPE
#	define Q_LDOUBLE_TYPE			Q_DOUBLE_TYPE
#	define Q_LDOUBLE_FORMAT			Q_DOUBLE_FORMAT
#	define Q_LDOUBLE_BITS			Q_DOUBLE_BITS
#	define Q_LDOUBLE_SIZE			Q_DOUBLE_SIZE
#	define Q_LDOUBLE_BIAS			Q_DOUBLE_BIAS
#	define Q_LDOUBLE_MINIMUM		Q_DOUBLE_MINIMUM
#	define Q_LDOUBLE_MAXIMUM		Q_DOUBLE_MAXIMUM
#	define Q_LDOUBLE_EPSILON		Q_DOUBLE_EPSILON
#	define Q_LDOUBLE_DECIMAL_DIGITS		Q_DOUBLE_DECIMAL_DIGITS
#	define Q_LDOUBLE_MANTISSA_OFFSET	Q_DOUBLE_MANTISSA_OFFSET
#	define Q_LDOUBLE_MANTISSA_BITS		Q_DOUBLE_MANTISSA_BITS
#	define Q_LDOUBLE_MANTISSA_DIGITS	Q_DOUBLE_MANTISSA_DIGITS
#	define Q_LDOUBLE_EXPONENT_OFFSET	Q_DOUBLE_EXPONENT_OFFSET
#	define Q_LDOUBLE_EXPONENT_BITS		Q_DOUBLE_EXPONENT_BITS
#	define Q_LDOUBLE_EXPONENT_RADIX		Q_DOUBLE_EXPONENT_RADIX
#	define Q_LDOUBLE_EXPONENT_MINIMUM	Q_DOUBLE_EXPONENT_MINIMUM
#	define Q_LDOUBLE_EXPONENT_MAXIMUM	Q_DOUBLE_EXPONENT_MAXIMUM
#	define Q_LDOUBLE_EXPONENT_10_MINIMUM	Q_DOUBLE_EXPONENT_10_MINIMUM
#	define Q_LDOUBLE_EXPONENT_10_MAXIMUM	Q_DOUBLE_EXPONENT_10_MAXIMUM
#	define Q_LDOUBLE_SIGN_OFFSET		Q_DOUBLE_SIGN_OFFSET
#	define Q_LDOUBLE_SIGN_BITS		Q_DOUBLE_SIGN_BITS
#	define Q_LDOUBLE_INFINITY		Q_DOUBLE_INFINITY
#	define Q_LDOUBLE_NAN			Q_DOUBLE_NAN
#	define Q_LDOUBLE_FIXED_TYPE_NAME	Q_DOUBLE_NAME
#	define Q_LDOUBLE_FIXED_TYPE_Name	Q_DOUBLE_Name
#	define Q_LDOUBLE_FIXED_TYPE_name	Q_DOUBLE_name

#endif

/* MARK: - Object size types */

#define Q_SIZE_BITS				Q_DATA_MODEL_BITS(SIZE)

typedef Q_JOIN_2(quint,   Q_SIZE_BITS)		qsize;
typedef Q_JOIN_2(Q2DUInt, Q_SIZE_BITS)		Q2DSize;
typedef Q_JOIN_2(Q3DUInt, Q_SIZE_BITS)		Q3DSize;
typedef Q_JOIN_2(Q4DUInt, Q_SIZE_BITS)		Q4DSize;
#define Q_SIZE					Q_UINTX_LITERAL   (Q_SIZE_BITS)
#define Q_SIZE_SUFFIX				Q_UINTX_SUFFIX	  (Q_SIZE_BITS)
#define Q_SIZE_BASE_TYPE			Q_UINTX_BASE_TYPE (Q_SIZE_BITS)
#define Q_SIZE_FIXED_TYPE			Q_UINTX_TYPE	  (Q_SIZE_BITS)
#define Q_SIZE_TYPE				Q_VALUE_TYPE_SIZE
#define Q_SIZE_FORMAT				Q_UINTX_FORMAT	  (Q_SIZE_BITS)
#define Q_SIZE_ENDIANNESS			Q_UINTX_ENDIANNESS(Q_SIZE_BITS)
#define Q_SIZE_SIZE				Q_UINTX_SIZE	  (Q_SIZE_BITS)
#define Q_SIZE_MINIMUM				0
#define Q_SIZE_MAXIMUM				Q_UINTX_MAXIMUM   (Q_SIZE_BITS)
#define Q_SIZE_FIXED_TYPE_NAME			Q_UINTX_NAME	  (Q_SIZE_BITS)
#define Q_SIZE_FIXED_TYPE_Name			Q_UINTX_Name	  (Q_SIZE_BITS)
#define Q_SIZE_FIXED_TYPE_name			Q_UINTX_name	  (Q_SIZE_BITS)
#define Q_SIZE_NAME				SIZE
#define Q_SIZE_Name				Size
#define Q_SIZE_name				size

#define Q_SSIZE_BITS				Q_SIZE_BITS

typedef Q_JOIN_2(qint,	 Q_SSIZE_BITS)		qssize;
typedef Q_JOIN_2(Q2DInt, Q_SSIZE_BITS)		Q2DSSize;
typedef Q_JOIN_2(Q3DInt, Q_SSIZE_BITS)		Q3DSSize;
typedef Q_JOIN_2(Q4DInt, Q_SSIZE_BITS)		Q4DSSize;
#define Q_SSIZE					Q_INTX_LITERAL	 (Q_SSIZE_BITS)
#define Q_SSIZE_SUFFIX				Q_INTX_SUFFIX	 (Q_SSIZE_BITS)
#define Q_SSIZE_BASE_TYPE			Q_INTX_BASE_TYPE (Q_SSIZE_BITS)
#define Q_SSIZE_FIXED_TYPE			Q_INTX_TYPE	 (Q_SSIZE_BITS)
#define Q_SSIZE_TYPE				Q_VALUE_TYPE_SSIZE
#define Q_SSIZE_FORMAT				Q_INTX_FORMAT	 (Q_SSIZE_BITS)
#define Q_SSIZE_ENDIANNESS			Q_INTX_ENDIANNESS(Q_SSIZE_BITS)
#define Q_SSIZE_SIZE				Q_INTX_SIZE	 (Q_SSIZE_BITS)
#define Q_SSIZE_MINIMUM				Q_INTX_MINIMUM	 (Q_SSIZE_BITS)
#define Q_SSIZE_MAXIMUM				Q_INTX_MAXIMUM	 (Q_SSIZE_BITS)
#define Q_SSIZE_FIXED_TYPE_NAME			Q_INTX_NAME	 (Q_SSIZE_BITS)
#define Q_SSIZE_FIXED_TYPE_Name			Q_INTX_Name	 (Q_SSIZE_BITS)
#define Q_SSIZE_FIXED_TYPE_name			Q_INTX_name	 (Q_SSIZE_BITS)
#define Q_SSIZE_NAME				USSIZE
#define Q_SSIZE_Name				USSize
#define Q_SSIZE_name				ussize

/* MARK: - Pointer types */

#define Q_POINTER_BITS				Q_DATA_MODEL_BITS(POINTER)
#define Q_POINTER_FIXED_TYPE			Q_UINTX_TYPE  (Q_POINTER_BITS)
#define Q_POINTER_BASE_TYPE			Q_VALUE_TYPE_POINTER
#define Q_POINTER_FORMAT			Q_UINTX_FORMAT(Q_UINTPTR_BITS)
#define Q_POINTER_SIZE				Q_UINTX_SIZE  (Q_UINTPTR_BITS)

#define Q_UINTPTR_BITS				Q_POINTER_BITS

typedef Q_JOIN_2(quint,   Q_UINTPTR_BITS)	quintptr;
typedef Q_JOIN_2(Q2DUInt, Q_UINTPTR_BITS)	Q2DUIntPtr;
typedef Q_JOIN_2(Q3DUInt, Q_UINTPTR_BITS)	Q3DUIntPtr;
typedef Q_JOIN_2(Q4DUInt, Q_UINTPTR_BITS)	Q4DUIntPtr;
#define Q_UINTPTR				Q_UINTX_LITERAL   (Q_UINTPTR_BITS)
#define Q_UINTPTR_SUFFIX			Q_UINTX_SUFFIX	  (Q_UINTPTR_BITS)
#define Q_UINTPTR_BASE_TYPE			Q_UINTX_BASE_TYPE (Q_UINTPTR_BITS)
#define Q_UINTPTR_FIXED_TYPE			Q_UINTX_TYPE	  (Q_UINTPTR_BITS)
#define Q_UINTPTR_TYPE				Q_VALUE_TYPE_UINTPTR
#define Q_UINTPTR_FORMAT			Q_UINTX_FORMAT	  (Q_UINTPTR_BITS)
#define Q_UINTPTR_ENDIANNESS			Q_UINTX_ENDIANNESS(Q_UINTPTR_BITS)
#define Q_UINTPTR_SIZE				Q_UINTX_SIZE	  (Q_UINTPTR_BITS)
#define Q_UINTPTR_MINIMUM			0
#define Q_UINTPTR_MAXIMUM			Q_UINTX_MAXIMUM   (Q_UINTPTR_BITS)
#define Q_UINTPTR_FIXED_TYPE_NAME		Q_UINTX_NAME	  (Q_UINTPTR_BITS)
#define Q_UINTPTR_FIXED_TYPE_Name		Q_UINTX_Name	  (Q_UINTPTR_BITS)
#define Q_UINTPTR_FIXED_TYPE_name		Q_UINTX_name	  (Q_UINTPTR_BITS)
#define Q_UINTPTR_NAME				UINTPTR
#define Q_UINTPTR_Name				UIntPtr
#define Q_UINTPTR_name				uintptr

#define Q_INTPTR_BITS				Q_POINTER_BITS

typedef Q_JOIN_2(qint,	 Q_INTPTR_BITS)		qintptr;
typedef Q_JOIN_2(Q2DInt, Q_INTPTR_BITS)		Q2DIntPtr;
typedef Q_JOIN_2(Q3DInt, Q_INTPTR_BITS)		Q3DIntPtr;
typedef Q_JOIN_2(Q4DInt, Q_INTPTR_BITS)		Q4DIntPtr;
#define Q_INTPTR				Q_INTX_LITERAL	 (Q_INTPTR_BITS)
#define Q_INTPTR_SUFFIX				Q_INTX_SUFFIX	 (Q_INTPTR_BITS)
#define Q_INTPTR_BASE_TYPE			Q_INTX_BASE_TYPE (Q_INTPTR_BITS)
#define Q_INTPTR_FIXED_TYPE			Q_INTX_TYPE	 (Q_INTPTR_BITS)
#define Q_INTPTR_TYPE				Q_VALUE_TYPE_INTPTR
#define Q_INTPTR_FORMAT				Q_INTX_FORMAT	 (Q_INTPTR_BITS)
#define Q_INTPTR_ENDIANNESS			Q_INTX_ENDIANNESS(Q_INTPTR_BITS)
#define Q_INTPTR_SIZE				Q_INTX_SIZE	 (Q_INTPTR_BITS)
#define Q_INTPTR_MINIMUM			Q_INTX_MINIMUM	 (Q_INTPTR_BITS)
#define Q_INTPTR_MAXIMUM			Q_INTX_MAXIMUM	 (Q_INTPTR_BITS)
#define Q_INTPTR_FIXED_TYPE_NAME		Q_INTX_NAME	 (Q_INTPTR_BITS)
#define Q_INTPTR_FIXED_TYPE_Name		Q_INTX_Name	 (Q_INTPTR_BITS)
#define Q_INTPTR_FIXED_TYPE_name		Q_INTX_name	 (Q_INTPTR_BITS)
#define Q_INTPTR_NAME				UINTPTR
#define Q_INTPTR_Name				UIntPtr
#define Q_INTPTR_name				uintptr

/* MARK: - CPU top natural and integer types */

#if Q_CPU(MAXIMUM_COPY_BITS) == 128 && Q_IS_AVAILABLE(UINT128)
#	define Q_UINTTOP_BITS			128
#elif Q_CPU(MAXIMUM_COPY_BITS) >= 64
#	define Q_UINTTOP_BITS			64
#elif Q_CPU(MAXIMUM_COPY_BITS) == 32
#	define Q_UINTTOP_BITS			32
#else
#	define Q_UINTTOP_BITS			16
#endif

typedef Q_JOIN_2(quint,   Q_UINTTOP_BITS)	quinttop;
typedef Q_JOIN_2(Q2DUInt, Q_UINTTOP_BITS)	Q2DUIntTop;
typedef Q_JOIN_2(Q3DUInt, Q_UINTTOP_BITS)	Q3DUIntTop;
typedef Q_JOIN_2(Q4DUInt, Q_UINTTOP_BITS)	Q4DUIntTop;
#define Q_UINTTOP				Q_UINTX_LITERAL   (Q_UINTTOP_BITS)
#define Q_UINTTOP_SUFFIX			Q_UINTX_SUFFIX	  (Q_UINTTOP_BITS)
#define Q_UINTTOP_BASE_TYPE			Q_UINTX_BASE_TYPE (Q_UINTTOP_BITS)
#define Q_UINTTOP_FIXED_TYPE			Q_UINTX_TYPE	  (Q_UINTTOP_BITS)
#define Q_UINTTOP_TYPE				Q_VALUE_TYPE_UINTTOP
#define Q_UINTTOP_FORMAT			Q_UINTX_FORMAT	  (Q_UINTTOP_BITS)
#define Q_UINTTOP_ENDIANNESS			Q_UINTX_ENDIANNESS(Q_UINTTOP_BITS)
#define Q_UINTTOP_SIZE				Q_UINTX_SIZE	  (Q_UINTTOP_BITS)
#define Q_UINTTOP_MINIMUM			0
#define Q_UINTTOP_MAXIMUM			Q_UINTX_MAXIMUM   (Q_UINTTOP_BITS)
#define Q_UINTTOP_FIXED_TYPE_NAME		Q_UINTX_NAME	  (Q_UINTTOP_BITS)
#define Q_UINTTOP_FIXED_TYPE_Name		Q_UINTX_Name	  (Q_UINTTOP_BITS)
#define Q_UINTTOP_FIXED_TYPE_name		Q_UINTX_name	  (Q_UINTTOP_BITS)
#define Q_UINTTOP_NAME				UINTTOP
#define Q_UINTTOP_Name				UIntTop
#define Q_UINTTOP_name				uinttop

#if Q_CPU(MAXIMUM_COPY_BITS) == 128 && Q_IS_AVAILABLE(INT128)
#	define Q_INTTOP_BITS			128
#elif Q_CPU(MAXIMUM_COPY_BITS) >= 64
#	define Q_INTTOP_BITS			64
#elif Q_CPU(MAXIMUM_COPY_BITS) == 32
#	define Q_INTTOP_BITS			32
#else
#	define Q_INTTOP_BITS			16
#endif

typedef Q_JOIN_2(qint,	 Q_INTTOP_BITS)		qinttop;
typedef Q_JOIN_2(Q2DInt, Q_INTTOP_BITS)		Q2DIntTop;
typedef Q_JOIN_2(Q3DInt, Q_INTTOP_BITS)		Q3DIntTop;
typedef Q_JOIN_2(Q4DInt, Q_INTTOP_BITS)		Q4DIntTop;
#define Q_INTTOP				Q_INTX_LITERAL	 (Q_INTTOP_BITS)
#define Q_INTTOP_SUFFIX				Q_INTX_SUFFIX	 (Q_INTTOP_BITS)
#define Q_INTTOP_BASE_TYPE			Q_INTX_BASE_TYPE (Q_INTTOP_BITS)
#define Q_INTTOP_FIXED_TYPE			Q_INTX_TYPE	 (Q_INTTOP_BITS)
#define Q_INTTOP_TYPE				Q_VALUE_TYPE_INTTOP
#define Q_INTTOP_FORMAT				Q_INTX_FORMAT	 (Q_INTTOP_BITS)
#define Q_INTTOP_ENDIANNESS			Q_INTX_ENDIANNESS(Q_INTTOP_BITS)
#define Q_INTTOP_SIZE				Q_INTX_SIZE	 (Q_INTTOP_BITS)
#define Q_INTTOP_MINIMUM			Q_INTX_MINIMUM	 (Q_INTTOP_BITS)
#define Q_INTTOP_MAXIMUM			Q_INTX_MAXIMUM	 (Q_INTTOP_BITS)
#define Q_INTTOP_FIXED_TYPE_NAME		Q_INTX_NAME	 (Q_INTTOP_BITS)
#define Q_INTTOP_FIXED_TYPE_Name		Q_INTX_Name	 (Q_INTTOP_BITS)
#define Q_INTTOP_FIXED_TYPE_name		Q_INTX_name	 (Q_INTTOP_BITS)
#define Q_INTTOP_NAME				UINTTOP
#define Q_INTTOP_Name				UIntTop
#define Q_INTTOP_name				uinttop

/* MARK: - Maximun natural and integer types */

#if Q_IS_AVAILABLE(UINT128)
#	define Q_UINTMAX_BITS			128
#else
#	define Q_UINTMAX_BITS			64
#endif

typedef Q_JOIN_2(quint,   Q_UINTMAX_BITS)	quintmax;
typedef Q_JOIN_2(Q2DUInt, Q_UINTMAX_BITS)	Q2DUIntMax;
typedef Q_JOIN_2(Q3DUInt, Q_UINTMAX_BITS)	Q3DUIntMax;
typedef Q_JOIN_2(Q4DUInt, Q_UINTMAX_BITS)	Q4DUIntMax;
#define Q_UINTMAX				Q_UINTX_LITERAL   (Q_UINTMAX_BITS)
#define Q_UINTMAX_SUFFIX			Q_UINTX_SUFFIX	  (Q_UINTMAX_BITS)
#define Q_UINTMAX_BASE_TYPE			Q_UINTX_BASE_TYPE (Q_UINTMAX_BITS)
#define Q_UINTMAX_FIXED_TYPE			Q_UINTX_TYPE	  (Q_UINTMAX_BITS)
#define Q_UINTMAX_TYPE				Q_VALUE_TYPE_UINTMAX
#define Q_UINTMAX_FORMAT			Q_UINTX_FORMAT	  (Q_UINTMAX_BITS)
#define Q_UINTMAX_ENDIANNESS			Q_UINTX_ENDIANNESS(Q_UINTMAX_BITS)
#define Q_UINTMAX_SIZE				Q_UINTX_SIZE	  (Q_UINTMAX_BITS)
#define Q_UINTMAX_MINIMUM			0
#define Q_UINTMAX_MAXIMUM			Q_UINTX_MAXIMUM   (Q_UINTMAX_BITS)
#define Q_UINTMAX_FIXED_TYPE_NAME		Q_UINTX_NAME	  (Q_UINTMAX_BITS)
#define Q_UINTMAX_FIXED_TYPE_Name		Q_UINTX_Name	  (Q_UINTMAX_BITS)
#define Q_UINTMAX_FIXED_TYPE_name		Q_UINTX_name	  (Q_UINTMAX_BITS)
#define Q_UINTMAX_NAME				UINTMAX
#define Q_UINTMAX_Name				UIntMax
#define Q_UINTMAX_name				uintmax

#if Q_IS_AVAILABLE(INT128)
#	define Q_INTMAX_BITS			128
#else
#	define Q_INTMAX_BITS			64
#endif

typedef Q_JOIN_2(qint,	 Q_INTMAX_BITS)		qintmax;
typedef Q_JOIN_2(Q2DInt, Q_INTMAX_BITS)		Q2DIntMax;
typedef Q_JOIN_2(Q3DInt, Q_INTMAX_BITS)		Q3DIntMax;
typedef Q_JOIN_2(Q4DInt, Q_INTMAX_BITS)		Q4DIntMax;
#define Q_INTMAX				Q_INTX_LITERAL	 (Q_INTMAX_BITS)
#define Q_INTMAX_SUFFIX				Q_INTX_SUFFIX	 (Q_INTMAX_BITS)
#define Q_INTMAX_BASE_TYPE			Q_INTX_BASE_TYPE (Q_INTMAX_BITS)
#define Q_INTMAX_FIXED_TYPE			Q_INTX_TYPE	 (Q_INTMAX_BITS)
#define Q_INTMAX_TYPE				Q_VALUE_TYPE_INTMAX
#define Q_INTMAX_FORMAT				Q_INTX_FORMAT	 (Q_INTMAX_BITS)
#define Q_INTMAX_ENDIANNESS			Q_INTX_ENDIANNESS(Q_INTMAX_BITS)
#define Q_INTMAX_SIZE				Q_INTX_SIZE	 (Q_INTMAX_BITS)
#define Q_INTMAX_MINIMUM			Q_INTX_MINIMUM	 (Q_INTMAX_BITS)
#define Q_INTMAX_MAXIMUM			Q_INTX_MAXIMUM	 (Q_INTMAX_BITS)
#define Q_INTMAX_FIXED_TYPE_NAME		Q_INTX_NAME	 (Q_INTMAX_BITS)
#define Q_INTMAX_FIXED_TYPE_Name		Q_INTX_Name	 (Q_INTMAX_BITS)
#define Q_INTMAX_FIXED_TYPE_name		Q_INTX_name	 (Q_INTMAX_BITS)
#define Q_INTMAX_NAME				UINTMAX
#define Q_INTMAX_Name				UIntMax
#define Q_INTMAX_name				uintmax

/* MARK: - Boolean type */

typedef quint8					qboolean;
#define Q_BOOLEAN_BASE_TYPE			Q_UINT8_BASE_TYPE
#define Q_BOOLEAN_FIXED_TYPE			Q_UINT8_FIXED_TYPE
#define Q_BOOLEAN_TYPE				Q_VALUE_TYPE_BOOLEAN
#define Q_BOOLEAN_FORMAT			Q_UINT8_FORMAT
#define Q_BOOLEAN_BITS				Q_UINT8_BITS
#define Q_BOOLEAN_SIZE				Q_UINT8_SIZE
#define Q_BOOLEAN_FIXED_TYPE_NAME		Q_UINT8_NAME
#define Q_BOOLEAN_FIXED_TYPE_Name		Q_UINT8_Name
#define Q_BOOLEAN_FIXED_TYPE_name		Q_UINT8_name
#define Q_BOOLEAN_NAME				BOOLEAN
#define Q_BOOLEAN_Name				Boolean
#define Q_BOOLEAN_name				boolean

/* MARK: - Default types */

#if defined(Q_USE_NATURAL_UINT16)
#	define Q_NATURAL_BITS			16
#elif defined(Q_USE_NATURAL_UINT32)
#	define Q_NATURAL_BITS			32
#elif defined(Q_USE_NATURAL_UINT64)
#	define Q_NATURAL_BITS			64
#else
#	define Q_NATURAL_BITS			Q_ULONG_BITS
#endif

typedef Q_JOIN_2(quint,   Q_NATURAL_BITS)	qnatural;
typedef Q_JOIN_2(Q2DUInt, Q_NATURAL_BITS)	Q2DNatural;
typedef Q_JOIN_2(Q3DUInt, Q_NATURAL_BITS)	Q3DNatural;
typedef Q_JOIN_2(Q4DUInt, Q_NATURAL_BITS)	Q4DNatural;
#define Q_NATURAL				Q_UINTX_LITERAL   (Q_NATURAL_BITS)
#define Q_NATURAL_SUFFIX			Q_UINTX_SUFFIX	  (Q_NATURAL_BITS)
#define Q_NATURAL_BASE_TYPE			Q_UINTX_BASE_TYPE (Q_NATURAL_BITS)
#define Q_NATURAL_FIXED_TYPE			Q_UINTX_TYPE	  (Q_NATURAL_BITS)
#define Q_NATURAL_TYPE				Q_VALUE_TYPE_NATURAL
#define Q_NATURAL_FORMAT			Q_UINTX_FORMAT	  (Q_NATURAL_BITS)
#define Q_NATURAL_ENDIANNESS			Q_UINTX_ENDIANNESS(Q_NATURAL_BITS)
#define Q_NATURAL_SIZE				Q_UINTX_SIZE	  (Q_NATURAL_BITS)
#define Q_NATURAL_MINIMUM			0
#define Q_NATURAL_MAXIMUM			Q_UINTX_MAXIMUM   (Q_NATURAL_BITS)
#define Q_NATURAL_FIXED_TYPE_NAME		Q_UINTX_NAME	  (Q_NATURAL_BITS)
#define Q_NATURAL_FIXED_TYPE_Name		Q_UINTX_Name	  (Q_NATURAL_BITS)
#define Q_NATURAL_FIXED_TYPE_name		Q_UINTX_name	  (Q_NATURAL_BITS)
#define Q_NATURAL_NAME				UNATURAL
#define Q_NATURAL_Name				UNatural
#define Q_NATURAL_name				unatural

#if defined(Q_USE_INTEGER_INT16)
#	define Q_INTEGER_BITS			16
#elif defined(Q_USE_INTEGER_INT32)
#	define Q_INTEGER_BITS			32
#elif defined(Q_USE_INTEGER_INT64)
#	define Q_INTEGER_BITS			64
#else
#	define Q_INTEGER_BITS			Q_LONG_BITS
#endif

typedef Q_JOIN_2(qint,	 Q_INTEGER_BITS)	qinteger;
typedef Q_JOIN_2(Q2DInt, Q_INTEGER_BITS)	Q2DInteger;
typedef Q_JOIN_2(Q3DInt, Q_INTEGER_BITS)	Q3DInteger;
typedef Q_JOIN_2(Q4DInt, Q_INTEGER_BITS)	Q4DInteger;
#define Q_INTEGER				Q_INTX_LITERAL	 (Q_INTEGER_BITS)
#define Q_INTEGER_SUFFIX			Q_INTX_SUFFIX	 (Q_INTEGER_BITS)
#define Q_INTEGER_BASE_TYPE			Q_INTX_BASE_TYPE (Q_INTEGER_BITS)
#define Q_INTEGER_FIXED_TYPE			Q_INTX_TYPE	 (Q_INTEGER_BITS)
#define Q_INTEGER_TYPE				Q_VALUE_TYPE_INTEGER
#define Q_INTEGER_FORMAT			Q_INTX_FORMAT	 (Q_INTEGER_BITS)
#define Q_INTEGER_ENDIANNESS			Q_INTX_ENDIANNESS(Q_INTEGER_BITS)
#define Q_INTEGER_SIZE				Q_INTX_SIZE	 (Q_INTEGER_BITS)
#define Q_INTEGER_MINIMUM			Q_INTX_MINIMUM	 (Q_INTEGER_BITS)
#define Q_INTEGER_MAXIMUM			Q_INTX_MAXIMUM	 (Q_INTEGER_BITS)
#define Q_INTEGER_FIXED_TYPE_NAME		Q_INTX_NAME	 (Q_INTEGER_BITS)
#define Q_INTEGER_FIXED_TYPE_Name		Q_INTX_Name	 (Q_INTEGER_BITS)
#define Q_INTEGER_FIXED_TYPE_name		Q_INTX_name	 (Q_INTEGER_BITS)
#define Q_INTEGER_NAME				UINTEGER
#define Q_INTEGER_Name				UInteger
#define Q_INTEGER_name				uinteger

#define Q_REAL_TYPE				Q_VALUE_TYPE_REAL
#define Q_REAL_NAME				REAL
#define Q_REAL_Name				Real
#define Q_REAL_name				real

#if defined(Q_USE_REAL_FLOAT)

	typedef qfloat				qreal;
	typedef Q2DFloat			Q2DReal;
	typedef Q3DFloat			Q3DReal;
	typedef Q4DFloat			Q4DReal;
#	define Q_REAL				Q_FLOAT
#	define Q_REAL_SUFFIX			Q_FLOAT_SUFFIX
#	define Q_REAL_BASE_TYPE			Q_FLOAT_BASE_TYPE
#	define Q_REAL_FIXED_TYPE		Q_FLOAT_FIXED_TYPE
#	define Q_REAL_FORMAT			Q_FLOAT_FORMAT
#	define Q_REAL_BITS			Q_FLOAT_BITS
#	define Q_REAL_SIZE			Q_FLOAT_SIZE
#	define Q_REAL_MINIMUM			Q_FLOAT_MINIMUM
#	define Q_REAL_MAXIMUM			Q_FLOAT_MAXIMUM
#	define Q_REAL_EPSILON			Q_FLOAT_EPSILON
#	define Q_REAL_DECIMAL_DIGITS		Q_FLOAT_DECIMAL_DIGITS
#	define Q_REAL_MANTISSA_DIGITS		Q_FLOAT_MANTISSA_DIGITS
#	define Q_REAL_EXPONENT_MAXIMUM		Q_FLOAT_EXPONENT_MAXIMUM
#	define Q_REAL_EXPONENT_MINIMUM		Q_FLOAT_EXPONENT_MINIMUM
#	define Q_REAL_EXPONENT_10_MAXIMUM	Q_FLOAT_EXPONENT_10_MAXIMUM
#	define Q_REAL_EXPONENT_10_MINIMUM	Q_FLOAT_EXPONENT_10_MINIMUM
#	define Q_REAL_FIXED_TYPE_NAME		Q_FLOAT_NAME
#	define Q_REAL_FIXED_TYPE_Name		Q_FLOAT_Name
#	define Q_REAL_FIXED_TYPE_name		Q_FLOAT_name

	typedef Q2DFloat			Q2D;
	typedef Q3DFloat			Q3D;
	typedef Q4DFloat			Q4D;

#elif defined(Q_USE_REAL_LDOUBLE)

	typedef qldouble			qreal;
	typedef Q2DLDouble			Q2DReal;
	typedef Q3DLDouble			Q3DReal;
	typedef Q4DLDouble			Q4DReal;
#	define Q_REAL				Q_LDOUBLE
#	define Q_REAL_SUFFIX			Q_LDOUBLE_SUFFIX
#	define Q_REAL_BASE_TYPE			Q_LDOUBLE_BASE_TYPE
#	define Q_REAL_FIXED_TYPE		Q_LDOUBLE_FIXED_TYPE
#	define Q_REAL_FORMAT			Q_LDOUBLE_FORMAT
#	define Q_REAL_BITS			Q_LDOUBLE_BITS
#	define Q_REAL_SIZE			Q_LDOUBLE_SIZE
#	define Q_REAL_MINIMUM			Q_LDOUBLE_MINIMUM
#	define Q_REAL_MAXIMUM			Q_LDOUBLE_MAXIMUM
#	define Q_REAL_EPSILON			Q_LDOUBLE_EPSILON
#	define Q_REAL_DECIMAL_DIGITS		Q_LDOUBLE_DECIMAL_DIGITS
#	define Q_REAL_MANTISSA_DIGITS		Q_LDOUBLE_MANTISSA_DIGITS
#	define Q_REAL_EXPONENT_MAXIMUM		Q_LDOUBLE_EXPONENT_MAXIMUM
#	define Q_REAL_EXPONENT_MINIMUM		Q_LDOUBLE_EXPONENT_MINIMUM
#	define Q_REAL_EXPONENT_10_MAXIMUM	Q_LDOUBLE_EXPONENT_10_MAXIMUM
#	define Q_REAL_EXPONENT_10_MINIMUM	Q_LDOUBLE_EXPONENT_10_MINIMUM
#	define Q_REAL_FIXED_TYPE_NAME		Q_LDOUBLE_FIXED_TYPE_NAME
#	define Q_REAL_FIXED_TYPE_Name		Q_LDOUBLE_FIXED_TYPE_Name
#	define Q_REAL_FIXED_TYPE_name		Q_LDOUBLE_FIXED_TYPE_name

	typedef Q2DLDouble			Q2D;
	typedef Q3DLDouble			Q3D;
	typedef Q4DLDouble			Q4D;

#else

	typedef qdouble				qreal;
	typedef Q2DDouble			Q2DReal;
	typedef Q3DDouble			Q3DReal;
	typedef Q4DDouble			Q4DReal;
#	define Q_REAL				Q_DOUBLE
#	define Q_REAL_SUFFIX			Q_DOUBLE_SUFFIX
#	define Q_REAL_BASE_TYPE			Q_DOUBLE_BASE_TYPE
#	define Q_REAL_FIXED_TYPE		Q_DOUBLE_FIXED_TYPE
#	define Q_REAL_FORMAT			Q_DOUBLE_FORMAT
#	define Q_REAL_BITS			Q_DOUBLE_BITS
#	define Q_REAL_SIZE			Q_DOUBLE_SIZE
#	define Q_REAL_MINIMUM			Q_DOUBLE_MINIMUM
#	define Q_REAL_MAXIMUM			Q_DOUBLE_MAXIMUM
#	define Q_REAL_EPSILON			Q_DOUBLE_EPSILON
#	define Q_REAL_DECIMAL_DIGITS		Q_DOUBLE_DECIMAL_DIGITS
#	define Q_REAL_MANTISSA_DIGITS		Q_DOUBLE_MANTISSA_DIGITS
#	define Q_REAL_EXPONENT_MAXIMUM		Q_DOUBLE_EXPONENT_MAXIMUM
#	define Q_REAL_EXPONENT_MINIMUM		Q_DOUBLE_EXPONENT_MINIMUM
#	define Q_REAL_EXPONENT_10_MAXIMUM	Q_DOUBLE_EXPONENT_10_MAXIMUM
#	define Q_REAL_EXPONENT_10_MINIMUM	Q_DOUBLE_EXPONENT_10_MINIMUM
#	define Q_REAL_FIXED_TYPE_NAME		Q_DOUBLE_NAME
#	define Q_REAL_FIXED_TYPE_Name		Q_DOUBLE_Name
#	define Q_REAL_FIXED_TYPE_name		Q_DOUBLE_name

	typedef Q2DDouble			Q2D;
	typedef Q3DDouble			Q3D;
	typedef Q4DDouble			Q4D;

#endif

/* MARK: - Standard C string character */

typedef char					QString;

/* MARK: - Status type */

typedef qint					QStatus;
#define Q_STATUS_TYPE				Q_INT_TYPE
#define Q_STATUS_FIXED_TYPE			Q_INT_FIXED_TYPE
#define Q_STATUS_BASE_TYPE			Q_INT_BASE_TYPE
#define Q_STATUS_FORMAT				Q_INT_FORMAT
#define Q_STATUS_ENDIANNESS			Q_INT_ENDIANNESS
#define Q_STATUS_BITS				Q_INT_BITS
#define Q_STATUS_SIZE				Q_INT_SIZE
#define Q_STATUS_FIXED_TYPE_NAME		Q_INT_FIXED_TYPE_NAME
#define Q_STATUS_FIXED_TYPE_Name		Q_INT_FIXED_TYPE_Name
#define Q_STATUS_FIXED_TYPE_name		Q_INT_FIXED_TYPE_name

/* MARK: - Order type */

typedef qint8					QOrder;
#define Q_ORDER_TYPE				Q_UINT8_TYPE
#define Q_ORDER_FIXED_TYPE			Q_UINT8_FIXED_TYPE
#define Q_ORDER_BASE_TYPE			Q_UINT8_BASE_TYPE
#define Q_ORDER_FORMAT				Q_UINT8_FORMAT
#define Q_ORDER_BITS				Q_UINT8_BITS
#define Q_ORDER_SIZE				Q_UINT8_SIZE
#define Q_ORDER_FIXED_TYPE_NAME			Q_UINT8_NAME
#define Q_ORDER_FIXED_TYPE_Name			Q_UINT8_Name
#define Q_ORDER_FIXED_TYPE_name			Q_UINT8_name

/* MARK: - Value component access types */

Q_DEFINE_STRICT_UNION (
	quint8 uint8_value;
	qint8  int8_value;
) Q8Bit;

#if Q_CPU_INTEGER_ENDIANNESS(16BIT) == Q_ENDIANNESS_BIG

	Q_DEFINE_STRICT_UNION (
		quint16 uint16_value;
		quint8	uint8_array[2];

		struct {quint8 index1;
			quint8 index0;
		} uint8_values;

		qint16 int16_value;
		qint8  int8_array[2];

		struct {qint8 index1;
			qint8 index0;
		} int8_values;
	) Q16Bit;

#elif Q_CPU_INTEGER_ENDIANNESS(16BIT) == Q_ENDIANNESS_LITTLE

	Q_DEFINE_STRICT_UNION (
		quint16 uint16_value;
		quint8	uint8_array[2];

		struct {quint8 index0;
			quint8 index1;
		} uint8_values;

		qint16 int16_value;
		qint8  int8_array[2];

		struct {qint8 index0;
			qint8 index1;
		} int8_values;
	) Q16Bit;

#endif

#if Q_CPU_INTEGER_ENDIANNESS(32BIT) == Q_ENDIANNESS_BIG

	Q_DEFINE_STRICT_UNION (
		quint32 uint32_value;
		quint16 uint16_array[2];
		quint8	uint8_array[4];

		struct {quint16 index1;
			quint16 index0;
		} uint16_values;

		struct {quint8 index3;
			quint8 index2;
			quint8 index1;
			quint8 index0;
		} uint8_values;

		qint32 int32_value;
		qint16 int16_array[2];
		qint8  int8_array[4];

		struct {qint16 index1;
			qint16 index0;
		} int16_values;

		struct {qint8 index3;
			qint8 index2;
			qint8 index1;
			qint8 index0;
		} int8_values;
	) Q32Bit;

#elif Q_CPU_INTEGER_ENDIANNESS(32BIT) == Q_ENDIANNESS_LITTLE

	Q_DEFINE_STRICT_UNION (
		quint32 uint32_value;
		quint16 uint16_array[2];
		quint8	uint8_array[4];

		struct {quint16 index0;
			quint16 index1;
		} uint16_values;

		struct {quint8 index0;
			quint8 index1;
			quint8 index2;
			quint8 index3;
		} uint8_values;

		qint32 int32_value;
		qint16 int16_array[2];
		qint8  int8_array[4];

		struct {qint16 index0;
			qint16 index1;
		} int16_values;

		struct {qint8 index0;
			qint8 index1;
			qint8 index2;
			qint8 index3;
		} int8_values;
	) Q32Bit;

#endif

#if Q_CPU_INTEGER_ENDIANNESS(64BIT) == Q_ENDIANNESS_BIG

	Q_DEFINE_STRICT_UNION (
		quint64 uint64_value;
		quint32 uint32_array[2];
		quint16 uint16_array[4];
		quint8	uint8_array[8];

		struct {quint32 index1;
			quint32 index0;
		} uint32_values;

		struct {quint16 index3;
			quint16 index2;
			quint16 index1;
			quint16 index0;
		} uint16_values;

		struct {quint8 index7;
			quint8 index6;
			quint8 index5;
			quint8 index4;
			quint8 index3;
			quint8 index2;
			quint8 index1;
			quint8 index0;
		} uint8_values;

		qint64 int64_value;
		qint32 int32_array[2];
		qint16 int16_array[4];
		qint8  int8_array[8];

		struct {qint32 index1;
			qint32 index0;
		} int32_values;

		struct {qint16 index3;
			qint16 index2;
			qint16 index1;
			qint16 index0;
		} int16_values;

		struct {qint8 index7;
			qint8 index6;
			qint8 index5;
			qint8 index4;
			qint8 index3;
			qint8 index2;
			qint8 index1;
			qint8 index0;
		} int8_values;
	) Q64Bit;

#elif Q_CPU_INTEGER_ENDIANNESS(64BIT) == Q_ENDIANNESS_LITTLE

	Q_DEFINE_STRICT_UNION (
		quint64 uint64_value;
		quint32 uint32_array[2];
		quint16 uint16_array[4];
		quint8	uint8_array[8];

		struct {quint32 index0;
			quint32 index1;
		} uint32_values;

		struct {quint16 index0;
			quint16 index1;
			quint16 index2;
			quint16 index3;
		} uint16_values;

		struct {quint8 index0;
			quint8 index1;
			quint8 index2;
			quint8 index3;
			quint8 index4;
			quint8 index5;
			quint8 index6;
			quint8 index7;
		} uint8_values;

		qint64 int64_value;
		qint32 int32_array[2];
		qint16 int16_array[4];
		qint8  int8_array[8];

		struct {qint32 index0;
			qint32 index1;
		} int32_values;

		struct {qint16 index0;
			qint16 index1;
			qint16 index2;
			qint16 index3;
		} int16_values;

		struct {qint8 index0;
			qint8 index1;
			qint8 index2;
			qint8 index3;
			qint8 index4;
			qint8 index5;
			qint8 index6;
			qint8 index7;
		} int8_values;
	) Q64Bit;

#endif

#if Q_IS_AVAILABLE(UINT128) && Q_IS_AVAILABLE(INT128)

#	if Q_CPU_INTEGER_ENDIANNESS(128BIT) == Q_ENDIANNESS_BIG

		Q_DEFINE_STRICT_UNION (
			quint128 uint128_value;
			quint64	 uint64_array[2];
			quint32	 uint32_array[4];
			quint16	 uint16_array[8];
			quint8	 uint8_array[16];

			struct {quint64 index1;
				quint64 index0;
			} uint64_values;

			struct {quint32 index3;
				quint32 index2;
				quint32 index1;
				quint32 index0;
			} uint32_values;

			struct {quint16 index7;
				quint16 index6;
				quint16 index5;
				quint16 index4;
				quint16 index3;
				quint16 index2;
				quint16 index1;
				quint16 index0;
			} uint16_values;

			struct {quint8 index15;
				quint8 index14;
				quint8 index13;
				quint8 index12;
				quint8 index11;
				quint8 index10;
				quint8 index09;
				quint8 index08;
				quint8 index07;
				quint8 index06;
				quint8 index05;
				quint8 index04;
				quint8 index03;
				quint8 index02;
				quint8 index01;
				quint8 index00;
			} uint8_values;

			qint128 int128_value;
			qint64	int64_array[2];
			qint32	int32_array[4];
			qint16	int16_array[8];
			qint8	int8_array[16];

			struct {qint64 index1;
				qint64 index0;
			} int64_values;

			struct {qint32 index3;
				qint32 index2;
				qint32 index1;
				qint32 index0;
			} int32_values;

			struct {qint16 index7;
				qint16 index6;
				qint16 index5;
				qint16 index4;
				qint16 index3;
				qint16 index2;
				qint16 index1;
				qint16 index0;
			} int16_values;

			struct {qint8 index15;
				qint8 index14;
				qint8 index13;
				qint8 index12;
				qint8 index11;
				qint8 index10;
				qint8 index09;
				qint8 index08;
				qint8 index07;
				qint8 index06;
				qint8 index05;
				qint8 index04;
				qint8 index03;
				qint8 index02;
				qint8 index01;
				qint8 index00;
			} int8_values;
		) Q128Bit;

#	elif Q_CPU_INTEGER_ENDIANNESS(128BIT) == Q_ENDIANNESS_LITTLE

		Q_DEFINE_STRICT_UNION (
			quint128 uint128_value;
			quint64	 uint64_array[2];
			quint32	 uint32_array[4];
			quint16	 uint16_array[8];
			quint8	 uint8_array[16];

			struct {quint64 index0;
				quint64 index1;
			} uint64_values;

			struct {quint32 index0;
				quint32 index1;
				quint32 index2;
				quint32 index3;
			} uint32_values;

			struct {quint16 index0;
				quint16 index1;
				quint16 index2;
				quint16 index3;
				quint16 index4;
				quint16 index5;
				quint16 index6;
				quint16 index7;
			} uint16_values;

			struct {quint8 index00;
				quint8 index01;
				quint8 index02;
				quint8 index03;
				quint8 index04;
				quint8 index05;
				quint8 index06;
				quint8 index07;
				quint8 index08;
				quint8 index09;
				quint8 index10;
				quint8 index11;
				quint8 index12;
				quint8 index13;
				quint8 index14;
				quint8 index15;
			} uint8_values;

			quint128 int128_value;
			qint64	 int64_array[2];
			qint32	 int32_array[4];
			qint16	 int16_array[8];
			qint8	 int8_array[16];

			struct {qint64 index0;
				qint64 index1;
			} int64_values;

			struct {qint32 index0;
				qint32 index1;
				qint32 index2;
				qint32 index3;
			} int32_values;

			struct {qint16 index0;
				qint16 index1;
				qint16 index2;
				qint16 index3;
				qint16 index4;
				qint16 index5;
				qint16 index6;
				qint16 index7;
			} int16_values;

			struct {qint8 index00;
				qint8 index01;
				qint8 index02;
				qint8 index03;
				qint8 index04;
				qint8 index05;
				qint8 index06;
				qint8 index07;
				qint8 index08;
				qint8 index09;
				qint8 index10;
				qint8 index11;
				qint8 index12;
				qint8 index13;
				qint8 index14;
				qint8 index15;
			} int8_values;
		) Q128Bit;

#	endif

#endif

/* MARK: - Range types */

typedef struct {qsize index, size;} QRange;

/* Pointer cast type for lvalue assignment */

Q_DEFINE_STRICT_UNION_BEGIN
	quint8*    uint8_pointer;
	Q2DUInt8*  uint8_2d_pointer;
	Q3DUInt8*  uint8_3d_pointer;
	Q4DUInt8*  uint8_4d_pointer;

	quint16*   uint16_pointer;
	Q2DUInt16* uint16_2d_pointer;
	Q3DUInt16* uint16_3d_pointer;
	Q4DUInt16* uint16_4d_pointer;

	quint32*   uint32_pointer;
	Q2DUInt32* uint32_2d_pointer;
	Q3DUInt32* uint32_3d_pointer;
	Q4DUInt32* uint32_4d_pointer;

	quint64*   uint64_pointer;
	Q2DUInt64* uint64_2d_pointer;
	Q3DUInt64* uint64_3d_pointer;
	Q4DUInt64* uint64_4d_pointer;

	qint8*	   int8_pointer;
	Q2DInt8*   int8_2d_pointer;
	Q3DInt8*   int8_3d_pointer;
	Q4DInt8*   int8_4d_pointer;

	qint16*    int16_pointer;
	Q2DInt16*  int16_2d_pointer;
	Q3DInt16*  int16_3d_pointer;
	Q4DInt16*  int16_4d_pointer;

	qint32*    int32_pointer;
	Q2DInt32*  int32_2d_pointer;
	Q3DInt32*  int32_3d_pointer;
	Q4DInt32*  int32_4d_pointer;

	qint64*    int64_pointer;
	Q2DInt64*  int64_2d_pointer;
	Q3DInt64*  int64_3d_pointer;
	Q4DInt64*  int64_4d_pointer;

#	if Q_IS_AVAILABLE(UINT128)
		quint128*   uint128_pointer;
		Q2DUInt128* uint128_2d_pointer;
		Q3DUInt128* uint128_3d_pointer;
		Q4DUInt128* uint128_4d_pointer;
#	endif

#	if Q_IS_AVAILABLE(INT128)
		qint128*    int128_pointer;
		Q2DInt128*  int128_2d_pointer;
		Q3DInt128*  int128_3d_pointer;
		Q4DInt128*  int128_4d_pointer;
#	endif

	quchar*     uchar_pointer;
	Q2DUChar*   uchar_2d_pointer;
	Q3DUChar*   uchar_3d_pointer;
	Q4DUChar*   uchar_4d_pointer;

	qshort*     ushort_pointer;
	Q2DUShort*  ushort_2d_pointer;
	Q3DUShort*  ushort_3d_pointer;
	Q4DUShort*  ushort_4d_pointer;

	quint*	    uint_pointer;
	Q2DUInt*    uint_2d_pointer;
	Q3DUInt*    uint_3d_pointer;
	Q4DUInt*    uint_4d_pointer;

	qulong*     ulong_pointer;
	Q2DULong*   ulong_2d_pointer;
	Q3DULong*   ulong_3d_pointer;
	Q4DULong*   ulong_4d_pointer;

	qullong*    ullong_pointer;
	Q2DULLong*  ullong_2d_pointer;
	Q3DULLong*  ullong_3d_pointer;
	Q4DULLong*  ullong_4d_pointer;

	qchar*	    char_pointer;
	Q2DChar*    char_2d_pointer;
	Q3DChar*    char_3d_pointer;
	Q4DChar*    char_4d_pointer;

	qshort*     short_pointer;
	Q2DShort*   short_2d_pointer;
	Q3DShort*   short_3d_pointer;
	Q4DShort*   short_4d_pointer;

	qint*	    int_pointer;
	Q2DInt*     int_2d_pointer;
	Q3DInt*     int_3d_pointer;
	Q4DInt*     int_4d_pointer;

	qlong*	    long_pointer;
	Q2DLong*    long_2d_pointer;
	Q3DLong*    long_3d_pointer;
	Q4DLong*    long_4d_pointer;

	qllong*     llong_pointer;
	Q2DLLong*   llong_2d_pointer;
	Q3DLLong*   llong_3d_pointer;
	Q4DLLong*   llong_4d_pointer;

	qfloat*     float_pointer;
	Q2DFloat*   float_2d_pointer;
	Q3DFloat*   float_3d_pointer;
	Q4DFloat*   float_4d_pointer;

	qdouble*    double_pointer;
	Q2DDouble*  double_2d_pointer;
	Q3DDouble*  double_3d_pointer;
	Q4DDouble*  double_4d_pointer;

	qldouble*   ldouble_pointer;
	Q2DLDouble* ldouble_2d_pointer;
	Q3DLDouble* ldouble_3d_pointer;
	Q4DLDouble* ldouble_4d_pointer;

	qsize*	    size_pointer;
	Q2DSize*    size_2d_pointer;
	Q3DSize*    size_3d_pointer;
	Q4DSize*    size_4d_pointer;

	qssize*     ssize_pointer;
	Q2DSSize*   ssize_2d_pointer;
	Q3DSSize*   ssize_3d_pointer;
	Q4DSSize*   ssize_4d_pointer;

	quintptr*   uintptr_pointer;
	Q2DUIntPtr* uintptr_2d_pointer;
	Q3DUIntPtr* uintptr_3d_pointer;
	Q4DUIntPtr* uintptr_4d_pointer;

	quinttop*   uinttop_pointer;
	Q2DUIntTop* uinttop_2d_pointer;
	Q3DUIntTop* uinttop_3d_pointer;
	Q4DUIntTop* uinttop_4d_pointer;

	quintmax*   uintmax_pointer;
	Q2DUIntMax* uintmax_2d_pointer;
	Q3DUIntMax* uintmax_3d_pointer;
	Q4DUIntMax* uintmax_4d_pointer;

	qintptr*    intptr_pointer;
	Q2DIntPtr*  intptr_2d_pointer;
	Q3DIntPtr*  intptr_3d_pointer;
	Q4DIntPtr*  intptr_4d_pointer;

	qinttop*    inttop_pointer;
	Q2DIntTop*  inttop_2d_pointer;
	Q3DIntTop*  inttop_3d_pointer;
	Q4DIntTop*  inttop_4d_pointer;

	qintmax*    intmax_pointer;
	Q2DIntMax*  intmax_2d_pointer;
	Q3DIntMax*  intmax_3d_pointer;
	Q4DIntMax*  intmax_4d_pointer;

	qboolean*   boolean_pointer;

	qnatural*   natural_pointer;
	Q2DNatural* natural_2d_pointer;
	Q3DNatural* natural_3d_pointer;
	Q4DNatural* natural_4d_pointer;

	qinteger*   integer_pointer;
	Q2DInteger* integer_2d_pointer;
	Q3DInteger* integer_3d_pointer;
	Q4DInteger* integer_4d_pointer;

	qreal*	    real_pointer;
	Q2DReal*    real_2d_pointer;
	Q3DReal*    real_3d_pointer;
	Q4DReal*    real_4d_pointer;

	void*	    pointer;
	quintptr    uintptr_value;
	QRange*     range_pointer;

#	ifdef Q_PARTIAL_POINTER_UNION
		Q_PARTIAL_POINTER_UNION
#	endif
Q_DEFINE_STRICT_UNION_END QPointer;

/* MARK: - General purpose types */

typedef struct {
	void* base;
	qsize index;
} QBaseAndIndex;

typedef struct {
	void* function;
	void* context;
} QFunctionAndContext;

typedef struct {
	void* function;
	void* context;
	void* data;
} QFunctionContextAndData;

/* MARK: - Casts */

#define Q_2D_UCHAR(  p) ((Q2DUChar   *)(p))
#define Q_2D_USHORT( p) ((Q2DUShort  *)(p))
#define Q_2D_UINT(   p) ((Q2DUInt    *)(p))
#define Q_2D_ULONG(  p) ((Q2DULong   *)(p))
#define Q_2D_ULLONG( p) ((Q2DULLong  *)(p))
#define Q_2D_CHAR(   p) ((Q2DChar    *)(p))
#define Q_2D_SHORT(  p) ((Q2DShort   *)(p))
#define Q_2D_INT(    p) ((Q2DInt     *)(p))
#define Q_2D_LONG(   p) ((Q2DLong    *)(p))
#define Q_2D_LLONG(  p) ((Q2DLLong   *)(p))
#define Q_2D_FLOAT(  p) ((Q2DFloat   *)(p))
#define Q_2D_DOUBLE( p) ((Q2DDouble  *)(p))
#define Q_2D_LDOUBLE(p) ((Q2DLDouble *)(p))
#define Q_2D_UINT8(  p) ((Q2DUInt8   *)(p))
#define Q_2D_UINT16( p) ((Q2DUInt16  *)(p))
#define Q_2D_UINT32( p) ((Q2DUInt32  *)(p))
#define Q_2D_UINT64( p) ((Q2DUInt64  *)(p))
#define Q_2D_UINT128(p) ((Q2DUInt128 *)(p))
#define Q_2D_INT8(   p) ((Q2DInt8    *)(p))
#define Q_2D_INT16(  p) ((Q2DInt16   *)(p))
#define Q_2D_INT32(  p) ((Q2DInt32   *)(p))
#define Q_2D_INT64(  p) ((Q2DInt64   *)(p))
#define Q_2D_INT128( p) ((Q2DInt128  *)(p))
#define Q_2D_SIZE(   p) ((Q2DSize    *)(p))
#define Q_2D_UINTPTR(p) ((Q2DUIntPtr *)(p))
#define Q_2D_UINTTOP(p) ((Q2DUIntTop *)(p))
#define Q_2D_UINTMAX(p) ((Q2DUIntMax *)(p))
#define Q_2D_SSIZE(  p) ((Q2DSSize   *)(p))
#define Q_2D_INTPTR( p) ((Q2DIntPtr  *)(p))
#define Q_2D_INTTOP( p) ((Q2DIntTop  *)(p))
#define Q_2D_INTMIN( p) ((Q2DIntMin  *)(p))
#define Q_2D_INTMAX( p) ((Q2DIntMax  *)(p))
#define Q_2D_NATURAL(p) ((Q2DNatural *)(p))
#define Q_2D_INTEGER(p) ((Q2DInteger *)(p))
#define Q_2D_REAL(   p) ((Q2DReal    *)(p))
#define Q_2D(	     p) ((Q2D	     *)(p))
#define Q_3D_UCHAR(  p) ((Q3DUChar   *)(p))
#define Q_3D_USHORT( p) ((Q3DUShort  *)(p))
#define Q_3D_UINT(   p) ((Q3DUInt    *)(p))
#define Q_3D_ULONG(  p) ((Q3DULong   *)(p))
#define Q_3D_ULLON(  p) ((Q3DULLong  *)(p))
#define Q_3D_CHAR(   p) ((Q3DChar    *)(p))
#define Q_3D_SHORT(  p) ((Q3DShort   *)(p))
#define Q_3D_INT(    p) ((Q3DInt     *)(p))
#define Q_3D_LONG(   p) ((Q3DLong    *)(p))
#define Q_3D_LLON(   p) ((Q3DLLong   *)(p))
#define Q_3D_FLOAT(  p) ((Q3DFloat   *)(p))
#define Q_3D_DOUBLE( p) ((Q3DDouble  *)(p))
#define Q_3D_LDOUBLE(p) ((Q3DLDouble *)(p))
#define Q_3D_UINT8(  p) ((Q3DUInt8   *)(p))
#define Q_3D_UINT16( p) ((Q3DUInt16  *)(p))
#define Q_3D_UINT32( p) ((Q3DUInt32  *)(p))
#define Q_3D_UINT64( p) ((Q3DUInt64  *)(p))
#define Q_3D_INT8(   p) ((Q3DInt8    *)(p))
#define Q_3D_INT16(  p) ((Q3DInt16   *)(p))
#define Q_3D_INT32(  p) ((Q3DInt32   *)(p))
#define Q_3D_INT64(  p) ((Q3DInt64   *)(p))
#define Q_3D_SIZE(   p) ((Q3DSize    *)(p))
#define Q_3D_UINTPTR(p) ((Q3DUIntPtr *)(p))
#define Q_3D_UINTTOP(p) ((Q3DUIntTop *)(p))
#define Q_3D_UINTMAX(p) ((Q3DUIntMax *)(p))
#define Q_3D_SSIZE(  p) ((Q3DSSize   *)(p))
#define Q_3D_INTPTR( p) ((Q3DIntPtr  *)(p))
#define Q_3D_INTTOP( p) ((Q3DIntTop  *)(p))
#define Q_3D_INTMIN( p) ((Q3DIntMin  *)(p))
#define Q_3D_INTMAX( p) ((Q3DIntMax  *)(p))
#define Q_3D_NATURAL(p) ((Q3DNatural *)(p))
#define Q_3D_INTEGER(p) ((Q3DInteger *)(p))
#define Q_3D_REAL(   p) ((Q3DReal    *)(p))
#define Q_3D(	     p) ((Q3D	     *)(p))
#define Q_4D_UCHAR(  p) ((Q4DUChar   *)(p))
#define Q_4D_USHORT( p) ((Q4DUShort  *)(p))
#define Q_4D_UINT(   p) ((Q4DUInt    *)(p))
#define Q_4D_ULONG(  p) ((Q4DULong   *)(p))
#define Q_4D_ULLON(  p) ((Q4DULLong  *)(p))
#define Q_4D_CHAR(   p) ((Q4DChar    *)(p))
#define Q_4D_SHORT(  p) ((Q4DShort   *)(p))
#define Q_4D_INT(    p) ((Q4DInt     *)(p))
#define Q_4D_LONG(   p) ((Q4DLong    *)(p))
#define Q_4D_LLON(   p) ((Q4DLLong   *)(p))
#define Q_4D_FLOAT(  p) ((Q4DFloat   *)(p))
#define Q_4D_DOUBLE( p) ((Q4DDouble  *)(p))
#define Q_4D_LDOUBLE(p) ((Q4DLDouble *)(p))
#define Q_4D_UINT8(  p) ((Q4DUInt8   *)(p))
#define Q_4D_UINT16( p) ((Q4DUInt16  *)(p))
#define Q_4D_UINT32( p) ((Q4DUInt32  *)(p))
#define Q_4D_UINT64( p) ((Q4DUInt64  *)(p))
#define Q_4D_INT8(   p) ((Q4DInt8    *)(p))
#define Q_4D_INT16(  p) ((Q4DInt16   *)(p))
#define Q_4D_INT32(  p) ((Q4DInt32   *)(p))
#define Q_4D_INT64(  p) ((Q4DInt64   *)(p))
#define Q_4D_SIZE(   p) ((Q4DSize    *)(p))
#define Q_4D_UINTPTR(p) ((Q4DUIntPtr *)(p))
#define Q_4D_UINTTOP(p) ((Q4DUIntTop *)(p))
#define Q_4D_UINTMAX(p) ((Q4DUIntMax *)(p))
#define Q_4D_SSIZE(  p) ((Q4DSSize   *)(p))
#define Q_4D_INTPTR( p) ((Q4DIntPtr  *)(p))
#define Q_4D_INTTOP( p) ((Q4DIntTop  *)(p))
#define Q_4D_INTMIN( p) ((Q4DIntMin  *)(p))
#define Q_4D_INTMAX( p) ((Q4DIntMax  *)(p))
#define Q_4D_NATURAL(p) ((Q4DNatural *)(p))
#define Q_4D_INTEGER(p) ((Q4DInteger *)(p))
#define Q_4D_REAL(   p) ((Q4DReal    *)(p))
#define Q_4D(	     p) ((Q4D	     *)(p))
#define Q_8BIT(      p) ((Q8Bit      *)(p))
#define Q_16BIT(     p) ((Q16Bit     *)(p))
#define Q_32BIT(     p) ((Q32Bit     *)(p))
#define Q_64BIT(     p) ((Q64Bit     *)(p))
#define Q_128BIT(    p) ((Q128Bit    *)(p))
#define Q_RANGE(     p) ((QRange     *)(p))

#define Q_BASE_AND_INDEX(	    p) ((QBaseAndIndex		 *)(p))
#define Q_FUNCTION_AND_CONTEXT(     p) ((QFunctionAndContext	 *)(p))
#define Q_FUNCTION_CONTEXT_AND_DATA(p) ((QFunctionContextAndData *)(p))

#endif /* __Q_types_base_H__ */
